OSGi                    From Wikipedia, the free encyclopedia                            Jump to:     navigation,      search             This article has multiple issues. Please help improve it or discuss these issues on the talk page.   This article needs attention from an expert on the subject. Please add a reason or a talk parameter to this template to explain the issue with the article. Consider associating this request with a WikiProject. (October 2011)   This article needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed. (June 2010)   This article provides insufficient context for those unfamiliar with the subject. Please help improve the article with a good introductory style. (April 2011)   This article includes a list of references, but its sources remain unclear because it has insufficient inline citations. Please help to improve this article by introducing more precise citations. (October 2013)   OSGi OSGi Alliance logo Year started2000Latest version6.0 June 2014 (2014-06)[1]OrganizationOSGi AllianceDomainJavaLicenseOSGi Specification License, Version 2.0Websitewww.osgi.org The OSGi Alliance, formerly known as the Open Services Gateway initiative, now an obsolete name, is an open standards organization founded in March 1999 that originally specified and continues to maintain the OSGi standard. The OSGi specification describes a modular system and a service platform for the Java programming language that implements a complete and dynamic component model, something that does not exist in standalone Java/VM environments. Applications or components, coming in the form of bundles for deployment, can be remotely installed, started, stopped, updated, and uninstalled without requiring a reboot; management of Java packages/classes is specified in great detail. Application life cycle management is implemented via APIs that allow for remote downloading of management policies. The service registry allows bundles to detect the addition of new services, or the removal of services, and adapt accordingly. The OSGi specifications have evolved beyond the original focus of service gateways, and are now used in applications ranging from mobile phones to the open-source Eclipse IDE. Other application areas include automobiles, industrial automation, building automation, PDAs, grid computing, entertainment, fleet management and application servers.    Contents  1 Specification process2 Architecture3 Bundles4 Life-cycle5 Services 5.1 Standard services 6 Organization7 Community8 Specification versions9 New in OSGi Release 4 9.1 New in Release 4.19.2 New in Release 4.29.3 New in Release 4.39.4 New in Release 5.0 9.4.1 New in Core Release 59.4.2 New in Enterprise Release 5  10 Related RFCs and Java specifications11 Related standards12 Projects using OSGi13 Current framework implementations14 See also15 References16 Further reading17 External links   Specification process[edit] The OSGi specification is developed by the members in an open process and made available to the public free of charge under the OSGi Specification License.[2] The OSGi Alliance has a compliance program that is open to members only. As of November 2010, there are seven certified OSGi framework implementations.[3] A separate page lists both certified and non-certified OSGi Specification Implementations, which include OSGi frameworks and other OSGi specifications. Architecture[edit]     OSGi Service Gateway Architecture   Any framework that implements the OSGi standard provides an environment for the modularization of applications into smaller bundles. Each bundle is a tightly coupled, dynamically loadable collection of classes, jars, and configuration files that explicitly declare their external dependencies (if any). The framework is conceptually divided into the following areas: BundlesBundles are normal jar components with extra manifest headers.ServicesThe services layer connects bundles in a dynamic way by offering a publish-find-bind model for Plain Old Java Interfaces (POJI) or Plain Old Java Objects (POJO).Services RegistryThe application programming interface for management services (ServiceRegistration, ServiceTracker and ServiceReference).Life-CycleThe application programming interface for life cycle management (install, start, stop, update, and uninstall) for bundles.ModulesThe layer that defines encapsulation and declaration of dependencies (how a bundle can import and export code).SecurityThe layer that handles the security aspects by limiting bundle functionality to pre-defined capabilities.Execution EnvironmentDefines what methods and classes are available in a specific platform. There is no fixed list of execution environments, since it is subject to change as the Java Community Process creates new versions and editions of Java. However, the following set is currently supported by most OSGi implementations: CDC-1.0/Foundation-1.0CDC-1.1/Foundation-1.1OSGi/Minimum-1.0OSGi/Minimum-1.1JRE-1.1From J2SE-1.2 up to J2SE-1.6  Bundles[edit]     Classification: OSGi   A bundle is a group of Java classes and additional resources equipped with a detailed manifest MANIFEST.MF file on all its contents, as well as additional services needed to give the included group of Java classes more sophisticated behaviors, to the extent of deeming the entire aggregate a component. Below is an example of a typical MANIFEST.MF file with OSGi Headers:  Bundle-Name: Hello World Bundle-SymbolicName: org.wikipedia.helloworld Bundle-Description: A Hello World bundle Bundle-ManifestVersion: 2 Bundle-Version: 1.0.0 Bundle-Activator: org.wikipedia.Activator Export-Package: org.wikipedia.helloworld;version="1.0.0" Import-Package: org.osgi.framework;version="1.3.0"  The meaning of the contents in the example is as follows:[4] Bundle-Name: Defines a human-readable name for this bundle, Simply assigns a short name to the bundle.Bundle-SymbolicName: The only required header, this entry specifies a unique identifier for a bundle, based on the reverse domain name convention (used also by the java packages).Bundle-Description: A description of the bundle's functionality.Bundle-ManifestVersion: Indicates the OSGi specification to use for reading this bundle.Bundle-Version: Designates a version number to the bundle.Bundle-Activator: Indicates the class name to be invoked once a bundle is activated.Export-Package: Expresses which Java packages contained in a bundle will be made available to the outside world.Import-Package: Indicates which Java packages will be required from the outside world to fulfill the dependencies needed in a bundle. Life-cycle[edit]     OSGi Bundle Life-Cycle   A Life Cycle layer adds bundles that can be dynamically installed, started, stopped, updated and uninstalled. Bundles rely on the module layer for class loading but add an API to manage the modules in run time. The life cycle layer introduces dynamics that are normally not part of an application. Extensive dependency mechanisms are used to assure the correct operation of the environment. Life cycle operations are fully protected with the security architecture. Bundle StateDescriptionINSTALLEDThe bundle has been successfully installed.RESOLVEDAll Java classes that the bundle needs are available. This state indicates that the bundle is either ready to be started or has stopped.STARTINGThe bundle is being started, the BundleActivator.start method has been called but the start method has not yet returned. When the bundle has an activation policy, the bundle will remain in the STARTING state until the bundle is activated according to its activation policy.ACTIVEThe bundle has been successfully activated and is running; its Bundle Activator start method has been called and returned.STOPPINGThe bundle is being stopped. The BundleActivator.stop method has been called but the stop method has not yet returned.UNINSTALLEDThe bundle has been uninstalled. It cannot move into another state. Below is an example of a typical Java class implementing the BundleActivator interface:   package org.wikipedia;  import org.osgi.framework.BundleActivator; import org.osgi.framework.BundleContext;  public class Activator implements BundleActivator {  private BundleContext context;   @Override  public void start(BundleContext context) throws Exception {   System.out.println("Starting: Hello World");   this.context = context;  }   @Override  public void stop(BundleContext context) throws Exception {   System.out.println("Stopping: Goodbye Cruel World");   this.context = null;  } }  Services[edit] This section requires expansion. (March 2009) Standard services[edit] The OSGi Alliance has specified many services. Services are specified by a Java interface. Bundles can implement this interface and register the service with the Service Registry. Clients of the service can find it in the registry, or react to it when it appears or disappears. The table below shows a description of OSGi System Services: System ServicesDescriptionLoggingThe logging of information, warnings, debug information or errors is handled through the Log Service. It receives log entries and then dispatches these entries to other bundles that subscribed to this information.Configuration AdminThis service allows an operator to set and get the configuration information of deployed bundlesDevice AccessFacilitates the coordination of automatic detection and attachment of existing devices. This is used for Plug and Play scenarios.User AdminThis service uses a database with user information (private and public) for authentication and authorization purposes.IO ConnectorThe IO Connector Service implements the CDC/CLDC javax.microedition.io package as a service. This service allows bundles to provide new and alternative protocol schemes.PreferencesOffers an alternative, more OSGi-friendly mechanism to using Java’s default Properties for storing preferences.Component RuntimeThe dynamic nature of services—they can come and go at any time—makes writing software harder. The Component Runtime specification can simplify handling these dynamic aspects by providing an XML based declaration of the dependencies.Deployment AdminStandardizes access to some of the responsibilities of the management agent.Event AdminProvides an inter-bundle communication mechanism based on a publish-and-subscribe model.Application AdminSimplifies the management of an environment with many different types of applications that are simultaneously available. The table below shows a description of OSGi Protocol Services: Protocol ServicesDescriptionHTTP ServiceAllows information to be sent and received from OSGi using HTTP.UPnP Device ServiceSpecifies how OSGi bundles can be developed to interoperate with Universal Plug and Play (UPnP) devices.DMT AdminDefines an API for managing a device using concepts from the Open Mobile Alliance (OMA) device management specifications. The table below shows a description of OSGi Miscellaneous Services: Miscellaneous ServicesDescriptionWire AdminAllows the connection between a Producer service and a Consumer service.XML ParserThe XML Parser service allows a bundle to locate a parser with desired properties and compatibility with JAXP.Measurement and StateThe Measurement and State service allows and simplifies the correct handling of measurements in an OSGi service platform. Organization[edit] The OSGi Alliance was founded by Ericsson, IBM, Motorola, Sun Microsystems and others in March 1999. Before incorporating as a nonprofit corporation it was called the Connected Alliance. Among its members are (as of February 2015[update]) more than 35 companies from quite different business areas, for example Adobe Systems, Deutsche Telekom, Hitachi, IBM, Liferay, Makewave (formerly Gatespace Telematics), NEC, NTT, Oracle, Orange S.A., ProSyst, Salesforce.com, Siemens, Software AG and TIBCO Software.[5] The Alliance has a board of directors that provides the organization's overall governance. OSGi officers have various roles and responsibilities in supporting the alliance. Technical work is conducted within Expert Groups (EGs) chartered by the board of directors, and non-technical work is conducted in various working groups and committees. The technical work conducted within Expert Groups include developing specifications, reference implementations, and compliance tests. These Expert Groups have produced five major releases of the OSGi specifications (As of 2012[update]). Dedicated Expert Groups exist for the enterprise, mobile, vehicle and the core platform areas. The Enterprise Expert Group (EEG) is the newest EG and is addressing Enterprise / Server-side applications. In November 2007 the Residential Expert Group (REG) started to work on specifications to remotely manage residential/home-gateways. In October 2003, Nokia, Motorola, IBM, ProSyst and other OSGi members formed a Mobile Expert Group (MEG) that will specify a MIDP-based service platform for the next generation of smart mobile phones, addressing some of the needs that CLDC cannot manage - other than CDC. MEG became part of OSGi as with R4. Community[edit] In 2003, Eclipse selected OSGi as the underlying runtime for the plug-in architecture used for the Eclipse Rich Client Platform and the IDE platform. Eclipse itself includes sophisticated tooling for developing OSGi bundles and there are a number of other Eclipse plug-ins aimed at supporting OSGi behaviour. There is a vibrant free software community revolving around the OSGi specification. Some widely used open source implementations are Equinox, Apache Felix and Knopflerfish OSGi. Specification versions[edit] OSGi Release 1 (R1): May 2000OSGi Release 2 (R2): October 2001OSGi Release 3 (R3): March 2003OSGi Release 4 (R4): October 2005 / September 2006 Core Specification (R4 Core): October 2005Mobile Specification (R4 Mobile / JSR-232): September 2006 OSGi Release 4.1 (R4.1): May 2007 (AKA JSR-291)OSGi Release 4.2 (R4.2): September 2009 Enterprise Specification (R4.2): March 2010 OSGi Release 4.3 (R4.3): April 2011 Core: April 2011Compendium and Residential: May 2012 OSGi Release 5 (R5): June 2012 Core and Enterprise: June 2012 OSGi Release 6 (R6): June 2014 Core: June 2014  New in OSGi Release 4[edit] The new features of OSGi R4 in brief are as follows: New modularization capabilities providing enhanced encapsulation of networked services that can share a single virtual machine (VM).Modularized class sharing and hiding of implementation details.Methods for handling multiple versions of the same classes so old and new applications can execute within the same VM.Localization of OSGi bundle manifests enabling service deployment anywhere.Enhancements in security and policies: The new Conditional Permission Admin service provides an elegant and simple way to manage networked services securely. It also supports dynamic policies that can depend on external (custom) conditions. Combined with R4 support for digital signatures, this provides a central security solution to large deployments of products using the OSGi Service Platform.A Declarative Services specification that addresses memory footprint issues that can prevent small embedded devices from using a service-oriented architecture to support multiple applications. Additionally, it significantly simplifies the service-oriented programming model by declaratively handling the dynamics of services.Compatibility with Release 3, requiring no changes for existing OSGi bundles, applications, or services. New in Release 4.1[edit] OSGi R4.1 was a minor revision intended to clarify certain aspects of bundle initialization and loading in order to improve third party usage. It added no new services or major features. New in Release 4.2[edit] OSGi R4.2 was a significant release that added several new services and capabilities,[6] including: Framework launching: Standardized means to launch OSGi from various providersRemote Services: Allows the exporting of services to remote VMs (formerly known as Distribute OSGi)Blueprint Service: Dependency injection and inversion of control (similar to Spring) that allows external configuration of bundle dependenciesBundle Tracker: Track and respond to changes in bundle presence and stateService Hooks: Allow introspection and behavior modification of service calls to inject security or dynamicismConditional Permissions: Support negative permissions, forbidding specific actions instead of just allowing them More information can also be specified in each bundle header, such as license information, MIME types and icons. Additionally, changes to Declarative Services allow the easier setting of permissions. Finally, OSGi bundles can now have their return values read. OSGi R4.2 also introduced a new specification release for the enterprise[7] including support for: Web Applications: A standardized format for building OSGi web applications packaged using the WAR file format (Sun)JPA Service: Provides a reliable standard mechanism to use the Java Persistence API in OSGiJNDI Service: Allows integration of the OSGi service registry and the Java Naming and Directory InterfaceJDBC Service: Provides an OSGi lifecycle-aware mechanism to obtain connections to an external Database New in Release 4.3[edit] Generics: The framework now uses JDK5 generics in several places. However, Java 1.4 can still be targeted using "-source 1.5 -target jsr14" switches to javac.Capabilities: A set of attributes in a namespace in a module's meta information, such as osgi.wiring.package Export-Package.Requirements: A filter expression over the attribute set of a capability, such as osgi.wiring.package Import-Package.adapt: Replaces Framework services; adapts Bundle to another type (if supported). Replaces PackageAdmin and StartLevel services with APIs which a Bundle can be adapted to.WeavingHook: The WeavingHook services allows load-time bytecode weaving.ResolverHooks and BundleHooks: Replaces the nested frameworks and composite bundles proposal with low-level capabilities to influence requirement-capability matching.Service EventListener Hook: Replaces Service Event Hook with finer-grained event delivery control. New in Release 5.0[edit] New in Core Release 5[edit] Resource API for modeling generic capabilities and requirements.Version Range class. New in Enterprise Release 5[edit] Related RFCs and Java specifications[edit] RFC 2608 (Service Location Protocol)Sun JiniSun JCP JSR-8 (Open Services Gateway Specification)Sun JCP JSR-232 (Mobile Operational Management)Sun JCP JSR-246 (Device Management API)Sun JCP JSR-249 (Mobile Service Architecture for CDC)Sun JCP JSR-277 (Java Module System)Sun JCP JSR-291 (Dynamic Component Support for Java SE - AKA OSGi 4.1)Sun JCP JSR-294 (Improved Modularity Support in the Java Programming Language) Related standards[edit] MHP / OCAPUniversal Plug and Play (UPnP)DPWSITU-T G.hnLonWorksCORBACEBusEHS (KNX) / CECED CHAINJava Management Extensions Projects using OSGi[edit] Apache Aries - Blueprint Container implementations and extensions of application-focused specifications defined by OSGi Enterprise Expert Group.Apache Karaf - an OSGi based runtime that provides a lightweight container onto which various components and applications can be deployed.Apache Sling - OSGi-based applications layer for JCR content repositoriesAtlassian Confluence and JIRA - the plug-in architecture for this enterprise wiki and issue tracker uses OSGiBusiness Intelligence and Reporting Tools (BIRT) Project - Open source reporting engineCytoscape - an open source bioinformatics software platform (as of version 3.0)DataNucleus - open source data services and persistence platform in service-oriented architecturesDotcms - open source Web Content ManagementEasyBeans - open source EJB 3 containerEclipse - open source IDE and rich client platformiDempiere - is an OSGi implementation of the open source ERP Branch GlobalQSS Adempiere361 originally started by Low Heng Sin.[8]Eclipse Communication Framework (ECF) - open source implementation of OSGi Remote Services specificationEclipse Virgo - open source microkernel-based server constructed of OSGi bundles and supporting OSGi applicationsEvent Insight - SAP BusinessObjects complex event processing sdnESF Everyware Software Framework - Eurotech's fully supported and commercialized M2M/IoT software framework for embedded applications [1]GlassFish (v3) - application server for Java EEFuse ESB - a productized and supported release of ServiceMix 4.ServiceMix - Apache ServiceMix is a flexible, open-source integration container that unifies the features and functionality of following components: Apache ActiveMQ, Apache Camel, CXF, and Apache Karaf into a powerful runtime platform. The components are always really outdated. You can use servicemix to build your own integrations solutions and it provides a complete, enterprise ready ESB exclusively powered by OSGi.GX WebManager Community Edition - An Enterprise Web Content Management System based on OSGi, spring and JCRKura - Eclipse IOT open source project for M2M applications [2]IntelliJ - Java IDE and rich client platform with free community editionJBoss - Red Hat's JBoss Application ServerJOnAS 5 - open source Java EE 5 application serverJOSSO 2 - Atricore's open source standards-based Identity and Access Management PlatformLiferay - a free and open source enterprise portal platformLucee 5 - open source CFML Web Application ServerNetbeans - open source IDE and rich client platformNuxeo - open source ECM Service PlatformOpen Daylight Project - Project with the goal of accelerating the adoption of software-defined networkingOpenEJB - open source OSGi-enabled EJB 3.0 container that can be run both in standalone or embedded modeOpenWorm - open source software simulation of C. Elegans, via the dedicated Geppetto modular plateformPackage Drone A software artifact repository for OSGiParemus Service Fabric - an autonomic OSGi based private Cloud runtime that supports BluePrint, Declarative Services & Scala based applications.SOA Software - API Gateway server from SOA SoftwareSpringSource dm Server - open source microkernel-based server constructed of OSGi bundles and supporting OSGi applicationsWeblogic - Oracle Weblogic Application ServerWebSphere - IBM Websphere JEE Application ServerWebMethods - SoftwareAG WebMethodsWSO2 Carbon - Base platform for WSO2’s enterprise-grade Open source middleware stack.Requea - A complete ERP foundation Web application (OSGI based) with online MDA editing (module creation on the fly). [3][4] Current framework implementations[edit] NameLicenseApache FelixOpen sourceConcierge OSGiOpen sourceEquinox OSGiOpen sourceHitachi SuperJCommercialKnopflerfishOpen sourceProSyst mBSCommercialEclipse GeminiOpen Source See also[edit] OSGi Specification Implementations References[edit]  ^ "OSGi Alliance | Specifications / HomePage". osgi.org. 2014. Retrieved November 24, 2014. ^ OSGi Specification License^ "Certified Products". OSGi Alliance. Retrieved 2010-11-01. ^ Creating OSGi bundles by Costin Leau^ OSGi Alliance | About / Members^ "OSGi 4.2 released". Retrieved February 16, 2010. ^ "OSGi ALLIANCE PUBLISHES ENTERPRISE SPECIFICATION" (PDF). Retrieved November 28, 2011. ^ "Adempiere Branch_GlobalQSS_361". http://www.adempiere.com/. Retrieved 27 September 2014.   Further reading[edit]   This article's further reading may not follow Wikipedia's content policies or guidelines. Please improve this article by removing excessive, less relevant or many publications with the same point of view; or by incorporating the relevant publications into the body of the article through appropriate citations. (April 2011)  Cummins, Holly; Ward, Tim (March 28, 2013), Enterprise OSGi in Action (1st ed.), Manning Publications, p. 376, ISBN 978-1617290138 Alves, Alexandre de Castro (July 28, 2011), OSGi in Depth (1st ed.), Manning Publications, p. 325, ISBN 1-935182-17-X McAffer, Jeff; VanderLei, Paul; Archer, Simon (February 24, 2010), OSGi and Equinox: Creating Highly Modular Java Systems (1st ed.), Addison-Wesley Professional, p. 460, ISBN 0-321-58571-2 Joseph Gédéon, Walid (November 5, 2010), OSGi and Apache Felix 3.0 Beginner's Guide (1st ed.), Packt Publishing, p. 336, ISBN 1-84951-138-1 Walls, Craig (July 2009), Modular Java with OSGi and Spring (1st ed.), Pragmatic Bookshelf, p. 250, ISBN 978-1-934356-40-1 Hall, Richard S; Karl Pauls, and Stuart McCulloch (September 2009), OSGi in Action (1st ed.), Manning Publications, p. 375, ISBN 1-933988-91-6  Cite uses deprecated parameter |coauthors= (help)Alves, Alexandre de Castro (March 2009), OSGi Application Frameworks (1st ed.), Manning Publications, p. 325, ISBN 978-1-935182-17-7 Bartlett, Neil (2009-01-10), OSGi In Practice (PDF) (DRAFT ed.), p. 229 McAffer, Jeff; VanderLei, Paul; Archer, Simon (September 7, 2009), Equinox and OSGi: The Power Behind Eclipse (1st ed.), Addison-Wesley Professional, p. 480, ISBN 0-321-58571-2 Mak, Gary (2009), Pro SpringSource dm Server, Apress, p. 250, ISBN 1-4302-1640-9 Rubio, Daniel (2009-02-12), Pro Spring Dynamic Modules for OSGi Service Platforms (First ed.), Apress, p. 392, ISBN 1-4302-1612-3 The OSGi Alliance (2003), OSGi Service Platform, Release 3, IOS Press, p. 604, ISBN 1-58603-311-5 OSGi Service Platform, Core Specification, Release 4, Version 4.1, OSGi Alliance., 2007, p. 228, ISBN 978-90-79350-01-8 OSGi Service Platform, Core Specification, Release 4, Version 4.2, OSGi Alliance., 2009, p. 332, ISBN 978-90-79350-04-9 OSGi Service Platform, Service Compendium, Release 4, Version 4.1, OSGi Alliance., 2007, p. 594, ISBN 978-90-79350-02-5 OSGi Service Platform, Mobile Specification, Release 4, Version 4, OSGi Alliance., 2007, p. 426, ISBN 978-90-79350-03-2 Kirk Chen, Li Gong. (2001), Programming Open Service Gateways with Java Embedded Server(TM) Technology, Prentice Hall PTR, p. 480, ISBN 0-201-71102-8 Kayode Odeyemi (2010), Building an OSGI Declarative Service with Maven using Netbeans BJ Hargrave (IBM) (2011), OSGi 4.3 Technical Update: What's new?, The Eclipse Foundation   External links[edit] Wikimedia Commons has media related to OSGi. Official websiteOredev 2008 - Architecture - OSGi Now and TomorrowChinese OSGi CommunityFrequently Asked QuestionsOSGi Developer Mail ListOSGi Open Forum and Discussion CentralEclipse Equinox Article Index - Articles on an open source OSGi implementationOSGi Users' Forums - Belgium, Brazil, China, France, Germany, Japan, Korea, Spain, Sweden, UK and soon : Italy                    Retrieved from "https://en.wikipedia.org/w/index.php?title=OSGi&oldid=673902254"          Categories: Standards organizationsFree software programmed in Java (programming language)1999 establishments in the United StatesEmbedded systemsHidden categories: Articles needing expert attention with no reason or talk parameterArticles needing unspecified expert attentionArticles needing expert attention from October 2011All articles needing expert attentionArticles needing additional references from June 2010All articles needing additional referencesWikipedia articles needing context from April 2011All Wikipedia articles needing contextWikipedia introduction cleanup from April 2011All pages needing cleanupArticles lacking in-text citations from October 2013All articles lacking in-text citationsArticles to be expanded from March 2009All articles to be expandedArticles containing potentially dated statements from 2015All articles containing potentially dated statementsArticles containing potentially dated statements from 2012Wikipedia spam cleanup from April 2011Wikipedia further reading cleanupPages containing cite templates with deprecated parametersCommons category with local link same as on WikidataArticles with example Java code                      Navigation menu                      Personal tools       Create accountLog in                                  Namespaces       ArticleTalk                                      Variants                                                                     Views       ReadEditView history                        More                                                       Search                                                                                     Navigation               Main pageContentsFeatured contentCurrent eventsRandom articleDonate to WikipediaWikipedia store                   Interaction               HelpAbout WikipediaCommunity portalRecent changesContact page                   Tools               What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationWikidata itemCite this page                   Print/export               Create a bookDownload as PDFPrintable version                   Languages               ???????ÈeštinaDeutschEspa?olFrançais???Italiano???????MagyarNederlands???Portugu?s???????Türkçe??     Edit links                          This page was last modified on 31 July 2015, at 08:00.Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply.  By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.        Privacy policyAbout WikipediaDisclaimersContact WikipediaDevelopersMobile view