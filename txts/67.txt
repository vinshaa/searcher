JSON-WSP                    From Wikipedia, the free encyclopedia                            Jump to:     navigation,      search            This article possibly contains original research. Please improve it by verifying the claims made and adding inline citations. Statements consisting only of original research should be removed. (July 2014)    This article has multiple issues. Please help improve it or discuss these issues on the talk page.   The topic of this article may not meet Wikipedia's general notability guideline. Please help to establish notability by adding reliable, secondary sources about the topic. If notability cannot be established, the article is likely to be merged, redirected, or deleted. Find sources: "JSON-WSP" – news · newspapers · books · scholar · JSTOR · free images (February 2011)   This article needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed. (February 2011)   This article have only dead-link references, perhaps you are searching for JSON#JSON_Schema JSON-WSP (JavaScript Object Notation Web-Service Protocol) is a web-service protocol that uses JSON[1] for service description, requests and responses. It is very much inspired from JSON-RPC, but the lack of a service description specification with documentation in JSON-RPC sparked the design of JSON-WSP. The description format has the same purpose for JSON-WSP as WSDL has for SOAP or IDL for CORBA, which is to describe the types and methods used in a given service. It also describes inter-type relations (i.e. nested types) and defines which types are expected as method arguments and which types the user can expect to receive as method return values. Finally the description opens the possibility to add documentation on service, method, parameter and return levels. Communication between clients and a JSON-WSP server is carried out using HTTP POST[2] requests and responses, with the JSON objects as data with the content-type application/json.[3]    Contents  1 Specifications 1.1 Understanding the specification notation 1.1.1 Building blocks 1.2 Common building-blocks1.3 Description object 1.3.1 Additional building-blocks1.3.2 Specification1.3.3 Descriptions 1.4 Request object 1.4.1 Specification 1.5 Response object 1.5.1 Specification 1.6 Fault response object 1.6.1 Additional building-blocks1.6.2 Specification1.6.3 Descriptions  2 Real world example 2.1 Description2.2 Service call 1 2.2.1 Request2.2.2 Response 2.3 Service call 2 2.3.1 Request2.3.2 Response  3 Attachments 3.1 Attachment service description example3.2 Attachment service request example 4 Server implementations5 Client implementations6 See also7 References8 External links   Specifications[edit] JSON-WSP consists of four JSON object specifications: SpecificationDescriptiondescriptionService description specification (like WSDL). This specification describes methods, method parameters, types and return types. It also supports user documentation on service, method and parameter levels.requestSpecification for JSON requests. It contains information about which method that is to be invoked and all the arguments for the method call. Arguments in the request must obey the parameter definition of the same method described in the corresponding JSON-WSP description.responseSpecification for JSON responses. The response object contains the result of a service method invocation. The return type must obey the defined return type of the same method in the corresponding JSON-WSP description.faultSpecification for JSON fault responses. The fault object contains a fault code and a fault string. The fault information specifies whether the fault occurred on the client or server side. Depending on the server side service framework more detailed information can be extracted, i.e. the filename and line number where the fault occurred. NOTE: JSON-WSP specification 1.0 is still[when?] not final. Please refer to the real world example in this article to get an idea of how the specification is going to be structured. The current state of the actual specification is kept at launchpad.net:.[4] An RFC proposal is currently being created and hopefully accepted within a couple of months.[when?] Understanding the specification notation[edit] Building blocks[edit] If the name of the building-block being defined starts with rx-, it means that the definition is a regular expression. In these definitions square brackets have the role of defining character classes and parentheses have the role of defining capturing groups.In all other cases, square brackets notate lists and parentheses notate either a decision:[spelling?]:  ( d1 | d2 | ... )  a repetition of 0-many:  ( ... )*  a repetition 1-many:  ( ... )+  or something optional:  ( ... )?  Common building-blocks[edit]   <rx-freetext> = ".*"  <rx-identifier> = "[a-zA-Z_][a-zA-Z0-9_]*"  <rx-number> = [0-9]+  <rx-boolean> = (true|false)  <key> = <rx-identifier>  <primitive-value> = ( <rx-freetext> | <rx-number> | <rx-boolean> )  <value> = (     <primitive-value> |     [ ( <value>, )* ] |     { ( <key>: <value>, )* } )  <method-name> = <rx-identifier>  <service-name> = <rx-identifier>  Description object[edit] Additional building-blocks[edit]   <primitive> = ( "string" | "number" | "float" | "attachment" )  <service-locator> = <rfc-1738 compliant string>  <type-name> = <rx-identifier>  <member-name> = <rx-identifier>  <multi-type> = ( <primitive> | <type-name> | [<primitive>] | [<type-name>] )  <doc-string> = <rx-freetext>  <param-name> = <rx-identifier>  <def-order> = <rx-number>  <param-optional> = <rx-boolean>  Specification[edit]   {     "type": "jsonwsp/description",     "version": "1.0",     "servicename": <service-name>,     "url": <service-locator>,     "types": { (         <type-name>: { (             <member-name>: <multi-type> )+         } )*     },     "methods": { (         <method-name>: {             "doc_lines": [ ( <doc-string>, )* ],             "params": { (                 <param-name>: {                     "doc_lines": [ ( <doc-string>, )* ],                     "def_order": <def-order>,                     "type": <multi-type>,                     "optional": <param-optional>                 }, )*             },             "ret_info": {                 "doc_lines": [ ( <doc-string>, )* ],                 "type": <multi-type>             }         } )+     } }  Descriptions[edit] <service-locator>: The service endpoint URL that accepts JSON-WSP POST request objects. <service-name>: Service name is case sensitive. It identifies a specific service exposed on a specific server. doc_lines: Each doc-string contained in a doc_lines list reflects a single line of documentation that relates to the parent object of the doc_lines.. Request object[edit] The request object contains information about which method to invoke and what arguments to invoke the method with. It also stores information about the type and version of itself. The optional mirror value can be used to send information from the client which will then be reflected by the server and returned unchanged in the response object's reflection value. This feature allows clients to send multiple requests to a method and send request identification values that can be intercepted by the client's response handler. This is often necessary from javascript if more than one request is being processed simultaneously by the server and the response order is unknown by the client. Specification[edit]   {     "type": "jsonwsp/request",     "version": "1.0",     "methodname": <method-name>,     "args": { ( <key>: <value>, )* }(,     "mirror": <value> )? }  Response object[edit] Specification[edit] The reflection value is an unchanged server reflection of the request object's mirror value. It is marked as optional because it is the client that controls via the request whether it is there or not.   {     "type": "jsonwsp/response",     "version": "1.0",     "servicename": <service-name>,     "methodname": <method-name>,     "result": <value>(,     "reflection": <value> )? }  Fault response object[edit] Additional building-blocks[edit]   <fault-code> = ( "incompatible" | "client" | "server" )  <fault-string> = <rx-freetext>  <fault-filename> = <rx-freetext>  <fault-lineno> = <rx-number>  Specification[edit]   {     "type": "jsonwsp/fault",     "version": "1.0",     "fault": {         "code": <fault-code>,         "string": <fault-string>,         ("detail": [ ( <fault-string>, )* ] ,)?         ("filename": <fault-filename>,)?         ("lineno": <fault-lineno>,)?     }(,     "reflection": <value> )? }  Descriptions[edit] <fault-code>: The meanings of the possible fault-codes: "incompatible": Client version of JSON-WSP is incompatible with the server version of JSON-WSP. Typically one will encounter this type of fault-code if there is a version major in difference between the client and the server."server": An error occurred on the server side after the client request has been successfully consumed."client": The clients request could not be consumed by the server due to incorrect format or missing required arguments etc. Real world example[edit] Description[edit]   {     "type": "jsonwsp/description",     "version": "1.0",     "servicename": "UserService",     "url": "http://testladon.org:80/proxy.php?path=UserService/jsonwsp",     "types": {         "Group": {             "group_id": "number",             "display_name": "string",             "name": "string",             "members": ["User"]         },         "User": {             "username": "string",             "user_id": "number",             "mobile": "string",             "age": "number",             "given_name": "string",             "surname": "string"         },         "CreateUserResponse": {             "user_id": "number",             "success": "boolean"         }     },     "methods": {         "listUsers": {             "doc_lines": ["List Users that have a username, given_name or surname that matches a given filter."],             "params": {                 "name_filter": {                     "def_order": 1,                     "doc_lines": ["String used for filtering the resulting list of users."],                     "type": "string",                     "optional": false                 }             },             "ret_info": {                 "doc_lines": ["List of users."],                 "type": ["User"]             }         },         "listGroups": {             "doc_lines": ["List Groups that have a name or display_name that matches a given filter."],             "params": {                 "name_filter": {                     "def_order": 1,                     "doc_lines": ["String used for filtering the resulting list of groups."],                     "type": "string",                     "optional": false                 }             },             "ret_info": {                 "doc_lines": ["List of groups."],                 "type": ["Group"]             }         },         "createUser": {             "doc_lines": ["Create a new user account."],             "params": {                 "username": {                     "def_order": 1,                     "doc_lines": ["Unique username for the new user account."],                     "type": "string",                     "optional": false                 },                 "given_name": {                     "def_order": 2,                     "doc_lines": ["First name."],                     "type": "string",                     "optional": false                 },                 "surname": {                     "def_order": 3,                     "doc_lines": ["Last name."],                     "type": "string",                     "optional": false                 },                 "mobile": {                     "def_order": 4,                     "doc_lines": ["Optional mobile number."],                     "type": "string",                     "optional": true                 },                 "age": {                     "def_order": 5,                     "doc_lines": ["Optional age of the person behind the account."],                     "type": "number",                     "optional": true                 }             },             "ret_info": {                 "doc_lines": [],                 "type": "CreateUserResponse"             }         }     } }  Service call 1[edit] Request[edit]   {     "type": "jsonwsp/request",     "version": "1.0",     "methodname": "createUser",     "args": {         "username": "bettyw",         "given_name": "Betty",         "surname": "Wilson",         "mobile": "555-3423444"     },     "mirror": {         "id": 2     } }  Response[edit]   {     "type": "jsonwsp/response",     "version": "1.0",     "servicename": "UserService",     "method": "createUser",     "result": {         "user_id": 324,         "success": true     },     "reflection": {         "id": 2     } }  Service call 2[edit] Request[edit]   {     "type": "jsonwsp/request",     "version": "1.0",     "methodname": "listUsers",     "args": {         "name_filter": "jack"     } }  Response[edit]   {     "type": "jsonwsp/response",     "version": "1.0",     "servicename": "UserService",     "method": "listUsers",     "result": [{         "username": "jackp",         "user_id": 153,         "mobile": "555-377843",         "age": 34,         "given_name": "Jack",         "surname": "Petersen"     }, {         "username": "bradj",         "user_id": 321,         "mobile": "555-437546",         "age": 27,         "given_name": "Brad",         "surname": "Jackson"     }] }  Attachments[edit] The attachment type is new in JSON-WSP. It can be used anywhere in the description as a primitive type. In requests and responses that involve attachments, the message format must be multipart/related where the attachments are transported as mimeparts of media type: application/octet-stream with no Content-Transfer-Encoding (only raw binary). Mimeparts must have a unique CONTENT-ID in their entity headers. Attachment values in the JSON-WSP request/response objects must match the regular expression "^cid:(.+)$" where the capture group maps to one of the mimepart's CONTENT-ID. Attachment service description example[edit] The following example shows what a simple JSON-WSP description with attachments could look like:   {     "type": "jsonwsp/description",     "version": "1.0",     "url": "http://mysite.com/TransferService/jsonwsp",     "servicename": "TransferService",     "types": {         "File": {             "data": "attachment",             "name": "string"         }     },     "methods": {         "upload": {             "ret_info": {                 "doc_lines": [],                 "type": "number"             },             "doc_lines": [],             "params": {                 "incoming": {                     "def_order": 1,                     "doc_lines": [],                     "type": [ "File" ],                     "optional": false                 }             }         }     } }  Attachment service request example[edit] A request to the method "upload" described above could look like this:   Content-Type: multipart/related; boundary="2676ff6efebdb664f8f7ccb34f864e25"  --2676ff6efebdb664f8f7ccb34f864e25 Content-Type: application/json, charset=UTF-8 Content-ID: body  {     "type": "jsonwsp/request",     "version": "1.0",     "methodname": "upload",     "args": {         "incoming": [ {             "data": "cid:img2354.png",             "name": "face.png"         }, {             "data": "cid:cv.pdf",             "name": "cv.pdf"         } ]     } } --2676ff6efebdb664f8f7ccb34f864e25 Content-Type: application/octet-stream Content-ID: img2354.png  <png-image binary data> --2676ff6efebdb664f8f7ccb34f864e25 Content-Type: application/octet-stream Content-ID: cv.pdf  <pdf-image binary data> --2676ff6efebdb664f8f7ccb34f864e25--  Server implementations[edit] ladon at PyPI Ladon is a Python-based framework that exposes json-wsp and other protocolsladon at ladonize.org ladonize.org is the official homepage for ladon. It contains running demos.pfacka/jsonwsp A Python JSON-WSP server implentation] Client implementations[edit] PHP ClientC# Clientladon at PyPI contains a Python client (from ladon.clients.jsonwsp import JSONWSPClient)JavaScript clientC++ Client (Not entirely complete)pfacka/jsonwsp Python clientbobuk/jsonwsp-client Python client See also[edit] JSON-RPC JSON-based remote procedure callorg.brutusin:jsonsrv library, a web-service protocol that uses JSON and JSON-schema References[edit]  ^ The JSON ECMA specification^ HTTP/1.1 HTTP/1.1 Semantics and Content^ The application/json Media Type for JavaScript Object Notation (JSON)^ JSON-WSP description specification[dead link]  External links[edit] JSON-WSP specs repository[dead link]                    Retrieved from "https://en.wikipedia.org/w/index.php?title=JSON-WSP&oldid=664282393"          Categories: Web servicesWeb service specificationsRemote procedure callHidden categories: All articles with dead external linksArticles with dead external links from May 2013Articles that may contain original research from July 2014All articles that may contain original researchArticles with topics of unclear notability from February 2011All articles with topics of unclear notabilityArticles needing additional references from February 2011All articles needing additional referencesVague or ambiguous time from July 2012Wikipedia articles needing clarification from October 2011Articles with dead external links from April 2013                      Navigation menu                      Personal tools       Create accountLog in                                  Namespaces       ArticleTalk                                      Variants                                                                     Views       ReadEditView history                        More                                                       Search                                                                                     Navigation               Main pageContentsFeatured contentCurrent eventsRandom articleDonate to WikipediaWikipedia store                   Interaction               HelpAbout WikipediaCommunity portalRecent changesContact page                   Tools               What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationWikidata itemCite this page                   Print/export               Create a bookDownload as PDFPrintable version                   Languages                    Add links                          This page was last modified on 27 May 2015, at 15:02.Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply.  By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.        Privacy policyAbout WikipediaDisclaimersContact WikipediaDevelopersMobile view