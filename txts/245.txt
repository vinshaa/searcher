Network socket                    From Wikipedia, the free encyclopedia                            Jump to:     navigation,      search            This article may be in need of reorganization to comply with Wikipedia's layout guidelines. Please help by editing the article to make improvements to the overall structure. (June 2013) A network socket is an endpoint of an inter-process communication across a computer network. Today, most communication between computers is based on the Internet Protocol; therefore most network sockets are Internet sockets. A socket API is an application programming interface (API), usually provided by the operating system, that allows application programs to control and use network sockets. Internet socket APIs are usually based on the Berkeley sockets standard. A socket address is the combination of an IP address and a port number, much like one end of a telephone connection is the combination of a phone number and a particular extension. Based on this address, internet sockets deliver incoming data packets to the appropriate application process or thread.    Contents  1 Overview2 Socket types3 Socket states and the client-server model4 Socket pairs5 Implementations 5.1 Early implementations 6 Sockets in network equipment7 See also8 References9 External links   Overview[edit] An Internet socket is characterized by at least the following: Local socket address: Local IP address and port numberProtocol: A transport protocol (e.g., TCP, UDP, raw IP, or others). consequently, TCP port 53 and UDP port 53 are different, distinct sockets. A socket that has been connected to another socket, e.g. during the establishment of a TCP connection, will also be characterized by the following: Remote socket address. As discussed in the client-server section below, a TCP server may serve several clients concurrently. The server creates one socket for each client, and these sockets share the same local socket address from the point of view of the TCP server, and have a different remote address for each client. Within the operating system and the application that created a socket, a socket is referred to by a unique integer value called a socket descriptor. The operating system forwards the payload of incoming IP packets to the corresponding application by extracting the socket address information from the IP and transport protocol headers and stripping the headers from the application data. In IETF Request for Comments, Internet Standards, in many textbooks, as well as in this article, the term socket refers to an entity that is uniquely identified by the socket number. In other textbooks,[1] the socket term refers to a local socket address, i.e. a "combination of an IP address and a port number". In the original definition of socket given in RFC 147, as it was related to the ARPA network in 1971, "the socket is specified as a 32 bit number with even sockets identifying receiving sockets and odd sockets identifying sending sockets." Today, however, socket communications are bidirectional. On Unix-like and Microsoft Windows based operating systems the netstat command line tool may be used to list all currently established sockets and related information. Socket types[edit] Several Internet socket types are available: Datagram sockets, also known as connectionless sockets, which use User Datagram Protocol (UDP).Stream sockets, also known as connection-oriented sockets, which use Transmission Control Protocol (TCP) or Stream Control Transmission Protocol (SCTP).Raw sockets (or Raw IP sockets), typically available in routers and other network equipment. Here the transport layer is bypassed, and the packet headers are made accessible to the application. Other socket types are implemented over other transport protocols, such as Systems Network Architecture (SNA).[2] See also Unix domain sockets (UDS), for internal inter-process communication. Socket states and the client-server model[edit] Computer processes that provide application services are referred to as servers, and create sockets on start up that are in listening state. These sockets are waiting for initiatives from client programs. A TCP server may serve several clients concurrently, by creating a child process for each client and establishing a TCP connection between the child process and the client. Unique dedicated sockets are created for each connection. These are in established state when a socket-to-socket virtual connection or virtual circuit (VC), also known as a TCP session, is established with the remote socket, providing a duplex byte stream. A server may create several concurrently established TCP sockets with the same local port number and local IP address, each mapped to its own server-child process, serving its own client process. They are treated as different sockets by the operating system, since the remote socket address (the client IP address and/or port number) are different; i.e. since they have different socket pair tuples. A UDP socket cannot be in an established state, since UDP is connectionless. Therefore, netstat does not show the state of a UDP socket. A UDP server does not create new child processes for every concurrently served client, but the same process handles incoming data packets from all remote clients sequentially through the same socket. It implies that UDP sockets are not identified by the remote address, but only by the local address, although each message has an associated remote address. Socket pairs[edit] Communicating local and remote sockets are called socket pairs. Each socket pair is described by a unique 4-tuple consisting of source and destination IP addresses and port numbers, i.e. of local and remote socket addresses.[3][4] As seen in the discussion above, in the TCP case, each unique socket pair 4-tuple is assigned a socket number, while in the UDP case, each unique local socket address is assigned a socket number. Implementations[edit] Sockets are usually implemented by an application programming interface (API) library such as Berkeley sockets, first introduced in 1983. Most implementations are based on Berkeley sockets, for example Winsock introduced in 1991. Other API implementations exist, such as the STREAMS-based Transport Layer Interface (TLI). Development of application programs that utilize this API is called socket programming or network programming. Early implementations[edit] 1983 Berkeley sockets (also known as the BSD socket API) originated with the 4.2BSD Unix operating system (released in 1983) as an API. Only in 1989, however, could UC Berkeley release versions of its operating system and networking library free from the licensing constraints of AT&T's copyright-protected Unix.[5] 1987 Transport Layer Interface (TLI) was the networking API provided by AT&T UNIX System V Release 3 (SVR3) in 1987[6] and continued into Release 4 (SVR4).[7][8] Other early implementations were written for TOPS-20[9] , MVS,[9] VM,[9] IBM-DOS (PCIP).[9][10] Sockets in network equipment[edit] The socket is primarily a concept used in the Transport Layer of the Internet model. Networking equipment such as routers and switches do not require implementations of the Transport Layer, as they operate on the Link Layer level (switches) or at the Internet Layer (routers). However, stateful network firewalls, network address translators, and proxy servers keep track of active socket pairs. Also in fair queuing, layer 3 switching and quality of service (QoS) support in routers, packet flows may be identified by extracting information about the socket pairs. Raw sockets are typically available in network equipment and are used for routing protocols such as IGRP and OSPF, and in Internet Control Message Protocol (ICMP). See also[edit] Berkeley socketsInternet protocol suiteNetwork packetWebSocketList of TCP and UDP port numbers References[edit]  ^ Cisco Networking Academy Program, CCNA 1 and 2 Companion Guide Revised Third Edition, P.480, ISBN 1-58713-150-1^ www-306.ibm.com - AnyNet Guide to Sockets over SNA^ books.google.com - UNIX Network Programming: The sockets networking API^ books.google.com - Designing BSD Rootkits: An Introduction to Kernel Hacking^ Wikipedia: Berkeley sockets 2011-02-18^ (Goodheart 1994, p. 11)^ (Goodheart 1994, p. 17)^ Wikipedia: Transport Layer Interface 2011-02-18^ a b c d historyofcomputercommunications.info - Book: 9.8 TCP/IP and XNS 1981 - 1983^ mit.edu - The Desktop Computer as a Network Participant.pdf 1985  External links[edit] How sockets work - IBM information centerClient/Server Programming with TCP/IP SocketsBeej's Guide to Network ProgrammingSocket programming in languages other than C: Highly commented C++ Win32 Socket Server ClassJava Tutorials: Networking basicsMulticlient TCP server example for Ruby     vte  Inter-process communication  Data exchange among threads in computer programs Methods  FileMemory-mapped fileMessage passingMessage queue and mailboxNamed pipeAnonymous pipePipeSemaphoreShared memorySignalSockets InternetUnix   Protocols and standards  Apple eventsCOM+CORBAD-BusDDSDCEICEOpenBinderONC RPCPOSIX (various methods)SOAPRESTThriftTIPCXML-RPC  Software libraries and frameworks  D-BuslibeventSIMPLLINX                       Retrieved from "https://en.wikipedia.org/w/index.php?title=Network_socket&oldid=675423365"          Categories: Network socketHidden categories: Wikipedia articles needing reorganization from June 2013                      Navigation menu                      Personal tools       Create accountLog in                                  Namespaces       ArticleTalk                                      Variants                                                                     Views       ReadEditView history                        More                                                       Search                                                                                     Navigation               Main pageContentsFeatured contentCurrent eventsRandom articleDonate to WikipediaWikipedia store                   Interaction               HelpAbout WikipediaCommunity portalRecent changesContact page                   Tools               What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationWikidata itemCite this page                   Print/export               Create a bookDownload as PDFPrintable version                   Languages               ???????Az?rbaycancaCatal?DeutschEspa?olEuskara?????Français???HrvatskiBahasa IndonesiaItaliano?????MagyarNederlandsNorsk bokm?lPolskiPortugu?s???????Shqip?????? / srpskiTürkçe????????????     Edit links                          This page was last modified on 10 August 2015, at 14:01.Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply.  By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.        Privacy policyAbout WikipediaDisclaimersContact WikipediaDevelopersMobile view