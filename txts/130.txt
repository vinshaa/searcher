Java servlet                    From Wikipedia, the free encyclopedia           (Redirected from Servlet)                   Jump to:     navigation,      search             This article has multiple issues. Please help improve it or discuss these issues on the talk page.   This article needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed. (February 2014)   This article has an unclear citation style. The references used may be made clearer with a different or consistent style of citation, footnoting, or external linking. (December 2013)       Life of a JSP file   A Java servlet is a Java program that extends the capabilities of a server. Although servlets can respond to any types of requests, they most commonly implement applications hosted on Web servers.[1] Such Web servlets are the Java counterpart to other dynamic Web content technologies such as PHP and ASP.NET.    Contents  1 Introduction2 History3 Compared with other web application models4 Life cycle of a servlet5 Example6 Container servers7 References8 External links   Introduction[edit] Servlets are most often used to:[citation needed] Process or store a Java class in Java EE that conforms to the Java Servlet API,[2] a standard for implementing Java classes which respond to requests. Servlets could in principle communicate over any client–server protocol, but they are most often used with the HTTP protocol. Thus "servlet" is often used as shorthand for "HTTP servlet".[3] Thus, a software developer may use a servlet to add dynamic content to a web server using the Java platform. The generated content is commonly HTML, but may be other data such as XML. Servlets can maintain state in session variables across many server transactions by using HTTP cookies, or URL rewriting. To deploy and run a servlet, a web container must be used. A web container (also known as a servlet container) is essentially the component of a web server that interacts with the servlets. The web container is responsible for managing the lifecycle of servlets, mapping a URL to a particular servlet and ensuring that the URL requester has the correct access rights. The Servlet API, contained in the Java package hierarchy javax.servlet, defines the expected interactions of the web container and a servlet.[3] A Servlet is an object that receives a request and generates a response based on that request. The basic Servlet package defines Java objects to represent servlet requests and responses, as well as objects to reflect the servlet's configuration parameters and execution environment. The package javax.servlet.http defines HTTP-specific subclasses of the generic servlet elements, including session management objects that track multiple requests and responses between the web server and a client. Servlets may be packaged in a WAR file as a web application. Servlets can be generated automatically from Java Server Pages (JSP) by the JavaServer Pages compiler. The difference between servlets and JSP is that servlets typically embed HTML inside Java code, while JSPs embed Java code in HTML. While the direct usage of servlets to generate HTML (as shown in the example below) has become rare, the higher level MVC web framework in Java EE (JSF) still explicitly uses the servlet technology for the low level request/response handling via the FacesServlet. A somewhat older usage is to use servlets in conjunction with JSPs in a pattern called "Model 2", which is a flavor of the model–view–controller. The current version of Servlet is 3.1. History[edit] The Servlet1 specification was created by Sun Microsystems, with version 1.0 finalized in June 1997. Starting with version 2.3, the specification was developed under the Java Community Process. JSR 53 defined both the Servlet 2.3 and JavaServer Page 1.2 specifications. JSR 154 specifies the Servlet 2.4 and 2.5 specifications. As of June 9, 2015, the current version of the Servlet specification is 3.1. In his blog on java.net, Sun veteran and GlassFish lead Jim Driscoll details the history of servlet technology.[4] James Gosling first thought of servlets in the early days of Java, but the concept did not become a product until Sun shipped the Java Web Server[clarify] product. This was before what is now the Java Platform, Enterprise Edition was made into a specification. Servlet API historyServlet API versionReleasedPlatformImportant ChangesServlet 3.1May 2013JavaEE 7Non-blocking I/O, HTTP protocol upgrade mechanism (WebSocket)[5]Servlet 3.0December 2009JavaEE 6, JavaSE 6Pluggability, Ease of development, Async Servlet, Security, File UploadingServlet 2.5September 2005JavaEE 5, JavaSE 5Requires JavaSE 5, supports annotationServlet 2.4November 2003J2EE 1.4, J2SE 1.3web.xml uses XML SchemaServlet 2.3August 2001J2EE 1.3, J2SE 1.2Addition of FilterServlet 2.2August 1999J2EE 1.2, J2SE 1.2Becomes part of J2EE, introduced independent web applications in .war filesServlet 2.1November 1998UnspecifiedFirst official specification, added RequestDispatcher, ServletContextServlet 2.0JDK 1.1Part of Java Servlet Development Kit 2.0Servlet 1.0June 1997 Compared with other web application models[edit]   This section relies largely or entirely upon a single source. Relevant discussion may be found on the talk page. Please help improve this article by introducing citations to additional sources. (December 2013) The advantages of using servlets are their fast performance and ease of use combined with more power over traditional CGI (Common Gateway Interface). Traditional CGI scripts written in Java have a number of performance disadvantages: When an HTTP request is made, a new process is created each time the CGI script is called. The overhead associated with process creation can dominate the workload especially when the script does relatively fast operations. Thus, process creation will take more time for CGI script execution. In contrast, for servlets, each request is handled by a separate Java thread within the web server process, thereby avoiding the overhead associated with forking processes within the HTTP daemon.Simultaneous CGI requests will load the CGI script to be copied into memory once per request. With servlets, there is only one copy that persists across requests and is shared between threads.Only a single instance answers all requests concurrently. This reduces memory usage and eases the management of persistent data.A servlet can be run by a servlet container in a restrictive environment, called a sandbox. This is similar to an applet that runs in the sandbox of the web browser. This enables restricted use of potentially harmful servlets.[3] CGI programs can of course also sandbox themselves, since they are simply OS processes. Technologies like FastCGI and its derivatives (including SCGI, WSGI) do not exhibit the performance disadvantages of CGI incurred by the constant process spawning. They are, however, roughly as simple as CGI. They are therefore also in contrast with servlets which are substantially more complex. Life cycle of a servlet[edit] Three methods are central to the life cycle of a servlet. These are init(), service(), and destroy(). They are implemented by every servlet and are invoked at specific times by the server. During initialization stage of the servlet life cycle, the web container initializes the servlet instance by calling the init() method, passing an object implementing the javax.servlet.ServletConfig interface. This configuration object allows the servlet to access name-value initialization parameters from the web application.After initialization, the servlet instance can service client requests. Each request is serviced in its own separate thread. The web container calls the service() method of the servlet for every request. The service() method determines the kind of request being made and dispatches it to an appropriate method to handle the request. The developer of the servlet must provide an implementation for these methods. If a request is made for a method that is not implemented by the servlet, the method of the parent class is called, typically resulting in an error being returned to the requester.Finally, the web container calls the destroy() method that takes the servlet out of service. The destroy() method, like init(), is called only once in the lifecycle of a servlet. The following is a typical user scenario of these methods. Assume that a user requests to visit a URL. The browser then generates an HTTP request for this URL.This request is then sent to the appropriate server. The HTTP request is received by the web server and forwarded to the servlet container. The container maps this request to a particular servlet.The servlet is dynamically retrieved and loaded into the address space of the container. The container invokes the init() method of the servlet. This method is invoked only when the servlet is first loaded into memory.It is possible to pass initialization parameters to the servlet so that it may configure itself. The container invokes the service() method of the servlet. This method is called to process the HTTP request.The servlet may read data that has been provided in the HTTP request.The servlet may also formulate an HTTP response for the client. The servlet remains in the container's address space and is available to process any other HTTP requests received from clients. The service() method is called for each HTTP request. The container may, at some point, decide to unload the servlet from its memory. The algorithms by which this decision is made are specific to each container. The container calls the servlet's destroy() method to relinquish any resources such as file handles that are allocated for the servlet; important data may be saved to a persistent store.The memory allocated for the servlet and its objects can then be garbage collected. Example[edit] The following example servlet prints how many times its service() method was called. Note that HttpServlet is a subclass of GenericServlet, an implementation of the Servlet interface. The service() method of HttpServlet class dispatches requests to the methods doGet(), doPost(), doPut(), doDelete(), and so on; according to the HTTP request. In the example below service() is overridden and does not distinguish which HTTP request method it serves.   import java.io.IOException;   import javax.servlet.ServletConfig; import javax.servlet.ServletException; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse;  public class ServletLifeCycleExample extends HttpServlet {       private int count;       @Override     public void init(ServletConfig config) throws ServletException {         super.init(config);         getServletContext().log("init() called");         count = 0;     }       @Override     protected void service(HttpServletRequest request, HttpServletResponse response)             throws ServletException, IOException {         getServletContext().log("service() called");         count++;         response.getWriter().write("Incrementing the count: count = " + count);     }       @Override     public void destroy() {         getServletContext().log("destroy() called");     }  }  Container servers[edit] GlassFishIBM WebSphere Application ServerJetty (web server)Apache TomcatCaucho Resin http://www.caucho.com/ - A commercial servlet container.Caudium (web server)Oracle iPlanet Web ServerWildFly (previously JBoss Application Server)Undertow References[edit]  ^ "servlet". http://www.webopedia.com/: WEBOPEDIA. Retrieved 2011-04-27. A small java program that runs on a server. The term usually refers to a Java applet that runs within a web server environment. This is analogous to a Java applet that runs within a web browser environment. ^ Java Servlet API^ a b c [1] 1.1 What is a servlet?^ "Servlet History | Java.net". Weblogs.java.net. 2005-12-10. Retrieved 2013-06-14. ^ [2]  External links[edit] JSR 315 - Java servlet 3.0 documentationJSR 154 - Java servlet 2.4 and 2.5 documentationJSR 53 - Java servlet 2.3 documentation    vte  Java EE 7 specifications Web Application  ServletJavaServer PagesExpression LanguageJSTLJavaServer FacesWebSocketJSON Processing  Enterprise Application  CDIDependency InjectionBean ValidationEnterprise JavaBeansJPAJMSJTAJavaMailInterceptorsJCACommon AnnotationsBatch ApplicationsConcurrency Utilities  Web Services  JAX-RSEnterprise Web ServicesJAX-WSWeb Services MetadataJava API for XML MessagingJAXR  Management and Security  Java Authentication SPIJava Authorization SPIJ2EE ManagementDebugging for Other Languages  Related Specs in Java SE  JAXBJAXPJDBCJMXJavaBeans Activation FrameworkStreaming API for XML       vte  Web interfaces Server-side   Protocols   CGISCGIFCGIAJPWSRPWebSocket   Server APIs   C NSAPIC ASAPIC ISAPICOM ASPJava servlet container Portlet container CIL System.Web.IHttpHandlerPython WSGIRuby RackJavaScript JSGIPerl PSGILua WSAPIOWIN   Apache modules   mod_jkmod_lispmod_monomod_parrotmod_perlmod_phpmod_proxymod_pythonmod_wsgimod_rubyPhusion Passenger   Topics   Web resource vs. Web serviceOpen APIWebhookApplication server comparison    Client-side   Browser APIs   C NPAPI LiveConnectXPConnect C NPRuntimeC PPAPI NaCl ActiveX   Web APIs    W3C   AudioCanvasCORSFileGeolocationIndexedDBMicrodataSSESVGVideoWebRTCWebSocketWeb messagingWeb storageWeb workerXMLHttpRequest   Khronos   WebCLWebGL   Others   GearsWeb SQL Database (formerly W3C)    Topics   MashupWeb IDL                        Retrieved from "https://en.wikipedia.org/w/index.php?title=Java_servlet&oldid=678430178"          Categories: Java enterprise platformJava platformJava specification requestsHidden categories: Articles needing additional references from February 2014All articles needing additional referencesWikipedia references cleanup from December 2013All articles needing references cleanupArticles covered by WikiProject Wikify from December 2013All articles covered by WikiProject WikifyAll articles with unsourced statementsArticles with unsourced statements from March 2013All Wikipedia articles needing clarificationWikipedia articles needing clarification from September 2012Articles needing additional references from December 2013Articles prone to spam from June 2013Articles with example Java code                      Navigation menu                      Personal tools       Create accountLog in                                  Namespaces       ArticleTalk                                      Variants                                                                     Views       ReadEditView history                        More                                                       Search                                                                                     Navigation               Main pageContentsFeatured contentCurrent eventsRandom articleDonate to WikipediaWikipedia store                   Interaction               HelpAbout WikipediaCommunity portalRecent changesContact page                   Tools               What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationWikidata itemCite this page                   Print/export               Create a bookDownload as PDFPrintable version                   Languages               ????????????????Catal?ÈeštinaDanskDeutschEspa?olEsperanto?????Français???InterlinguaItaliano????????????Lietuvi?MagyarNederlands???PolskiPortugu?sRomânã????????????? / srpskiSvenskaTürkçe??????????Ti?ng Vi?t??     Edit links                          This page was last modified on 29 August 2015, at 09:53.Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply.  By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.        Privacy policyAbout WikipediaDisclaimersContact WikipediaDevelopersMobile view