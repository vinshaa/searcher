Runtime system                    From Wikipedia, the free encyclopedia           (Redirected from Runtime environment)                   Jump to:     navigation,      search          This article is about the infrastructure required to run programs.  For the execution phase of software applications, see Run time (program lifecycle phase).   This article needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed. (December 2013) Program executionGeneral topics Runtime systemRuntime libraryExecutableCompilerInterpreterVirtual machineSource codeObject codeBytecodeMachine code Specific runtimes Android Runtime (ART)crt0Common Language Runtime (CLR)DalvikJava virtual machine (JVM)   vte   A runtime system, also called run-time system, exhibits the behavior of the constructs of a computer language,[clarification needed] which is in contrast to the runtime lifecycle phase of a program. Every programming language has some form of a runtime system, including compiled languages, interpreted languages, embedded domain-specific languages, or those invoked via an API such as Pthreads.[1][2][3] In addition to the behavior of the language constructs, a runtime system may also perform support services such as type checking, debugging, or code generation and optimization.[4] The runtime system is also the gateway by which a running program interacts with the runtime environment, which contains state values that are accessible during program execution, as well as active entities that can be interacted with during program execution. For example, environment variables are features of many operating systems, and are part of the runtime environment; a running program can access them via the runtime system. Likewise, hardware devices such as a DVD drive are active entities that a program can interact with via a runtime system.    Contents  1 Overview2 History3 See also4 References   Overview[edit] As a simple example of a basic runtime system, the runtime system of the C language is a particular set of instructions inserted into the executable image by the compiler. Among other things, these instructions manage the processor stack, create space for local variables, and copy function-call parameters onto the top of the stack. There are often no clear criteria for deciding which language behavior is considered inside the runtime system versus which behavior is "compiled". In this case, the reason that C's stack behavior is part of the runtime system, as opposed to part of a keyword of the language, is that it is systematic, maintaining the state of the stack throughout a program's execution. The systematic behavior implements the execution model of the language, as opposed to implementing semantics of particular keywords which are directly translated into code that computes results. Another example, which illuminates the nature of a runtime system, is the case of using an application programming interface (API) to interact with a runtime system. The calls to that API look the same as calls to a regular software library, however at some point during the call the execution model changes. The runtime system implements an execution model different from that of the language the library is written in terms of. A person reading the code of a normal library would be able to understand the library's behavior by just knowing the language the library was written in. However, a person reading the code of the API that invokes a runtime system would not be able to understand the behavior of the API call just by knowing the language the call was written in. At some point, via some mechanism, the execution model stops being that of the language the call is written in and switches over to being the execution model implemented by the runtime system. For example, the trap instruction is one method of switching execution models. This difference is what distinguishes an API-invoked execution model, such as POSIX threads, from a usual software library. Both POSIX threads calls and software library calls are invoked via an API, but POSIX threads behavior cannot be understood in terms of the language of the call. Rather, POSIX threads calls bring into play an outside execution model, which is implemented by the POSIX threads runtime system (this runtime system is often the OS kernel). Some compiled or interpreted languages provide an interface that allows application code to interact directly with the runtime system. An example is the Thread class in the Java language, which allows code (that is animated by one thread) to do things such as start and stop other threads. Normally, core aspects of a language's behavior such as task scheduling and resource management are not accessible in this fashion. Higher-level behaviors implemented by a runtime system may include tasks such as drawing text on the screen or making an Internet connection. It is often the case that operating systems provide these kinds of behaviors as well, and when available, the runtime system is implemented as an abstraction layer that translates the invocation of the runtime system into an invocation of the operating system. This hides the complexity or variations in the services offered by different operating systems. This also implies that the OS kernel can be viewed as a runtime system, and that the set of OS calls that invoke OS behaviors may be viewed as an API invoked language. In the limit, the runtime system may provide services such as a P-code machine or virtual machine, that hide even the processor's instruction set. This is the approach followed by many interpreted languages such as AWK, and some languages like Java, which are meant to be compiled into some machine-independent pseudocode (bytecode). This arrangement greatly simplifies the task of language implementation and its adaptation to different machines, and improves efficiency of sophisticated language features such as reflection. It also allows the same program to be executed on any machine without an explicit recompiling step, a feature that has become very important since the proliferation of the World Wide Web. To speed up execution, some runtime systems feature just-in-time compilation to machine code. At the other extreme, the physical CPU itself can be viewed as an implementation of the runtime system of a specific assembly language. In this view, the execution model is implemented by the physical CPU and memory systems. As an analogy, runtime systems for higher-level languages are themselves implemented using some other languages. This creates a hierarchy of runtime systems, with the CPU itself—?or actually its inner digital logic structures that determine things like program counter advancement and scheduling of instructions—?acting as the lowest-level runtime system. A modern aspect of runtime systems is parallel execution behaviors, such as the behaviors exhibited by mutex constructs in Pthreads and parallel section constructs in OpenMP. A runtime system with such parallel execution behaviors may be modularized according to the proto-runtime approach. History[edit] Notable early examples of runtime systems are the interpreters for BASIC and Lisp. These environments also included a garbage collector. Forth is an early example of a language that was designed to be compiled into pseudocode; its runtime system was a virtual machine that interpreted that pseudocode. Another popular, if theoretical, example is Donald Knuth's MIX computer. In C and later languages that supported dynamic memory allocation, the runtime system also included a library that managed the program's memory pool. In the object-oriented programming languages, the runtime system was often also responsible for dynamic type checking and resolving method references. See also[edit] Look up run-time in Wiktionary, the free dictionary. Run time (program lifecycle phase) References[edit]  ^ Sorber, Jacob et al. (2007). "CEon: a language and runtime system for perpetual systems" (PDF). ACM.  CS1 maint: Explicit use of et al. (link)^ Bodin, François et al. (1993). "Implementing a parallel C++ runtime system for scalable parallel systems". IEEE. CiteSeerX: 10.1.1.40.5356.  CS1 maint: Explicit use of et al. (link)^ Blumofe, Robert D. et al. (1995). "Cilk: An efficient multithreaded runtime system". ACM.  CS1 maint: Explicit use of et al. (link)^ Andrew W. Appel (May 1989). "A Runtime System" (PDF). Princeton University. Retrieved 2013-12-30.                      Retrieved from "https://en.wikipedia.org/w/index.php?title=Runtime_system&oldid=669624546"          Categories: Computing platformsRun-time systemsHidden categories: CS1 maint: Explicit use of et al.Articles needing additional references from December 2013All articles needing additional referencesWikipedia articles needing clarification from May 2015                      Navigation menu                      Personal tools       Create accountLog in                                  Namespaces       ArticleTalk                                      Variants                                                                     Views       ReadEditView history                        More                                                       Search                                                                                     Navigation               Main pageContentsFeatured contentCurrent eventsRandom articleDonate to WikipediaWikipedia store                   Interaction               HelpAbout WikipediaCommunity portalRecent changesContact page                   Tools               What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationWikidata itemCite this page                   Print/export               Create a bookDownload as PDFPrintable version                   Languages               ÈeštinaDeutschEspa?olItalianoMagyar???????SlovenèinaTürkçe??     Edit links                          This page was last modified on 2 July 2015, at 12:22.Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply.  By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.        Privacy policyAbout WikipediaDisclaimersContact WikipediaDevelopersMobile view