Erlang (programming language)                    From Wikipedia, the free encyclopedia                            Jump to:     navigation,      search          This article is about the programming language.  For other things named "Erlang", see Erlang (disambiguation). ErlangParadigmmulti-paradigm: concurrent, functionalDesigned byJoe Armstrong, Robert Virding and Mike WilliamsDeveloperEricssonFirst appeared1986; 29 years ago (1986)Stable release18.0[1] / June 24, 2015; 2 months ago (2015-06-24)Typing disciplinedynamic, strongLicense Apache License 2.0 (since OTP 18.0) Erlang Public License 1.1 (earlier releases)Filename extensions.erl .hrlWebsitewww.erlang.orgMajor implementationsErlangInfluenced byProlog, Smalltalk, PLEX[2]InfluencedF#, Clojure, Rust, Scala, Opa, Reia, Elixir, Dart, Akka  Erlang Programming at Wikibooks  Erlang (/??rl??/ ER-lang) is a general-purpose, concurrent, garbage-collected programming language and runtime system. The sequential subset of Erlang is almost a functional language (excluding certain built-in functions (BIFs) such as those manipulating the process dictionary), with eager evaluation, single assignment, and dynamic typing. It was originally designed by Ericsson to support distributed, fault-tolerant, soft real-time, highly available, non-stop applications. It supports hot swapping, thus code can be changed without stopping a system.[3] While threads require external library support in most languages, Erlang provides language-level features for creating and managing processes with the aim of simplifying concurrent programming. Though all concurrency is explicit in Erlang, processes communicate using message passing instead of shared variables, which removes the need for explicit locks (a locking scheme is still used internally by the VM[4]). The first version was developed by Joe Armstrong, Robert Virding and Mike Williams in 1986.[5] It was originally a proprietary language within Ericsson, but was released as open source in 1998. Erlang, along with OTP, a collection of middleware and libraries in Erlang, are now supported and maintained by the OTP product unit at Ericsson and widely referred to as Erlang/OTP.    Contents  1 History2 Functional programming examples3 Data types4 Concurrency and distribution orientation5 Implementation6 Hot code loading and modules7 Distribution 7.1 Projects using Erlang7.2 Companies using Erlang 8 Variants9 References10 Further reading11 External links   History[edit] The name "Erlang", attributed to Bjarne Däcker, has been presumed by those working on the telephony switches (for whom the language was designed) to be a reference to Danish mathematician and engineer Agner Krarup Erlang or the ubiquitous use of the unit named for him, and (initially at least) simultaneously as a syllabic abbreviation of "Ericsson Language".[5][6] Erlang was designed with the aim of improving the development of telephony applications. The initial version of Erlang was implemented in Prolog and was influenced by the programming language PLEX used in earlier Ericsson exchanges. According to Armstrong, the language went from lab product to real applications following the collapse of the next-generation AXE exchange named AXE-N in 1995. As a result, Erlang was chosen for the next ATM exchange AXD.[5] In 1998 Ericsson announced the AXD301 switch, containing over a million lines of Erlang and reported to achieve a high availability of nine "9"s.[7] Shortly thereafter, Ericsson Radio Systems banned the in-house use of Erlang for new products, citing a preference for non-proprietary languages. The ban caused Armstrong and others to leave Ericsson.[8] The implementation was open-sourced at the end of the year.[5] Ericsson eventually lifted the ban; it re-hired Armstrong in 2004.[8] In 2006, native symmetric multiprocessing support was added to the runtime system and virtual machine.[5] Erlang has now been adopted by companies worldwide, including Nortel and T-Mobile. Erlang is used in Ericsson’s support nodes, and in GPRS, 3G and LTE mobile networks worldwide.[9] As Tim Bray, director of Web Technologies at Sun Microsystems, expressed in his keynote at OSCON in July 2008:  If somebody came to me and wanted to pay me a lot of money to build a large scale message handling system that really had to be up all the time, could never afford to go down for years at a time, I would unhesitatingly choose Erlang to build it in.  Functional programming examples[edit] An Erlang function that uses recursion to count to ten:[10]   -module(count_to_ten). -export([count_to_ten/0]).   count_to_ten() -> do_count(0).   do_count(10) -> 10; do_count(Value) -> do_count(Value + 1).  A factorial algorithm implemented in Erlang:   -module(fact).    % This is the file 'fact.erl', the module and the filename must match -export([fac/1]). % This exports the function 'fac' of arity 1 (1 parameter, no type, no name)  fac(0) -> 1; % If 0, then return 1, otherwise (note the semicolon ; meaning 'else') fac(N) when N > 0, is_integer(N) -> N * fac(N-1). % Recursively determine, then return the result % (note the period . meaning 'endif' or 'function end') %% This function will crash if anything other than a positive integer is given. %% It illustrates the “Let it crash” philosophy of Erlang.  A Fibonacci algorithm implemented in Erlang (Note: This is only for demonstrating the Erlang syntax. This algorithm is rather slow.[11]):   -module(fib).    % This is the file 'fib.erl', the module and the filename must match -export([fib/1]). % This exports the function 'fib' of arity 1  fib(1) -> 1; % If 1, then return 1, otherwise (note the semicolon ; meaning 'else') fib(2) -> 1; % If 2, then return 1, otherwise fib(N) -> fib(N - 2) + fib(N - 1).  A sorting algorithm (similar to quicksort):   %% qsort:qsort(List) %% Sort a list of items -module(qsort).     % This is the file 'qsort.erl' -export([qsort/1]). % A function 'qsort' with 1 parameter is exported (no type, no name)  qsort([]) -> []; % If the list [] is empty, return an empty list (nothing to sort) qsort([Pivot|Rest]) ->     % Compose recursively a list with 'Front' for all elements that should be before 'Pivot'     % then 'Pivot' then 'Back' for all elements that should be after 'Pivot'     qsort([Front || Front <- Rest, Front < Pivot])     ++ [Pivot] ++     qsort([Back || Back <- Rest, Back >= Pivot]).  The above example recursively invokes the function qsort until nothing remains to be sorted. The expression [Front || Front <- Rest, Front < Pivot] is a list comprehension, meaning “Construct a list of elements Front such that Front is a member of Rest, and Front is less than Pivot.” ++ is the list concatenation operator. A comparison function can be used for more complicated structures for the sake of readability. The following code would sort lists according to length:   % This is file 'listsort.erl' (the compiler is made this way) -module(listsort). % Export 'by_length' with 1 parameter (don't care about the type and name) -export([by_length/1]).  by_length(Lists) -> % Use 'qsort/2' and provides an anonymous function as a parameter    qsort(Lists, fun(A,B) -> length(A) < length(B) end).  qsort([], _)-> []; % If list is empty, return an empty list (ignore the second parameter) qsort([Pivot|Rest], Smaller) ->     % Partition list with 'Smaller' elements in front of 'Pivot' and not-'Smaller' elements     % after 'Pivot' and sort the sublists.     qsort([X || X <- Rest, Smaller(X,Pivot)], Smaller)     ++ [Pivot] ++     qsort([Y || Y <- Rest, not(Smaller(Y, Pivot))], Smaller).  Here again, a Pivot is taken from the first parameter given to qsort() and the rest of Lists is named Rest. Note that the expression   [X || X <- Rest, Smaller(X,Pivot)]  is no different in form from   [Front || Front <- Rest, Front < Pivot]  (in the previous example) except for the use of a comparison function in the last part, saying “Construct a list of elements X such that X is a member of Rest, and Smaller is true", with Smaller being defined earlier as   fun(A,B) -> length(A) < length(B) end  Note also that the anonymous function is named Smaller in the parameter list of the second definition of qsort so that it can be referenced by that name within that function. It is not named in the first definition of qsort, which deals with the base case of an empty list and thus has no need of this function, let alone a name for it. Data types[edit] Erlang has eight primitive data types: IntegersIntegers are written as sequences of decimal digits, for example, 12, 12375 and -23427 are integers. Integer arithmetic is exact and only limited by available memory on the machine. (This is called arbitrary-precision arithmetic.)AtomsAtoms are used within a program to denote distinguished values. They are written as strings of consecutive alphanumeric characters, the first character being lowercase. Atoms can contain any character if they are enclosed within single quotes and an escape convention exists which allows any character to be used within an atom.FloatsFloating point numbers use the IEEE 754 64-bit representation.ReferencesReferences are globally unique symbols whose only property is that they can be compared for equality. They are created by evaluating the Erlang primitive make_ref().BinariesA binary is a sequence of bytes. Binaries provide a space-efficient way of storing binary data. Erlang primitives exist for composing and decomposing binaries and for efficient input/output of binaries.PidsPid is short for process identifier—a Pid is created by the Erlang primitive spawn(...) Pids are references to Erlang processes.PortsPorts are used to communicate with the external world. Ports are created with the built-in function open_port. Messages can be sent to and received from ports, but these messages must obey the so-called "port protocol."FunsFuns are function closures. Funs are created by expressions of the form: fun(...) -> ... end. And two compound data types: TuplesTuples are containers for a fixed number of Erlang data types. The syntax {D1,D2,...,Dn} denotes a tuple whose arguments are D1, D2, ... Dn. The arguments can be primitive data types or compound data types. Any element of a tuple can be accessed in constant time.ListsLists are containers for a variable number of Erlang data types. The syntax [Dh|Dt] denotes a list whose first element is Dh, and whose remaining elements are the list Dt. The syntax [] denotes an empty list. The syntax [D1,D2,..,Dn] is short for [D1|[D2|..|[Dn|[]]]]. The first element of a list can be accessed in constant time. The first element of a list is called the head of the list. The remainder of a list when its head has been removed is called the tail of the list. Two forms of syntactic sugar are provided: StringsStrings are written as doubly quoted lists of characters. This is syntactic sugar for a list of the integer ASCII codes for the characters in the string. Thus, for example, the string "cat" is shorthand for [99,97,116]. It has partial support for Unicode strings.[12]RecordsRecords provide a convenient way for associating a tag with each of the elements in a tuple. This allows one to refer to an element of a tuple by name and not by position. A pre-compiler takes the record definition and replaces it with the appropriate tuple reference. Erlang has no method of defining classes, although there are external libraries available.[13] Concurrency and distribution orientation[edit] Erlang's main strength is support for concurrency. It has a small but powerful set of primitives to create processes and communicate among them. Erlang is conceptually similar to the occam programming language, though it recasts the ideas of communicating sequential processes (CSP) in a functional framework and uses asynchronous message passing.[14] Processes are the primary means to structure an Erlang application. They are neither operating system processes nor operating system threads, but lightweight processes. Like operating system processes (but unlike operating system threads), they share no state with each other. The estimated minimal overhead for each is 300 words.[15] Thus, many processes can be created without degrading performance. A benchmark with 20 million processes has been successfully performed.[16] Erlang has supported symmetric multiprocessing since release R11B of May 2006. Inter-process communication works via a shared-nothing asynchronous message passing system: every process has a "mailbox", a queue of messages that have been sent by other processes and not yet consumed. A process uses the receive primitive to retrieve messages that match desired patterns. A message-handling routine tests messages in turn against each pattern, until one of them matches. When the message is consumed and removed from the mailbox the process resumes execution. A message may comprise any Erlang structure, including primitives (integers, floats, characters, atoms), tuples, lists, and functions. The code example below shows the built-in support for distributed processes:    % Create a process and invoke the function web:start_server(Port, MaxConnections)  ServerProcess = spawn(web, start_server, [Port, MaxConnections]),   % Create a remote process and invoke the function  % web:start_server(Port, MaxConnections) on machine RemoteNode  RemoteProcess = spawn(RemoteNode, web, start_server, [Port, MaxConnections]),   % Send a message to ServerProcess (asynchronously). The message consists of a tuple  % with the atom "pause" and the number "10".  ServerProcess ! {pause, 10},   % Receive messages sent to this process  receive          a_message -> do_something;          {data, DataContent} -> handle(DataContent);          {hello, Text} -> io:format("Got hello message: ~s", [Text]);          {goodbye, Text} -> io:format("Got goodbye message: ~s", [Text])  end.  As the example shows, processes may be created on remote nodes, and communication with them is transparent in the sense that communication with remote processes works exactly as communication with local processes. Concurrency supports the primary method of error-handling in Erlang. When a process crashes, it neatly exits and sends a message to the controlling process which can take action.[17][18] Implementation[edit] The Ericsson Erlang implementation loads virtual machine bytecode which is converted to threaded code at load time. It also includes a native code compiler on most platforms, developed by the High Performance Erlang Project (HiPE) at Uppsala University. Since October 2001 the HiPE system is fully integrated in Ericsson's Open Source Erlang/OTP system.[19] It also supports interpreting, directly from source code via abstract syntax tree, via script as of R11B-5 release of Erlang. Hot code loading and modules[edit] Erlang supports language-level Dynamic Software Updating. To implement this, code is loaded and managed as "module" units; the module is a compilation unit. The system can keep two versions of a module in memory at the same time, and processes can concurrently run code from each. The versions are referred to as the "new" and the "old" version. A process will not move into the new version until it makes an external call to its module. An example of the mechanism of hot code loading:     %% A process whose only job is to keep a counter.   %% First version   -module(counter).   -export([start/0, codeswitch/1]).    start() -> loop(0).    loop(Sum) ->     receive        {increment, Count} ->           loop(Sum+Count);        {counter, Pid} ->           Pid ! {counter, Sum},           loop(Sum);        code_switch ->           ?MODULE:codeswitch(Sum)           % Force the use of 'codeswitch/1' from the latest MODULE version     end.    codeswitch(Sum) -> loop(Sum).  For the second version, we add the possibility to reset the count to zero.     %% Second version   -module(counter).   -export([start/0, codeswitch/1]).    start() -> loop(0).    loop(Sum) ->     receive        {increment, Count} ->           loop(Sum+Count);        reset ->           loop(0);        {counter, Pid} ->           Pid ! {counter, Sum},           loop(Sum);        code_switch ->           ?MODULE:codeswitch(Sum)     end.    codeswitch(Sum) -> loop(Sum).  Only when receiving a message consisting of the atom 'code_switch' will the loop execute an external call to codeswitch/1 (?MODULE is a preprocessor macro for the current module). If there is a new version of the "counter" module in memory, then its codeswitch/1 function will be called. The practice of having a specific entry-point into a new version allows the programmer to transform state to what is required in the newer version. In our example we keep the state as an integer. In practice, systems are built up using design principles from the Open Telecom Platform which leads to more code upgradable designs. Successful hot code loading is a tricky subject; Code needs to be written to make use of Erlang's facilities. Distribution[edit] In 1998, Ericsson released Erlang as open source to ensure its independence from a single vendor and to increase awareness of the language. Erlang, together with libraries and the real-time distributed database Mnesia, forms the Open Telecom Platform (OTP) collection of libraries. Ericsson and a few other companies offer commercial support for Erlang. Since the open source release, Erlang has been used by several firms worldwide, including Nortel and T-Mobile.[20] Although Erlang was designed to fill a niche and has remained an obscure language for most of its existence, its popularity is growing due to demand for concurrent services.[21][22] Erlang has found some use in fielding MMORPG servers.[23] Projects using Erlang[edit] Projects using Erlang include: Solution stacks LYME (software bundle), to serve dynamic web pagesLYCE (software bundle), to serve dynamic web pages  Web servers: Yaws web server  Database (distributed): Cloudant, a database service based on the company's fork of CouchDB, BigCouchCouchDB, a document-based database that uses MapReduceCouchbase Server (née Membase), database management system optimized for storing data behind interactive web applications[24]Mnesia, a distributed databaseRiak, a distributed databaseSimpleDB, a distributed database that is part of Amazon Web Services[25]  Chat: ejabberd, an Extensible Messaging and Presence Protocol (XMPP) instant messaging server Facebook Chat system was running on ejabberd based servers[26][27][28]Tuenti chat is based on ejabberd[29]   CMS: Zotonic, a content management system and web framework  Configuration management: Chef (software), for which the core API server, originally written in Ruby, was completely re-written in version 11 in Erlang[30]  Queue: RabbitMQ, an implementation of Advanced Message Queuing Protocol (AMQP)  Desktop: Wings 3D, a 3D subdivision modeler, used to model and texture polygon meshes  Tools GitHub, a web-based hosting service for software development projects that use the Git version control system. Erlang is used for RPC proxies to ruby processes.[31]  Mobile: WhatsApp, mobile messenger[32]Whisper, an anonymous social network[33]  Enterprise: Issuu, an online digital publisher[34]Twitterfall, a service to view trends and patterns from Twitter[35][36]  Trading Goldman Sachs, high-frequency trading programsSmarkets, sports betting exchange  Gaming Vendetta Online Naos game server[37]Battlestar Galactica Online game server by BigpointCall of Duty server core[38]League of Legends chat system by Riot Games, based on ejabberd  Companies using Erlang[edit] Companies using Erlang in their production systems include: Amazon.com uses Erlang to implement SimpleDB, providing database services as a part of the Amazon Web Services offering.[39]Yahoo! uses it in its social bookmarking service, Delicious, which has more than 5 million users and 150 million bookmarked URLs.[citation needed]Facebook uses Erlang to power the backend of its chat service, handling more than 200 million active users.[40] It can be observed in some of its HTTP response headers.T-Mobile uses Erlang in its SMS and authentication systems.[citation needed]Motorola is using Erlang in call processing products in the public-safety industry.[citation needed]Ericsson uses Erlang in its support nodes, used in GPRS and 3G mobile networks worldwide.[41]Linden Lab uses Erlang in its games.[42]WhatsApp uses Erlang to run messaging servers, achieving up to 2 million connected users per server.[43][44]Huffington Post uses Erlang for its commenting system on HuffPost Live [45]Rakuten uses Erlang for its distributed file system [46]Rackspace uses Erlang in some of its internal applications to manage networking devices [47]Klarna, a Swedish e-commerce company, has been using Erlang to handle 9 million customers and 50 million transaction since 2005.bet365, the online gambling firm uses the language in production to drive its InPlay betting service, pushing live odds of sporting events to millions of customers in near real-time.[48]AOL's digital advertising business is using Erlang for its real time bidding exchange systems.[49]Machine Zone, a developer of Free-to-play games, uses Erlang in Game of War: Fire Age.[50] Variants[edit] Lisp Flavoured Erlang (LFE): re-implementation with a LISP-style syntax.Elixir: a functional, concurrent, general-purpose programming language that runs on the Erlang Virtual Machine (BEAM). References[edit]  ^ Erlang OTP 18.0 has been released^ http://vimeo.com/97329186 18:30^ Joe Armstrong, Bjarne Däcker, Thomas Lindgren, H?kan Millroth. "Open-source Erlang - White Paper". Retrieved 31 July 2011. ^ "Lock-free message queue". Retrieved 23 December 2013. ^ a b c d e Joe Armstrong, "History of Erlang", in HOPL III: Proceedings of the third ACM SIGPLAN conference on History of programming languages, 2007, ISBN 978-1-59593-766-7^ Erlang, the mathematician?^ "Concurrency Oriented Programming in Erlang" (PDF). 2 November 2002. ^ a b "question about Erlang's future". 6 July 2010. ^ Inside Erlang – creator Joe Armstrong tells his story^ "Redirecting...". Retrieved 2 May 2015. ^ http://www.aquabu.com/2008/02/16/fibonacci-sequence-recursion-in-erlang/^ "Erlang -- Using Unicode in Erlang". Retrieved 2 May 2015. ^ "ect - Erlang Class Transformation - add object-oriented programming to Erlang - Google Project Hosting". Retrieved 2 May 2015. ^ Joe Armstrong (September 2010). "Erlang". Communications of the ACM 53 (9): 68–75. doi:10.1145/1810891.1810910. Erlang is conceptually similar to the occam programming language, though it recasts the ideas of CSP in a functional framework and uses asynchronous message passing. ^ "Erlang Efficiency Guide - Processes". ^ Ulf Wiger (14 November 2005). "Stress-testing erlang". comp.lang.functional.misc. Retrieved 25 August 2006. ^ Joe Armstrong. "Erlang robustness". Retrieved 15 July 2010. ^ "Erlang Supervision principles". Retrieved 15 July 2010. ^ "High Performance Erlang". Retrieved 26 March 2011. ^ "Who uses Erlang for product development?". Frequently asked questions about Erlang. Retrieved 16 July 2007. The largest user of Erlang is (surprise!) Ericsson. Ericsson use it to write software used in telecommunications systems. Many dozens of projects have used it, a particularly large one is the extremely scalable AXD301 ATM switch. Other commercial users listed as part of the FAQ include: Nortel, Deutsche Flugsicherung (the German national air traffic control organisation), and T-Mobile. ^ "Programming Erlang". Retrieved 13 December 2008. Virtually all language use shared state concurrency. This is very difficult and leads to terrible problems when you handle failure and scale up the system...Some pretty fast-moving startups in the financial world have latched onto Erlang; for example, the Swedish www.kreditor.se. ^ "Erlang, the next Java". Retrieved 8 October 2008. I do not believe that other languages can catch up with Erlang anytime soon. It will be easy for them to add language features to be like Erlang. It will take a long time for them to build such a high-quality VM and the mature libraries for concurrency and reliability. So, Erlang is poised for success. If you want to build a multicore application in the next few years, you should look at Erlang. ^ Clarke, Gavin (5 Feb 2011). "Battlestar Galactica vets needed for online roleplay". Music and Media. The Reg. Retrieved 8 February 2011. ^ "Why Membase Uses Erlang". Retrieved 2 May 2015. ^ "satine.org". satine.org. Retrieved 2 May 2015. ^ "Thrift: (slightly more than) one year later". Facebook.com. Retrieved 2013-07-10. ^ "Using Facebook Chat via Jabber- Facebook Developers". Developers.facebook.com. Retrieved 2013-07-10. ^ "Erlang at Facebook - Eugene Letuchy" (PDF). Erlang Factory. Retrieved 2014-09-18. ^ "Chat in the making | Tuenti Corporate" (in Spanish). Blog.tuenti.com. 2010-03-17. Retrieved 2013-07-10. ^ "Chef 11 Released!". Opscode. 4 February 2013. ^ "The way GitHub helped Erlang and the way Erlang helped Github". Infoq.com. 2010-08-16. Retrieved 2013-07-10. ^ "1 million is so 2011". Blog.whatsapp.com. 2012-01-06. Retrieved 2013-07-10. ^ inaka. "inaka / case-studies". Retrieved 2 May 2015. ^ Af Tania Andersen Onsdag, 26. august 2009 - 8:10. "S?dan fik dansk succes-website held med Erlang og Amazon | Version2" (in Danish). Version2.dk. Retrieved 2013-07-10. ^ "Twitter / jalada: Twitterfall is now powered". Twitter.com. Retrieved 2013-07-10. ^ "Twitter / jalada: @TacticalGrace Sure does. The". Twitter.com. Retrieved 2013-07-10. ^ "The NAOS Engine - In Brief". Guildsoftware.com. Retrieved 2013-07-10. ^ "Erlang and First-Person Shooters" (PDF). Retrieved 9 August 2012. Presentation about Erlang and Call of Duty from Demonware. ^ Amazon SimpleDB is built on Erlang - O'Reilly Radar^ Erlang at Facebook - Eugene Letuchy, Apr 30, 2009^ "GPRS support notes" (PDF). Ericsson.com. Retrieved 2013-08-18. ^ Believe in Erlang in Games - James Mayfield, Mario Izquierdo, Noah Gift^ 1 million is so 2011 // WhatsApp blog, 2012-01-06: " the last important piece of our infrastracture is Erlang"^ Rick Reed (WhatsApp), Scaling to Millions of Simultaneous Connections - Erlang Factory SF, March 30, 2012^ "Huffington Post Engineering and Erlang". Retrieved 2014-01-31. ^ "Introducing LeoFS – the Lion of Storage Systems". ^ "How Rackspace Is Using Erlang". ^ "Online gambling firm bet365 has swapped Java for Erlang". ^ http://www.erlang-factory.com/static/upload/media/1434462592977425euc_2015_realtimebiddingwitherlang.pdf^ Erlang at Machine Zone - Fredrik Linder | Erlang User Conference 2015  Further reading[edit]  Joe Armstrong (2003). "Making reliable distributed systems in the presence of software errors" (PDF). Ph.D. Dissertation. The Royal Institute of Technology, Stockholm, Sweden. Armstrong, J. (2007). "A history of Erlang". Proceedings of the third ACM SIGPLAN conference on History of programming languages - HOPL III. pp. 6–1. doi:10.1145/1238844.1238850. ISBN 978-1-59593-766-7. Early history of Erlang by Bjarne DäckerMattsson, H.; Nilsson, H.; Wikstrom, C. (1999). "Mnesia - A distributed robust DBMS for telecommunications applications". First International Workshop on Practical Aspects of Declarative Languages (PADL '99): 152–163. Armstrong, Joe; Virding, Robert; Williams, Mike; Wikstrom, Claes (16 January 1996). Concurrent Programming in Erlang (2nd ed.). Prentice Hall. p. 358. ISBN 978-0-13-508301-7. Armstrong, Joe (11 July 2007). Programming Erlang: Software for a Concurrent World (1st ed.). Pragmatic Bookshelf. p. 536. ISBN 978-1-934356-00-5. Thompson, Simon J.; Cesarini, Francesco (19 June 2009). Erlang Programming: A Concurrent Approach to Software Development (1st ed.). Sebastopol, California: O'Reilly Media, Inc. p. 496. ISBN 978-0-596-51818-9. Logan, Martin; Merritt, Eric; Carlsson, Richard (28 May 2010). Erlang and OTP in Action (1st ed.). Greenwich, CT: Manning Publications. p. 500. ISBN 978-1-933988-78-8. Martin, Brown (10 May 2011). "Introduction to programming in Erlang, Part 1: The basics". developerWorks. IBM. Retrieved 10 May 2011. Martin, Brown (17 May 2011). "Introduction to programming in Erlang, Part 2: Use advanced features and functionality". developerWorks. IBM. Retrieved 17 May 2011. Wiger, Ulf (30 Mar 2001). "Four-fold Increase in Productivity and Quality: Industrial-Strength Functional Programming in Telecom-Class Products" (PDF). FEmSYS 2001 Deployment on distributed architectures. Ericsson Telecom AB. Retrieved 16 Sep 2014.   External links[edit] Wikimedia Commons has media related to Erlang (programming language). Wikibooks has a book on the topic of: Erlang Programming Official websiteCode on GitHubErlang Central, Erlang community siteErlang User Conference, an annual conference focused on Erlang, held in Stockholm, SwedenErlang at DMOZErlang: The MovieLearn You Some Erlang, tutorial for beginnerserldocs.com, alternative topic documentationJoe Armstrong on Erlang, Software Engineering Radio Podcast                    Retrieved from "https://en.wikipedia.org/w/index.php?title=Erlang_(programming_language)&oldid=678290215"          Categories: Declarative programming languagesFunctional languagesConcurrent programming languagesErlang (programming language)Register-based virtual machinesEricssonArticles with example Erlang codeSoftware by programming languageProgramming languages created in 1986Programming languages created in the 1980sPattern matching programming languagesHidden categories: CS1 Spanish-language sources (es)CS1 Danish-language sources (da)All articles with unsourced statementsArticles with unsourced statements from August 2012Commons category template with no category setCommons category with page title same as on WikidataArticles with DMOZ linksUse dmy dates from January 2012                      Navigation menu                      Personal tools       Create accountLog in                                  Namespaces       ArticleTalk                                      Variants                                                                     Views       ReadEditView history                        More                                                       Search                                                                                     Navigation               Main pageContentsFeatured contentCurrent eventsRandom articleDonate to WikipediaWikipedia store                   Interaction               HelpAbout WikipediaCommunity portalRecent changesContact page                   Tools               What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationWikidata itemCite this page                   Print/export               Create a bookDownload as PDFPrintable version                   Languages               ????????????????Catal?ÈeštinaDanskDeutschEesti????????Espa?ol?????FrançaisGalego???Italiano???????Nederlands???Norsk bokm?lPolskiPortugu?s???????SlovenšèinaSvenska?????????????????????     Edit links                          This page was last modified on 28 August 2015, at 13:38.Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply.  By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.        Privacy policyAbout WikipediaDisclaimersContact WikipediaDevelopersMobile view