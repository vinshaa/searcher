Web Server Gateway Interface                    From Wikipedia, the free encyclopedia                            Jump to:     navigation,      search            This article's lead section may not adequately summarize key points of its contents. Please consider expanding the lead to provide an accessible overview of all important aspects of the article. (April 2012) "WSGI" redirects here. For the radio station in Springfield, see WSGI (AM). The Web Server Gateway Interface (WSGI) is a specification for simple and universal interface between web servers and web applications or frameworks for the Python programming language. It was originally specified in PEP 333[1] authored by Phillip J. Eby, and published on 7 December 2003. It has since been adopted as a standard for Python web application development. The latest version of the specification is v1.0.1, also known as PEP 3333, published on 26 September 2010.[2]    Contents  1 Idea2 Specification overview3 Example application4 Example of calling an application5 WSGI-compatible applications and frameworks6 Wrappers7 WSGI and Python 38 See also9 References10 External links   Idea[edit] Python web application frameworks have been a problem for new Python users because the choice of web framework would limit the choice of usable web servers, and vice versa.[3] Python applications were often designed for only one of CGI, FastCGI, mod_python or some other custom API of a specific web server. WSGI[2] was created as a low-level interface between web servers and web applications or frameworks to promote common ground for portable web application development. Specification overview[edit] The WSGI has two sides: the "server" or "gateway" side (often the web server like Apache, Nginx), and the "application" or "framework" side (the python script itself). To process a WSGI request, the server side executes the application and provides environment information and a callback function to the application side. The application processes the request, and returns the response to the server side using the callback function it was provided. Between the server and the application, there may be a WSGI middleware, which implements both sides of the API. The server receives a request from a client and forwards it to the middleware. After processing it sends a request to another WSGI application whose response is forwarded to the client via the middleware and ultimately via the server. There may be multiple middlewares, thus forming a stack of WSGI compliant applications. A "middleware" component can perform such functions as: Routing a request to different application objects based on the target URL, after changing the environment variables accordingly.Allowing multiple applications or frameworks to run side-by-side in the same processLoad balancing and remote processing, by forwarding requests and responses over a networkPerform content postprocessing, such as applying XSLT stylesheets Example application[edit] A WSGI-compatible “Hello World” application written in Python:   1 def application(environ, start_response): 2     start_response('200 OK', [('Content-Type', 'text/plain')]) 3     yield 'Hello World\n'  Where: Line 1 defines a callable[4] named application, which takes two parameters, environ and start_response. environ is a dictionary containing environment variables in CGI. start_response is a callable taking two required parameters status and response_headers.Line 2 calls start_response, specifying "200 OK" as the status and a "Content-Type" header.Line 3 returns the body of the response as a string literal. Example of calling an application[edit] This section requires expansion. (March 2011) An example of calling an application and retrieving its response:   def call_application(app, environ):     body = []     status_headers = [None, None]     def start_response(status, headers):         status_headers[:] = [status, headers]         return body.append(status_headers)     app_iter = app(environ, start_response)     try:         for item in app_iter:             body.append(item)     finally:         if hasattr(app_iter, 'close'):             app_iter.close()     return status_headers[0], status_headers[1], ''.join(body)  status, headers, body = call_application(app, {...environ...})  WSGI-compatible applications and frameworks[edit] There are numerous web application frameworks supporting WSGI:  BlueBreambobo[5]BottleCherryPyDjango[6]Eventlet [7]FlaskGevent-FastCGI [8]Google App Engine's webapp2Gunicornprestans[9]mod_wsgi for use with Apache[10]netiusPylonsPyramidrestlite[11]TornadoTracTurboGearsUliweb[12]uWSGIweb.py[13]Falcon[14]web2pyweblayer[15]Werkzeug[16]  Wrappers[edit] The server or gateway invokes the application callable once for each request it receives from an HTTP client, that is directed at the application. Currently wrappers are available for FastCGI, CGI, SCGI, AJP (using flup), twisted.web, Apache (using mod_wsgi or mod_python), Nginx (using mod_wsgi), and Microsoft IIS (using WFastCGI, isapi-wsgi, PyISAPIe, or an ASP gateway). WSGI and Python 3[edit] The separation of binary and text data in Python 3 poses a problem for WSGI, as it specifies that header data should be strings, while it sometimes needs to be binary and sometimes text. This works in Python 2 where text and binary data both are kept in "string" variables, but in Python 3 binary data is kept in "bytes" variables and "string" variables are for unicode text data. An updated version of the WSGI specification that deals with this is PEP 3333.[17] A reworked WSGI spec Web3 has also been proposed, specified in PEP444. This standard is an incompatible derivative of WSGI designed to work on Python 2.6, 2.7, 3.1+.[18] See also[edit] Rack – Ruby web server interfacePSGI – Perl Web Server Gateway InterfaceSCGI – Simple Common Gateway InterfaceJSGI – JavaScript web server gateway interface References[edit]  ^ "PEP 333, Python Web Server Gateway Interface v1.0". ^ a b "PEP 3333, Python Web Server Gateway Interface v1.0.1". ^ "The Python Wiki "Web Programming" topic". ^ i.e. "a function, method, class, or an instance with a __call__ method"^ "Bobo light-weight framework for creating WSGI web applications". ^ "Django with WSGI support". ^ http://eventlet.net/doc/modules/wsgi.html^ https://pypi.python.org/pypi/gevent-fastcgi^ "prestans Micro-Framework". ^ Python WSGI adapter module for Apache ^ "restlite server tools for quick prototyping". ^ "Ulibweb github source code". ^ "web.py official site". ^ "Falcon Web Framework". ^ "weblayer package for writing WSGI application". ^ "Werkzeug, the Python WSGI Utility Library". ^ Eby, P.J. (2010-09-26). "PEP 3333". Retrieved 2011-07-27. ^ McDonough, Chris; Ronacher, Armin (2010-07-19). "PEP 444 – Python Web3 Interface". Retrieved 2010-09-20.   External links[edit] PEP 333 – Python Web Server Gateway InterfacePEP 3333 -- Python Web Server Gateway Interface v1.0.1WSGI metaframeworkComprehensive wiki about everything WSGIWSGI TutorialPython standard library module wsgirefGetting Started with WSGINWSGI, a .NET implementation of the Python WSGI specification for IronPython and IISGevent-FastCGI server implemented using gevent coroutine-based networking library    vte  Python Implementations  CLPythonCPythonCythonIronPythonJythonPsycoPyPyPython for S60Stackless PythonUnladen Swallow    IDE  BoaEric Python IDEIDLEPyDevSPENinja-IDEmore...  Topics  WSGI    software (list)Python Software FoundationPyCon       vte  Web interfaces Server-side   Protocols   CGISCGIFCGIAJPWSRPWebSocket   Server APIs   C NSAPIC ASAPIC ISAPICOM ASPJava servlet container Portlet container CIL System.Web.IHttpHandlerPython WSGIRuby RackJavaScript JSGIPerl PSGILua WSAPIOWIN   Apache modules   mod_jkmod_lispmod_monomod_parrotmod_perlmod_phpmod_proxymod_pythonmod_wsgimod_rubyPhusion Passenger   Topics   Web resource vs. Web serviceOpen APIWebhookApplication server comparison    Client-side   Browser APIs   C NPAPI LiveConnectXPConnect C NPRuntimeC PPAPI NaCl ActiveX   Web APIs    W3C   AudioCanvasCORSFileGeolocationIndexedDBMicrodataSSESVGVideoWebRTCWebSocketWeb messagingWeb storageWeb workerXMLHttpRequest   Khronos   WebCLWebGL   Others   GearsWeb SQL Database (formerly W3C)    Topics   MashupWeb IDL                        Retrieved from "https://en.wikipedia.org/w/index.php?title=Web_Server_Gateway_Interface&oldid=678073421"          Categories: Python (programming language)Hidden categories: Wikipedia introduction cleanup from April 2012All pages needing cleanupArticles covered by WikiProject Wikify from April 2012All articles covered by WikiProject WikifyArticles to be expanded from March 2011All articles to be expanded                      Navigation menu                      Personal tools       Create accountLog in                                  Namespaces       ArticleTalk                                      Variants                                                                     Views       ReadEditView history                        More                                                       Search                                                                                     Navigation               Main pageContentsFeatured contentCurrent eventsRandom articleDonate to WikipediaWikipedia store                   Interaction               HelpAbout WikipediaCommunity portalRecent changesContact page                   Tools               What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationWikidata itemCite this page                   Print/export               Create a bookDownload as PDFPrintable version                   Languages               ÈeštinaDeutsch?????Français???ItalianoNederlands???Portugu?s???????????????????     Edit links                          This page was last modified on 27 August 2015, at 07:06.Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply.  By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.        Privacy policyAbout WikipediaDisclaimersContact WikipediaDevelopersMobile view