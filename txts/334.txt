Go (programming language)                    From Wikipedia, the free encyclopedia                            Jump to:     navigation,      search          Not to be confused with Go! (programming language), an agent-based language released in 2003. GoParadigmcompiled, concurrent, imperative, structuredDesigned byRobert Griesemer Rob Pike Ken ThompsonDeveloperGoogle Inc.First appeared2009; 6 years ago (2009)Stable releaseversion 1.5[1] / 19 August 2015; 10 days ago (2015-08-19)Typing disciplinestrong, static, inferred, structuralImplementation languageGo, AsmOSLinux, OS X, FreeBSD, NetBSD, OpenBSD,[2] MS Windows, Plan 9,[3] DragonFly BSD, SolarisLicenseBSD-style[4] + Patent grant[5]Filename extensions.goWebsitegolang.orgMajor implementationsgc, gccgoInfluenced byC, occam, Limbo, Modula, Newsqueak, Oberon, Pascal[6] Go, also commonly referred to as golang, is a programming language developed at Google[7] in 2007 by Robert Griesemer, Rob Pike, and Ken Thompson.[6] It is a statically typed language with syntax loosely derived from that of C, adding garbage collection, type safety, some dynamic-typing capabilities, additional built-in types such as variable-length arrays & key-value maps, and a large standard library. The language was announced in November 2009 and is now used in some of Google's production systems.[8] Go's "gc" compiler targets the Linux, OS X, FreeBSD, NetBSD, OpenBSD, Plan 9, DragonFly BSD, Solaris, and Windows operating systems and the i386, Amd64, ARM and IBM POWER processor architectures.[9] A second compiler, gccgo, is a GCC frontend.[10][11] Android support was added in version 1.4, which has since been ported to also run on iOS.[12]    Contents  1 History2 Language design 2.1 Syntax2.2 Types 2.2.1 Interface system 2.3 Package system2.4 Concurrency: goroutines, channels, and select 2.4.1 Suitability for parallel programming2.4.2 Lack of race condition safety 2.5 Omissions 3 Conventions and code style4 Language tools5 Examples 5.1 Hello world5.2 Echo5.3 File Read 6 Notable users7 Libraries8 Community and conferences9 Reception10 Mascot11 Naming dispute12 See also13 Notes14 References15 External links   History[edit] Ken Thompson states that, initially, Go was purely an experimental project. Referring to himself along with the other original authors of Go, he states:[13]  When the three of us [Thompson, Rob Pike, and Robert Griesemer] got started, it was pure research. The three of us got together and decided that we hated C++. [laughter] ... [Returning to Go,] we started off with the idea that all three of us had to be talked into every feature in the language, so there was no extraneous garbage put into the language for any reason..  Rob Pike, at a talk in San Francisco in 2012: [14]  Back around September 2007, I was doing some minor but central work on an enormous Google C++ program, one you've all interacted with, and my compilations were taking about 45 minutes on our huge distributed compile cluster. An announcement came around that there was going to be a talk presented by a couple of Google employees serving on the C++ standards committee. They were going to tell us what was coming in C++11. In the span of an hour at that talk we heard about something like 35 new features that were being planned. At this point I asked myself a question: Did the C++ committee really believe that what was wrong with C++ was that it didn't have enough features?  Robert Griesemer, at the GopherCon 2015: [15]  It was clear what was wrong with C++ - it was very complex, hard to understand, missing concurrency support, didn’t scale, and had really long build times. A common pattern at Google was that someone would have an issue with C++. They’d send out an email soliciting advice; everyone would reply with a different answer. Finally, at the end of the day, the C++ guru on the team (who wrote the book at the subject) would reply with a definitive answer. This process was clearly broken.  The history of the language before its first release, back to 2007, is covered in the language's FAQ.[16] Language design[edit] Go is recognizably in the tradition of C, but makes many changes to improve conciseness, simplicity, and safety. The following is a brief overview of the features which define Go: A syntax and environment adopting patterns more common in dynamic languages:[17] Optional concise variable declaration and initialization through type inference (x := 0 not int x = 0;).Fast compilation times.[18]Remote package management (go get)[19] and online package documentation.[20] Distinctive approaches to particular problems: Built-in concurrency primitives: light-weight processes (goroutines), channels, and the select statement.An interface system in place of virtual inheritance, and type embedding instead of non-virtual inheritance.A toolchain that, by default, produces statically linked native binaries without external dependencies. A desire to keep the language specification simple enough to hold in a programmer's head,[21] in part by omitting features common to similar languages; see §?Omissions. Frequent criticisms assert that: lack of compile-time generics leads to repetition or excessive dynamic code[22][self-published source?][23][self-published source?]lack of language extensibility (through, for instance, operator overloading) makes certain tasks more verbose[24][self-published source?][22][self-published source?]the type system's lack of const or Hindley-Milner typing inhibits safety and/or expressiveness[25][self-published source?][26][self-published source?]the pauses and overhead of garbage collection limit Go's use in systems programming compared to languages with manual memory management[22][self-published source?][25][self-published source?] The language designers argue that these trade-offs are important to Go's success,[27] and explain some particular decisions at length,[28] though they do express openness to adding some form of generic programming in the future, and to pragmatic improvements in areas like standardizing ways to apply code generation[29] and reducing garbage collection pause times.[30] Syntax[edit] Go's syntax includes changes from C aimed at keeping code concise and readable. A combined declaration/initialization operator was introduced that allows the programmer to write i := 3 or s := "some words", without specifying the types of variables. This contrasts with C's int i = 3; and const char *s = "some words";. Semicolons still terminate statements, but are implicit when they would occur at the end of a line. Functions may return multiple values, and returning a result, err pair is the conventional way a function indicates an error to its caller in Go.[a] Go adds literal syntaxes for initializing struct parameters by name, and for initializing maps and slices. As an alternative to C's three-statement for loop, Go's range expressions allow concise iteration over arrays, slices, strings, and maps. Types[edit] Go has a number of built-in types, including numeric ones (byte, int64, float32, etc.), booleans and character strings (string). Strings are immutable; built-in operators and keywords (rather than functions) provide concatenation, comparison, and UTF-8 encoding and decoding.[31] Record types can be defined with the struct keyword. For each type T and each non-negative integer constant n, there is an array type denoted [n]T; arrays of differing lengths are thus of different types. Dynamic arrays are available as "slices", denoted []T for some type T. These have a length and a capacity specifying when new memory needs to be allocated to expand the array. Several slices may share their underlying memory.[32][33][34] Pointers are available for all types, and the pointer-to-T type is denoted *T. Pointer operations are limited to indirection; there is no pointer arithmetic (except via the special unsafe.Pointer type provided by the standard library). For a pair of types K, V, the type map[K]V is the type of hash tables mapping type-K keys to type-V values. Hash tables are built into the language, with special syntax and built-in functions. Finally, chan T is a channel that allows sending values of type T between concurrently running processes; see §?Concurrency. Aside from its support for interfaces, Go's type system is nominal: the type keyword can be used to define a new named type, which is distinct from all other types that have the same layout (in the case of a struct, the same members in the same order). Some conversions between types (e.g., between the various integer types) are pre-defined and adding a new type may define additional conversions, but these must always be invoked explicitly.[35] For example, the type keyword can be used to define a type for IPv4 addresses, which are 32-bit unsigned integers:   type ipv4addr uint32  With this type definition, ipv4addr(x) interprets the uint32 value x as an IP address. Simply assigning x to a variable of type ipv4addr is a type error. Constant expressions may be either typed or "untyped"; they are given a type when assigned to a typed variable, if the value they represent passes a compile-time check.[36] Function types are indicated by the func keyword; they take zero or more parameters and return zero or more values, all of which are typed. The parameter and return values determine a function type; thus, func(string, int32) (int, error) is the type of functions that take a string and a 32-bit signed integer, and return a signed integer (of default width) and a value of the built-in interface type error. Any named type has a method set associated with it. The IP address example above can be extended with a method for converting an address to a human-readable representation, viz.,   // Is this the zero broadcast address 255.255.255.255? func (addr ipv4addr) ZeroBroadcast() bool {     return addr == 0xFFFFFFFF }  Due to nominal typing, this method definition adds a method to ipv4addr, but not on uint32. While methods have special definition and call syntax, there is no distinct method type.[37]  Interface system[edit] Go provides two features that replace class inheritance. The first is embedding, an automated form of composition. The second are its interfaces. An interface specifies a set of types by listing required methods: for example, implementing io.Reader requires a Read method that takes a []byte and returns a count of bytes read and any error.[38] Any type having such a method satisfies the interface implicitly, without the programmer having to specify in the code that the type is a Reader. Code calling Read needn't know whether it's reading from an HTTP connection, a file, an in-memory buffer, or any other source. Go's standard library defines interfaces for a number of concepts: input sources and output sinks, sortable collections, objects printable as strings, hash functions, and so on. Go types don't declare which interfaces they implement: having the required methods is implementing the interface. In formal language, Go's interface system provides structural rather than nominal typing. The example below uses the io.Reader and io.Writer interfaces to test Go's implementation of SHA-256 on a standard test input, 1,000,000 repeats of the character "a". RepeatByte implements an io.Reader yielding an infinite stream of repeats of a byte, similar to Unix /dev/zero. The main() function uses RepeatByte to stream a million repeats of "a" into the hash function, then prints the result, which matches the expected value published online.[39] Even though both reader and writer interfaces are needed to make this work, the code needn't mention either; the compiler infers what types implement what interfaces:   package main  import (     "fmt"     "io"     "crypto/sha256" )  type RepeatByte byte  func (r RepeatByte) Read(p []byte) (n int, err error) {     for i := range p {         p[i] = byte(r)     }     return len(p), nil }  func main() {     testStream := RepeatByte('a')     hasher := sha256.New()     io.CopyN(hasher, testStream, 1000000)     fmt.Printf("%x", hasher.Sum(nil)) }  (Run or edit this example online.) Also note type RepeatByte is defined as a byte, not a struct. Named types in Go needn't be structs, and any named type can have methods defined, satisfy interfaces, and act, for practical purposes, as objects; the standard library, for example, stores IP addresses in byte slices.[40] Besides calling methods via interfaces, Go allows converting interface values to other types with a run-time type check. The language constructs to do so are the type assertion,[41] which checks against a single potential type, and the type switch,[42] which checks against multiple types. interface{}, the empty interface, is an important corner case because it can refer to an item of any concrete type, including builtin types like string. Code using the empty interface can't simply call methods (or built-in operators) on the referred-to object, but it can store the interface{} value, try to convert it to a more useful type via a type assertion or type switch, or inspect it with Go's reflect package.[43] Because interface{} can refer to any value, it's a limited way to escape the restrictions of static typing, like void* in C but with additional run-time type checks. Interface values are implemented using pointer to data and a second pointer to run-time type information.[44] Like some other types implemented using pointers in Go, interface values are nil if uninitialized.[45] Unlike in environments like Java's virtual machine, there is no object header; the run-time type information is only attached to interface values. So, the system imposes no per-object memory overhead for objects not accessed via interface, similar to C structs or C# ValueTypes. Go does not have interface inheritance,[disputed – discuss] but one interface type can embed another; then the embedding interface requires all of the methods required by the embedded interface.[46] Package system[edit] In Go's package system, each package has a path (e.g., "compress/bzip2" or "golang.org/x/net/html") and a name (e.g., bzip2 or html). References to other packages' definitions must always be prefixed with the other package's name, and only the capitalized names from other modules are accessible: io.Reader is public but bzip2.reader is not.[47] The go get command can retrieve packages stored in a remote repository such as Github or Google Code, and package paths often look like partial URLs for compatibility.[48]  Concurrency: goroutines, channels, and select[edit] Go provides facilities for writing concurrent programs that share state by communicating.[49][50][51] Concurrency refers not only to multithreading and CPU parallelism, which Go supports, but also to asynchrony: letting slow operations like a database or network-read run while the program does other work, as is common in event-based servers.[52] Go's concurrency-related syntax and types include: The go statement, go func(), starts a function in a new light-weight process, or goroutineChannel types, chan type, provide type-safe, synchronized, optionally buffered channels between goroutines, and are useful mostly with two other facilities: The send statement, ch <- x sends x over chThe receive operator, <- ch receives a value from chBoth operations block until the channel is ready for communication The select statement uses a switch-like syntax to wait for communication on any one out of a set of possible channels, or tries non-blocking communication[53] From these tools one can build concurrent constructs like worker pools, pipelines (in which, say, a file is decompressed and parsed as it downloads), background calls with timeout, "fan-out" parallel calls to a set of services, and others.[54] Channels have also found uses further from the usual notion of interprocess communication, like serving as a concurrency-safe list of recycled buffers,[55] implementing coroutines (which helped inspire the name goroutine),[56] and implementing iterators.[57] While the communicating-processes model is favored in Go, it isn't the only one: memory can be shared across goroutines (see below), and the standard sync module provides locks and other primitives.[58] Suitability for parallel programming[edit] Although Go's concurrency features are not aimed primarily at parallel processing,[52] they can be used to program shared memory multi-processor machines. Various studies have been done into the effectiveness of this approach.[59] One of these studies compared the size (in lines of code) and speed of programs written by a seasoned programmer not familiar with the language and corrections to these programs by a Go expert (from Google's development team), doing the same for Chapel, Cilk and Intel TBB. The study found that the non-expert tended to write divide-and-conquer algorithms with one go statement per recursion, while the expert wrote distribute-work-synchronize programs using one goroutine per processor. The expert's programs were usually faster, but also longer.[60] Lack of race condition safety[edit] There are no restrictions on how goroutines access shared data, making race conditions possible. Specifically, unless a program explicitly synchronizes via channels or other means, writes from one goroutine might be partly, entirely, or not at all visible to another, often with no guarantees about ordering of writes.[61] Furthermore, Go's internal data structures like interface values, slice headers, and string headers are not immune to race conditions, so type and memory safety can be violated in multithreaded programs that modify shared instances of those types without synchronization.[62][63] Idiomatic Go minimizes sharing of data (and thus potential race conditions) by communicating over channels, and a race-condition tester is included in the standard distribution to help catch unsafe behavior. Still, it is important to realize that while Go provides building blocks that can be used to write correct, comprehensible concurrent code, arbitrary code isn't guaranteed to be safe. Some concurrency-related structural conventions of Go (channels and alternative channel inputs) are derived from Tony Hoare's communicating sequential processes model. Unlike previous concurrent programming languages such as occam or Limbo (a language on which Go co-designer Rob Pike worked[64]), Go does not provide any built-in notion of safe or verifiable concurrency.[61] Omissions[edit] Go deliberately omits certain features common in other languages, including (implementation) inheritance, generic programming, dynamic linking, assertions, pointer arithmetic and implicit type conversions. Of these language features, the Go authors express an openness to generic programming, explicitly argue against assertions and pointer arithmetic, while defending the choice to omit type inheritance as giving a more useful language, encouraging instead the use of interfaces to achieve dynamic dispatch[b] and composition to reuse code. Composition and delegation are in fact largely automated by struct embedding; according to researchers Schmager et al., this feature "has many of the drawbacks of inheritance: it affects the public interface of objects, it is not fine-grained (i.e, no method-level control over embedding), methods of embedded objects cannot be hidden, and it is static", making it "not obvious" whether programmers will not overuse it to the extent that programmers in other languages are reputed to overuse inheritance.[65] Regarding generic programming, some built-in functions are in fact type-generic, but these are treated as special cases; Rob Pike calls this a weakness of the language that may at some point be changed.[32] The Google team that designs the language built at least one compiler for an experimental Go dialect with generics, but didn't release it.[66] After initially omitting exceptions, the exception-like panic/recover mechanism was eventually added to the language, which the Go authors advise using for unrecoverable errors such as those that should halt an entire program or server request, or as a shortcut to propagate errors up the stack within a package (but not across package boundaries; there, error returns are the standard API).[67][68][69][70] Conventions and code style[edit] The Go authors and community put substantial effort into molding the style and design of Go programs: Indentation, spacing, and other surface-level details of code are automatically standardized by the go fmt tool. golint does additional style checks automatically.Tools and libraries distributed with Go suggest standard approaches to things like API documentation (godoc[71]), testing (go test), building (go build), package management (go get), and so on.Syntax rules require things that are optional in other languages, for example by banning cyclic dependencies, unused variables or imports, and implicit type conversions.The omission of certain features (for example, functional-programming shortcuts like map and C++-style try/finally blocks) tends to encourage a particular explicit, concrete, and imperative programming style.Core developers write extensively about Go idioms, style, and philosophy, in the Effective Go document and code review comments reference, presentations, blog posts, and public mailing list messages.  Language tools[edit] Go includes the same sort of debugging, testing, and code-vetting tools as many language distributions. The Go distribution includes, among other tools, go build, which builds Go binaries using only information in the source files themselves, no separate makefilesgo test, for unit testing and microbenchmarksgo fmt, for formatting codego get, for retrieving and installing remote packagesgo vet, a static analyzer looking for potential errors in codego run, a shortcut for building and executing codegodoc, for displaying documentation or serving it via HTTPgorename, for renaming variables, functions, and so on in a type-safe waygo generate, a standard way to invoke code generators It also includes profiling and debugging support, runtime instrumentation (to, for example, track garbage collection pauses), and a race condition tester. There is an ecosystem of third-party tools that add to the standard distribution, such as gocode, which enables code autocompletion in many text editors, goimports (by a Go team member), which automatically adds/removes package imports as needed, errcheck, which detects code that might unintentionally ignore errors, and more. Plugins exist to add language support in widely used text editors, and at least one IDE, LiteIDE, is branded as "a simple, open source, cross-platform Go IDE."[72] Examples[edit] Hello world[edit] Here is a Hello world program in Go:   package main  import "fmt"  func main() {     fmt.Println("Hello, World") }  (Run or edit this example online.) Echo[edit] This imitates the Unix echo command in Go:[73]   package main  import (     "flag"     "fmt"     "strings" )  func main() {     omitNewline := flag.Bool("n", false, "don't print final newline")     flag.Parse() // Scans the arg list and sets up flags.      str := strings.Join(flag.Args(), " ")     if *omitNewline {         fmt.Print(str)     } else {         fmt.Println(str)     } }  File Read[edit]   // Reading and writing files are basic tasks needed for // many Go programs. First we'll look at some examples of // reading files.  package main  import (     "bufio"     "fmt"     "io"     "io/ioutil"     "os" )  // Reading files requires checking most calls for errors. // This helper will streamline our error checks below. func check(e error) {     if e != nil {         panic(e)     } }  func main() {      // Perhaps the most basic file reading task is     // slurping a file's entire contents into memory.     dat, err := ioutil.ReadFile("/tmp/dat")     check(err)     fmt.Print(string(dat))      // You'll often want more control over how and what     // parts of a file are read. For these tasks, start     // by `Open`ing a file to obtain an `os.File` value.     f, err := os.Open("/tmp/dat")     check(err)      // Read some bytes from the beginning of the file.     // Allow up to 5 to be read but also note how many     // actually were read.     b1 := make([]byte, 5)     n1, err := f.Read(b1)     check(err)     fmt.Printf("%d bytes: %s\n", n1, string(b1))      // You can also `Seek` to a known location in the file     // and `Read` from there.     o2, err := f.Seek(6, 0)     check(err)     b2 := make([]byte, 2)     n2, err := f.Read(b2)     check(err)     fmt.Printf("%d bytes @ %d: %s\n", n2, o2, string(b2))      // The `io` package provides some functions that may     // be helpful for file reading. For example, reads     // like the ones above can be more robustly     // implemented with `ReadAtLeast`.     o3, err := f.Seek(6, 0)     check(err)     b3 := make([]byte, 2)     n3, err := io.ReadAtLeast(f, b3, 2)     check(err)     fmt.Printf("%d bytes @ %d: %s\n", n3, o3, string(b3))      // There is no built-in rewind, but `Seek(0, 0)`     // accomplishes this.     _, err = f.Seek(0, 0)     check(err)      // The `bufio` package implements a buffered     // reader that may be useful both for its efficiency     // with many small reads and because of the additional     // reading methods it provides.     r4 := bufio.NewReader(f)     b4, err := r4.Peek(5)     check(err)     fmt.Printf("5 bytes: %s\n", string(b4))      // Close the file when you're done (usually this would     // be scheduled immediately after `Open`ing with     // `defer`).     f.Close()  }  [74][75] Notable users[edit] Some notable open-source applications in Go include: Docker, a set of tools for deploying Linux containersDoozer, a lock service by managed hosting provider HerokuFlynn, a PaaS powered by DockerGogs (Go Git Service), a self-hosted Git serviceJuju, a service orchestration tool by Canonical, packagers of Ubuntu Linuxnsq, a message queue by bit.lySyncthing, an open-source file synchronization client/server applicationPacker, a tool for creating identical machine images for multiple platforms from a single source configuration Other companies and sites using Go (generally together with other languages, not exclusively) include:[76][77] Google, for many projects, notably including download server dl.google.com[78][79][80]Dropbox, migrated some of their critical components from Python to Go[81]CloudFlare, for their delta-coding proxy Railgun, their distributed DNS service, as well as tools for cryptography, logging, stream processing, and accessing SPDY sites.[82][83]SoundCloud, for "dozens of systems"[84]The BBC, in some games and internal projectsNovartis, for an internal inventory systemSplice, for the entire backend (API and parsers) of their online music collaboration platform.[85]Cloud Foundry, a platform as a serviceCoreOS, a Linux-based operating system that utilizes Docker containersMongoDB, tools for administering MongoDB instancesZerodha, for realtime peering and streaming of market dataChango, a programmatic advertising company uses Go in its real-time bidding systems.[86]SendGrid, a Boulder, Colorado-based transactional email delivery and management service.[87]Plug.dj, an interactive online social music streaming website.[88] Libraries[edit] Go's open-source libraries include: Go's standard library, which covers a lot of fundamental functionality: Algorithms: compression, cryptography, sorting, math, indexing, and text and string manipulation.External interfaces: I/O, network clients and servers, parsing and writing common formats, running system calls, and interacting with C code.Development tools: reflection, runtime control, debugging, profiling, unit testing, synchronization, and parsing Go. Third-party libraries with more specialized tools: Web toolkits, including the Gorilla Web Toolkit, Revel, goweb, rst and beegoDatabase, stream, and caching tools, including groupcache and kv and qlParsers for common formats, such as HTML, JSON, and Google Protocol BuffersProtocol implementations, such as ssh, SPDY, and websocketDatabase drivers, such as sqlite3, mysql, and redisBindings to C libraries, such as cgzip, qml, and GTKSpecialized tools like biogo for bioinformatics, meeus for astronomy, and gogeos for GIS  Some sites help index the libraries outside the Go distribution: godoc.orgThe Go Wiki's project page Community and conferences[edit] Gopher Academy, Gopher Academy is a group of developers working to educate and promote the golang community.Golangprojects.com, lists programming jobs and projects where companies are looking for people that know GoGopherCon The first Go conference. Denver, Colorado, USA April 24–26, 2014dotGo European conference. Paris, France November 9, 2015GopherConIndia The first Go conference in India. Bangalore Feb. 19-21 2015Gopher Gala The first Golang hackathon. Jan 23 - 25 2015.GolangUK The first Golang conference in UK. London 21st Aug 2015 Reception[edit] Go's initial release led to much discussion. Dave Astels at Engine Yard wrote:[89]  Go is extremely easy to dive into. There are a minimal number of fundamental language concepts and the syntax is clean and designed to be clear and unambiguous. Go is still experimental and still a little rough around the edges.  Ars Technica interviewed Rob Pike, one of the authors of Go, and asked why a new language was needed. He replied that:[90]  It wasn't enough to just add features to existing programming languages, because sometimes you can get more in the long run by taking things away. They wanted to start from scratch and rethink everything. ... [But they did not want] to deviate too much from what developers already knew because they wanted to avoid alienating Go's target audience.  Go was named Programming Language of the Year by the TIOBE Programming Community Index in its first year, 2009, for having a larger 12-month increase in popularity (in only 2 months, after its introduction in November) than any other language that year, and reached 13th place by January 2010,[91] surpassing established languages like Pascal. As of June 2015[update], its ranking had dropped to below 50th in the index, placing it lower than COBOL and Fortran.[92] Regarding Go, Bruce Eckel has stated:[93]  The complexity of C++ (even more complexity has been added in the new C++), and the resulting impact on productivity, is no longer justified. All the hoops that the C++ programmer had to jump through in order to use a C-compatible language make no sense anymore -- they're just a waste of time and effort. Now, Go makes much more sense for the class of problems that C++ was originally intended to solve.  A 2011 evaluation of the language and its gc implementation in comparison to C++ (GCC), Java and Scala by a Google engineer found that  Go offers interesting language features, which also allow for a concise and standardized notation. The compilers for this language are still immature, which reflects in both performance and binary sizes. —R. Hundt[94]  The evaluation got a rebuttal from the Go development team. Ian Lance Taylor, who had improved the Go code for Hundt's paper, had not been aware of the intention to publish his code, and says that his version was "never intended to be an example of idiomatic or efficient Go"; Russ Cox then did optimize the Go code, as well as the C++ code, and got the Go code to run slightly faster than C++ and more than an order of magnitude faster than the "optimized" code in the paper.[95] Mascot[edit] Go's mascot is a gopher designed by Renée French, who also designed Glenda, the Plan 9 Bunny. The mascot is based on one French had previously drawn for a WFMU fundraiser T-shirt.[96] The logo and mascot are licensed under Creative Commons Attribution 3.0 license.[97] Naming dispute[edit] On the day of the general release of the language, Francis McCabe, developer of the Go! programming language (note the exclamation point), requested a name change of Google's language to prevent confusion with his language.[98] The issue was closed by a Google developer on 12 October 2010 with the custom status "Unfortunate" and with the following comment: "there are many computing products and services named Go. In the 11 months since our release, there has been minimal confusion of the two languages."[99] See also[edit] Comparison of programming languagesDart, another Google programming language  Free software portal  Notes[edit]  ^ Usually, exactly one of the result and error values has a value other than the type's zero value; sometimes both do, as when a read or write can only be partially completed, and sometimes neither, as when a read returns 0 bytes. See Semipredicate problem: Multivalued return.^ Questions "How do I get dynamic dispatch of methods?" and and "Why is there no type inheritance?" in the language FAQ.[6]  References[edit] This article incorporates material from the official Go tutorial, which is licensed under the Creative Commons Attribution 3.0 license.  ^ "Release History - The Go Programming Language". Retrieved 17 January 2015. ^ "lang/go: go-1.4 – Go programming language". OpenBSD ports. 2014-12-23. Retrieved 2015-01-19. ^ "Go Porting Efforts". Go Language Resources. cat-v. 12 January 2010. Retrieved 18 January 2010. ^ "Text file LICENSE". The Go Programming Language. Google. Retrieved 5 October 2012. ^ "Additional IP Rights Grant". The Go Programming Language. Google. Retrieved 5 October 2012. ^ a b c "Language Design FAQ". golang.org. 16 January 2010. Retrieved 27 February 2010. ^ Kincaid, Jason (10 November 2009). "Google’s Go: A New Programming Language That’s Python Meets C++". TechCrunch. Retrieved 18 January 2010. ^ "Go FAQ: Is Google using Go internally?". Retrieved 9 March 2013. ^ "Installing Go". golang.org. The Go Authors. 11 June 2010. Retrieved 11 June 2010. ^ "FAQ: Implementation". golang.org. 16 January 2010. Retrieved 18 January 2010. ^ "Installing GCC: Configuration". Retrieved 3 December 2011. Ada, Go and Objective-C++ are not default languages ^ https://groups.google.com/forum/#!topic/golang-nuts/mmB2q8RqB-Y^ Andrew Binstock (18 May 2011). "Dr. Dobb's: Interview with Ken Thompson". Retrieved 7 February 2014. ^ "Less is exponentially moree". ^ "The Evolution of Go". ^ "Frequently Asked Questions (FAQ) - The Go Programming Language". Golang.org. Retrieved 2014-03-27. ^ Pike, Rob. "The Go Programming Language". YouTube. Retrieved 1 Jul 2011. ^ Rob Pike (10 November 2009). The Go Programming Language (flv) (Tech talk). Google. Event occurs at 8:53. ^ Download and install packages and dependencies - go - The Go Programming Language; see godoc.org for addresses and documentation of some packages^ "GoDoc". godoc.org. ^ Rob Pike, on The Changelog podcast^ a b c Will Yager, Why Go is not Good^ Egon Elbre, Summary of Go Generics discussions^ Danny Gratzer, Leaving Go^ a b Jared Forsyth, Rust vs. Go^ Janos Dobronszki, Everyday Hassles in Go^ Rob Pike, Less is exponentially more^ The Go Authors, Frequently Asked Questions (FAQ)^ Rob Pike, Generating code^ Richard Hudson, Go 1.4+ Garbage Collection (GC) Plan and Roadmap^ Rob Pike, Strings, bytes, runes and characters in Go, 23 October 2013^ a b Pike, Rob (26 September 2013). "Arrays, slices (and strings): The mechanics of 'append'". The Go Blog. Retrieved 7 March 2015. ^ Andrew Gerrand, Go Slices: usage and internals^ The Go Authors, Effective Go: Slices^ "The Go Programming Language Specification". golang.org. ^ "The Go Programming Language Specification". golang.org. ^ "The Go Programming Language Specification". golang.org. ^ "io - The Go Programming Language". golang.org. ^ SHA-256 test vectors, set 1, vector #8^ "src/net/ip.go - The Go Programming Language". golang.org. ^ "The Go Programming Language Specification". golang.org. ^ "The Go Programming Language Specification". golang.org. ^ reflect.ValueOf(i interface{}) converts an interface{} to a reflect.Value that can be further inspected^ "Go Data Structures: Interfaces". Retrieved 15 November 2012. ^ "The Go Programming Language Specification". golang.org. ^ "Effective Go — Interfaces and methods & Embedding". Google. Retrieved 28 November 2011. ^ "A Tutorial for the Go Programming Language". The Go Programming Language. Google. Retrieved 10 March 2013. In Go the rule about visibility of information is simple: if a name (of a top-level type, function, method, constant or variable, or of a structure field or method) is capitalized, users of the package may see it. Otherwise, the name and hence the thing being named is visible only inside the package in which it is declared. ^ "go - The Go Programming Language". golang.org. ^ "Effective Go". golang.org. ^ Andrew Gerrand, Share memory by communicating^ Andrew Gerrand, Codewalk: Share memory by communicating^ a b Rob Pike, Concurrency is not Parallelism^ The Go Programming Language Specification. This deliberately glosses over some details in the spec: close, channel range expressions, the two-argument form of the receive operator, unidrectional channel types, and so on.^ "Go Concurrency Patterns". golang.org. ^ John Graham-Cumming, Recycling Memory Buffers in Go^ tree.go^ Ewen Cheslack-Postava, Iterators in Go^ "sync - The Go Programming Language". golang.org. ^ Tang, Peiyi (2010). Multi-core parallel programming in Go (PDF). Proc. First International Conference on Advanced Computing and Communications. ^ Nanz, Sebastian; West, Scott; Soares Da Silveira, Kaue. Examining the expert gap in parallel programming (PDF). Euro-Par 2013. CiteSeerX: 10.1.1.368.6137. ^ a b "The Go Memory Model". Google. Retrieved 5 January 2011. ^ Russ Cox, Off to the Races^ Rob Pike (October 25, 2012). "Go at Google: Language Design in the Service of Software Engineering". Google, Inc.  "There is one important caveat: Go is not purely memory safe in the presence of concurrency."^ Brian W. Kernighan, A Descent Into Limbo^ Schmager, Frank; Cameron, Nicholas; Noble, James (2010). GoHotDraw: evaluating the Go programming language with design patterns. Evaluation and Usability of Programming Languages and Tools. ACM. ^ "E2E: Erik Meijer and Robert Griesemer – Going Go". Channel 9. Microsoft. 7 May 2012. ^ Panic And Recover, Go wiki^ "Weekly Snapshot History". golang.org. ^ "Proposal for an exception-like mechanism". golang-nuts. 25 March 2010. Retrieved 25 March 2010. ^ "Effective Go". golang.org. ^ "Effective Go". golang.org. ^ LiteIDE,^ "A Tutorial for the Go Programming Language". golang.org. 16 January 2010. Retrieved 18 January 2010. ^ "Go by Example: Reading Files". gobyexample.com. ^ "os - The Go Programming Language". golang.org. ^ Erik Unger, The Case For Go^ Andrew Gerrand, Four years of Go, The Go Blog^ "dl.google.com: Powered by Go". golang.org. ^ Matt Welsh, Rewriting a Large Production System in Go^ David Symonds, High Performance Apps on Google App Engine^ Patrick Lee, Open Sourcing Our Go Libraries, 7 July 2014.^ John Graham-Cumming, Go at CloudFlare^ John Graham-Cumming, What we've been doing with Go^ Peter Bourgon, Go at SoundCloud^ "Go at Google I/O and Gopher SummerFest - The Go Blog". golang.org. ^ "Chango". GitHub. ^ Author: Tim Jenkins. "How to Convince Your Company to Go With Golang". SendGrid's Email Deliverability Blog. ^ Author: Steven Sacks. "Search & Advances". plug.dj tech blog. ^ Astels, Dave (9 November 2009). "Ready, Set, Go!". engineyard. Retrieved 9 November 2009. ^ Paul, Ryan (10 November 2009). "Go: new open source programming language from Google". Ars Technica. Retrieved 13 November 2009. ^ jt. "Google's Go Wins Programming Language Of The Year Award". jaxenter. Retrieved 5 December 2012. ^ "TIOBE Programming Community Index for June 2015". TIOBE Software. June 2015. Retrieved 5 July 2015. ^ Bruce Eckel (27 August 2011). "Calling Go from Python via JSON-RPC". Retrieved 29 August 2011. ^ Hundt, Robert (2011). Loop recognition in C++/Java/Go/Scala (PDF). Scala Days. ^ Metz, Cade (1 July 2011). "Google Go strikes back with C++ bake-off". The Register. ^ "Gopher". ^ "FAQ — The Go Programming Language". Golang.org. Retrieved 2013-06-25. ^ Claburn, Thomas (11 November 2009). "Google 'Go' Name Brings Accusations Of Evil'". InformationWeek. Retrieved 18 January 2010. ^ "Issue 9 - go — I have already used the name for *MY* programming language". Google Code. Google Inc. Retrieved 12 October 2010.   External links[edit] Wikimedia Commons has media related to Go programming language. Official websiteA Tour of Go (official)Go Programming Language Resources (unofficial)Pike, Rob (28 April 2010). "Another Go at Language Design". Stanford EE Computer Systems Colloquium. Stanford University.  (video) — A university lecture    vte  Google Overview  Alphabet Inc.HistoryList of mergers and acquisitionsProductsCriticismCensorshipDomainsEaster eggsDon't be evil  Advertising  AdMobAdscapeAdSenseAdWordsAnalyticsContributorPartnersDoubleClickDoubleClick for PublishersWallet  Communication  AlertsApps ScriptCalendarContactsFriend ConnectGmail historyinterface Google+GroupsHangoutsInboxSyncText-to-SpeechTranslateTransliterationVoice  Software  Chrome for Androidfor iOSChrome Web StoreAppsExtensions Cloud PrintEarth SkyMoonMars GadgetsGogglesIME PinyinJapanese PhotosKeepNews & WeatherNowPicasaOpenRefineToolbar  Platforms  AccountAndroid version historysoftware developmentAndroid AutoAndroid TVAndroid Wear App EngineApps for Work Classroom AuthenticatorBigTableBodyBooks Library Project CajaCardboardChromecastChrome OS ChromebitChromebookChromeboxChrome Zone Compute EngineContact LensCustom SearchDartEarth EngineFitGlassGoGFSMarketplaceNative ClientNexusOpenSocialPlay BooksGamesMovies & TVMusicNewsstand Public DNSWallet  Development tools  AJAX APIsApp InventorClosure ToolsDevelopersGadgets APIGDataGooglebotGuavaGuiceGWSKMLKytheMapReduceSitemapsStorageSummer of CodeWeb ToolkitSearch ConsoleWebsite OptimizerSwiffy  Publishing  BloggerBookmarksDrive Docs, Sheets, Slides, Forms DomainsFeedBurnerMap MakerMy MapsPanoramioPicasa Web AlbumsSitesYouTube Vevo Zagat  Search (timeline)  ApplianceAudioBlog SearchBooksFinanceFlightsImagesMaps Street View CoverageCompetitionPrivacy concerns  News Archive PatentsScholarShoppingUsenet  Algorithms  PageRankPandaPenguinHummingbird  Features  Web HistoryPersonalizedReal-TimeInstant SearchSafeSearchVoice Search  Analysis  Insights for SearchTrendsKnowledge GraphKnowledge Vault   Discontinued  AardvarkAnswersBrowser SyncBaseBuzzCheckoutChrome FrameClick-to-CallCloud ConnectCode SearchCurrentsDesktopDictionaryDodgeballFast FlipGearsGOOG-411Google TVJaikuKnolHealthiGoogleImage LabelerLabsLatitudeLivelyMashup EditorNotebookOffersOrkutPackPage CreatorPicnikPowerMeterQ & AReaderScript ConverterSearchWikiSidewikiSlideSquaredTalkUpdaterUrchinVideosVideo MarketplaceWaveWeb Accelerator  People  Al GoreAlan EustaceAlan MulallyAmit SinghalAnn MatherDavid DrummondEric SchmidtJeff DeanJohn DoerrJohn L. HennessyKrishna BharatMatt CuttsPatrick PichettePaul OtelliniOmid KordestaniRachel WhetstoneRajen ShethRam ShriramRay KurzweilRuth PoratSalar KamangarShirley M. TilghmanSundar PichaiSusan WojcickiUrs HölzleVint Cerf  Founders  Larry PageSergey Brin   Other  Art ProjectCalicoCurrentChrome ExperimentsCode-inCode JamDeveloper DayGoogle Business GroupsData Liberation Takeout Google Developer ExpertGoogle for WorkDriverless carFiberGoogle ChinaGoogle ExpressGooglizationGrantsGoogle.orgLogoGoogle Doodles 1998–2009201020112012201320142015 Lunar X PrizeMaterial DesignMotorola MobilityVenturesWiFiX  Events  Science FairSearchologyI/ODeveloper DayAtGoogleTalksCode JamHighly Open Participation ContestCode-in  Projects  AraLoonTangoSunroof  Real estate  111 Eighth AvenueGoogleplex   Related  AI ChallengeBombGoojjeMonopoly City StreetsUnity     Category Commons Portal WikiProject Wikiversity       vte  Rob Pike Operating systems  Plan 9 from Bell LabsInferno  Programming languages  NewsqueakLimboGoSawzall  Software  acmeBlitsamrio8?  Publications  The Practice of ProgrammingThe Unix Programming Environment  Other  Renée FrenchMark V. ShaneyUTF-8       vte  Ken Thompson Operating systems  UnixPlan 9 from Bell Labs  Programming languages  BBonGo  Software  BelleedsamSpace TravelThompson shell  Other  UTF-8                       Retrieved from "https://en.wikipedia.org/w/index.php?title=Go_(programming_language)&oldid=677900662"          Categories: C programming language familyConcurrent programming languagesGoogle softwareProcedural programming languagesCross-platform softwareProgramming languages created in 2009American inventionsSoftware using the BSD licenseFree compilers and interpretersStatically typed programming languagesHidden categories: Accuracy disputes from May 2015All accuracy disputesArticles with disputed statements from May 2015Articles containing potentially dated statements from June 2015All articles containing potentially dated statementsCommons category without a link on WikidataArticles prone to spam from June 2013Use dmy dates from August 2011                      Navigation menu                      Personal tools       Create accountLog in                                  Namespaces       ArticleTalk                                      Variants                                                                     Views       ReadEditView history                        More                                                       Search                                                                                     Navigation               Main pageContentsFeatured contentCurrent eventsRandom articleDonate to WikipediaWikipedia store                   Interaction               HelpAbout WikipediaCommunity portalRecent changesContact page                   Tools               What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationWikidata itemCite this page                   Print/export               Create a bookDownload as PDFPrintable version                   Languages               ????????????????ÈeštinaDanskDeutschEspa?ol?????Français??????????ÍslenskaItaliano?????MagyarBahasa MelayuNederlands???Norsk bokm?lPolskiPortugu?s????????????? / srpskiSuomiSvenska?????Türkçe??????????Ti?ng Vi?t??     Edit links                          This page was last modified on 26 August 2015, at 06:24.Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply.  By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.        Privacy policyAbout WikipediaDisclaimersContact WikipediaDevelopersMobile view