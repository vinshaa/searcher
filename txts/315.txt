Process (computing)                    From Wikipedia, the free encyclopedia                            Jump to:     navigation,      search          Not to be confused with Processor (computing).     A list of processes as displayed by htop.   In computing, a process is an instance of a computer program that is being executed. It contains the program code and its current activity. Depending on the operating system (OS), a process may be made up of multiple threads of execution that execute instructions concurrently.[1][2] A computer program is a passive collection of instructions; a process is the actual execution of those instructions. Several processes may be associated with the same program; for example, opening up several instances of the same program often means more than one process is being executed. Multitasking is a method to allow multiple processes to share processors (CPUs) and other system resources. Each CPU executes a single task at a time. However, multitasking allows each processor to switch between tasks that are being executed without having to wait for each task to finish. Depending on the operating system implementation, switches could be performed when tasks perform input/output operations, when a task indicates that it can be switched, or on hardware interrupts. A common form of multitasking is time-sharing. Time-sharing is a method to allow fast response for interactive user applications. In time-sharing systems, context switches are performed rapidly. This makes it seem like multiple processes are being executed simultaneously on the same processor. The execution of multiple processes seemingly simultaneously is called concurrency. For security and reliability, most modern operating systems prevent direct communication between independent processes, providing strictly mediated and controlled inter-process communication functionality.    Contents  1 Representation2 Process management in multi-tasking operating systems 2.1 Process states 3 Inter-process communication4 History5 See also6 Notes7 References8 Further reading9 External links   Representation[edit] In general, a computer system process consists of (or is said to 'own') the following resources: An image of the executable machine code associated with a program.Memory (typically some region of virtual memory); which includes the executable code, process-specific data (input and output), a call stack (to keep track of active subroutines and/or other events), and a heap to hold intermediate computation data generated during run time.Operating system descriptors of resources that are allocated to the process, such as file descriptors (Unix terminology) or handles (Windows), and data sources and sinks.Security attributes, such as the process owner and the process' set of permissions (allowable operations).Processor state (context), such as the content of registers, physical memory addressing, etc. The state is typically stored in computer registers when the process is executing, and in memory otherwise.[1] The operating system holds most of this information about active processes in data structures called process control blocks. Any subset of resource, but typically at least the processor state, may be associated with each of the process' threads in operating systems that support threads or 'daughter' processes. The operating system keeps its processes separated and allocates the resources they need, so that they are less likely to interfere with each other and cause system failures (e.g., deadlock or thrashing). The operating system may also provide mechanisms for inter-process communication to enable processes to interact in safe and predictable ways. Process management in multi-tasking operating systems[edit] Main article: Process management (computing) A multitasking operating system may just switch between processes to give the appearance of many processes executing concurrently or simultaneously, though in fact only one process can be executing at any one time on a single-core CPU (unless using multithreading or other similar technology).[a] It is usual to associate a single process with a main program, and daughter ( or child) processes with any spin-off, parallel processes, which behave like asynchronous subroutines. A process is said to own resources, of which an image of its program (in memory) is one such resource. (Note, however, that in multiprocessing systems, many processes may run off of, or share, the same reentrant program at the same location in memory— but each process is said to own its own image of the program.) Processes are often called "tasks" in embedded operating systems. The sense of "process" (or task) is "something that takes up time", as opposed to 'memory', which is "something that takes up space".[b] The above description applies to both processes managed by an operating system, and processes as defined by process calculi. If a process requests something for which it must wait, it will be blocked. When the process is in the blocked state, it is eligible for swapping to disk, but this is transparent in a virtual memory system, where regions of a process's memory may be really on disk and not in main memory at any time. Note that even unused portions of active processes/tasks (executing programs) are eligible for swapping to disk. All parts of an executing program and its data do not have to be in physical memory for the associated process to be active. Process states[edit] Main article: Process state     The various process states, displayed in a state diagram, with arrows indicating possible transitions between states.   An operating system kernel that allows multi-tasking needs processes to have certain states. Names for these states are not standardised, but they have similar functionality.[1] First, the process is "created" - it is loaded from a secondary storage device (hard disk or CD-ROM...) into main memory. After that the process scheduler assigns it the state "waiting".While the process is "waiting" it waits for the scheduler to do a so-called context switch and load the process into the processor. The process state then becomes "running", and the processor executes the process instructions.If a process needs to wait for a resource (wait for user input or file to open ...), it is assigned the "blocked" state. The process state is changed back to "waiting" when the process no longer needs to wait.Once the process finishes execution, or is terminated by the operating system, it is no longer needed. The process is removed instantly or is moved to the "terminated" state. When removed, it just waits to be removed from main memory.[1][3] Inter-process communication[edit] Main article: Inter-process communication When processes communicate with each other it is called "Inter-process communication" (IPC). Processes frequently need to communicate, for instance in a shell pipeline, the output of the first process need to pass to the second one, and so on to the other process. It is preferred in a well-structured way not using interrupts. It is even possible for the two processes to be running on different machines. The operating system (OS) may differ from one process to the other, therefore some mediator(s) (called protocols) are needed. History[edit] See also: History of operating systems By the early 1960s computer control software had evolved from monitor control software, for example IBSYS, to executive control software. Over time, computers got faster while computer time was still neither cheap nor fully utilized; such an environment made multiprogramming possible and necessary. Multiprogramming means that several programs run "at the same time" or concurrently. At first, more than one program ran on a single processor, as a result of underlying uniprocessor computer architecture, and they shared scarce and limited hardware resources. Multiprogramming is also basic form of multiprocessing, which is a much broader term. Programs consist of sequences of instructions for processors. A single processor can run only one instruction at a time: it is impossible to run more programs at the same time. A program might need some resource, such as an input device, which has a large delay, or a program might start some slow operation, such as sending output to a printer. This would lead to processor being "idle" (unused). To keep the processor busy at all times, the execution of such a program is halted and the operating system switches the processor to run another program. To the user, it will appear that the programs run at the same time (hence the term, concurrent). Shortly thereafter, the notion of a 'program' was expanded to the notion of an 'executing program and its context'. The concept of a process was born. This became necessary with the invention of re-entrant code. Threads came somewhat later. However, with the advent of time-sharing; computer networks; multiple-CPU, shared memory computers; etc., the old "multiprogramming" gave way to true multitasking, multiprocessing and, later, multithreading. See also[edit]  Computing portal   Child processExitForkLightweight processOrphan processParent processProcess groupWaitZombie process  Notes[edit]  ^ Some modern CPUs combine two or more independent processors and can execute several processes simultaneously - see Multi-core for more information. Another technique called simultaneous multithreading (used in Intel's Hyper-threading technology) can simulate simultaneous execution of multiple processes or threads.^ Tasks and processes refer essentially to the same entity. And, although they have somewhat different terminological histories, they have come to be used as synonyms. Today, the term process is generally preferred over task, except when referring to 'multitasking', since the alternative term, 'multiprocessing', is too easy to confuse with multiprocessor (which is a computer with two or more CPUs).  References[edit]  ^ a b c d Silberschatz, Abraham; Cagne, Greg; Galvin, Peter Baer (2004). "Chapter 4 - Processes". Operating system concepts with Java (Sixth ed.). John Wiley & Sons. ISBN 0-471-48905-0. ^ Vahalia, Uresh (1996). "2 - The Process and the Kernel". UNIX Internals - The New Frontiers. Prentice-Hall Inc. ISBN 0-13-101908-2. ^ Stallings, William (2005). Operating Systems: internals and design principles (5th ed.). Prentice Hall. ISBN 0-13-127837-1.  (particularly chapter 3, section 3.2, "process states", including figure 3.9 "process state transition with suspend states")  Further reading[edit] Remzi H. Arpaci-Dusseau and Andrea C. Arpaci-Dusseau (2014). "Operating Systems: Three Easy Pieces". Arpaci-Dusseau Books. Relevant chapters: Abstraction: The Process The Process APIGary D. Knott (1974) A proposal for certain process management and intercommunication primitives ACM SIGOPS Operating Systems Review. Volume 8, Issue 4 (October 1974). pp. 7 – 44 External links[edit] Wikiversity has learning materials about Processes and Threads at Operating Systems/Process and Thread  processlibrary.com - Online Resource For Process Informationfile.net - Computer Process Information Database and Forum    vte  Parallel computing General  Cloud computingHigh-performance computingCluster computingDistributed computingGrid computing  Levels  BitInstructionDataMemoryTask  Multithreading  Temporal multithreadingSimultaneous multithreading Hyper-threading   Theory  PRAM modelAnalysis of parallel algorithmsAmdahl's lawGustafson's lawCost efficiencyKarp–Flatt metricSlowdownSpeedup  Elements  ProcessThreadFiberInstruction window  Coordination  MultiprocessingMemory coherencyCache coherencyCache invalidationBarrierSynchronizationApplication checkpointing  Programming  Models Implicit parallelismExplicit parallelismConcurrency Flynn's taxonomy SISDSIMDMISDMIMD SPMD  ThreadNon-blocking algorithm  Hardware  Multiprocessor SymmetricAsymmetric Memory NUMACOMAdistributedshareddistributed shared MPPSuperscalarVector processorSupercomputerBeowulf cluster  APIs  Ateji PXPOSIX ThreadsOpenMPOpenHMPPOpenACCPVMMPIUPCTBBBoost.ThreadGlobal ArraysCharm++Cilk (Plus)Coarray FortranOpenCLCUDADryadC++ AMPPLINQTPL  Problems  Embarrassingly parallelSoftware lockoutScalabilityRace conditionDeadlockLivelockStarvationDeterministic algorithmParallel slowdown     Category: parallel computing Media related to parallel computing at Wikimedia Commons       vte  Operating system General  AdvocacyComparisonForensic engineeringHistoryHobbyist developmentListTimelineUsage share  Kernel   Architectures   ExokernelHybridMicrokernelMonolithic   Components   Device driverLoadable kernel moduleMicrokernelUser space   Process management   Concepts   Context switchInterruptIPCProcessProcess control blockThreadTime-sharing   Scheduling algorithms   Computer multitaskingFixed-priority preemptiveMultilevel feedback queuePreemptiveRound-robinShortest job next   Memory management and resource protection  Bus errorGeneral protection faultMemory protectionPagingSecurity ringsSegmentation faultVirtual memory  Storage access and file systems  Boot loaderDefragmentationDevice fileFile attributeInodeJournalPartitionVirtual file systemVirtual tape library  List  AmigaOSAndroidBeOSBSDDOSGNU HurdHaikuiOSLinuxMac OSMorphOSOpenVMSOS/2OSvQNXReactOSRISC OSSolarisTPFUnixVM/CMSWindowsz/OSVisi On  Miscellaneous concepts  APIComputer networkHALLive CDLive USBOS shell CLIGUITUIVUI PXE     Authority control  GND: 4235427-4                       Retrieved from "https://en.wikipedia.org/w/index.php?title=Process_(computing)&oldid=666973968"          Categories: Process (computing)Concurrent computingOperating system technologyHidden categories: Wikipedia articles with GND identifiers                      Navigation menu                      Personal tools       Create accountLog in                                  Namespaces       ArticleTalk                                      Variants                                                                     Views       ReadEditView history                        More                                                       Search                                                                                     Navigation               Main pageContentsFeatured contentCurrent eventsRandom articleDonate to WikipediaWikipedia store                   Interaction               HelpAbout WikipediaCommunity portalRecent changesContact page                   Tools               What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationWikidata itemCite this page                   Print/export               Create a bookDownload as PDFPrintable version                   Languages               ????????????????Catal?ÈeštinaDeutsch????????Espa?olEuskara?????Français???HrvatskiBahasa IndonesiaItaliano?????Lietuvi?Nederlands???Norsk bokm?lNorsk nynorskPolskiPortugu?s???????Simple EnglishSlovenèinaSlovenšèina?????? / srpskiSuomiSvenska?????Türkçe??????????????Ti?ng Vi?t??     Edit links                          This page was last modified on 14 June 2015, at 23:49.Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply.  By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.        Privacy policyAbout WikipediaDisclaimersContact WikipediaDevelopersMobile view