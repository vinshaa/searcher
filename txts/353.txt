C++                    From Wikipedia, the free encyclopedia                            Jump to:     navigation,      search          C++ParadigmMulti-paradigm: procedural, functional, object-oriented, generic[1]Designed byBjarne StroustrupFirst appeared1983; 32 years ago (1983)Stable releaseISO/IEC 14882:2014 / December 15, 2014; 8 months ago (2014-12-15)Typing disciplineStatic, nominative, partially inferredImplementation languageC++OSCross-platform (multi-platform)Filename extensions.cc .cpp .cxx .C .c++ .h .hh .hpp .hxx .h++Websiteisocpp.orgMajor implementationsLLVM Clang, GCC, Microsoft Visual C++, Intel C++ CompilerInfluenced byC, Simula, ALGOL 68, Ada, CLU, MLInfluencedPerl, Lua, Ada 95, Java, PHP, D, C99, C#[2]  C++ Programming at Wikibooks  C++ (pronounced as cee plus plus, /?si? pl?s pl?s/) is a general-purpose programming language. It has imperative, object-oriented and generic programming features, while also providing facilities for low-level memory manipulation. It is designed with a bias toward system programming and embedded, resource-constrained and large systems, with performance, efficiency and flexibility of use as its design highlights.[3] C++ has also been found useful in many other contexts, with key strengths being software infrastructure and resource-constrained applications,[3] including desktop applications, servers (e.g. e-commerce, web search or SQL servers), performance-critical applications (e.g. telephone switches or space probes), and entertainment software.[4] C++ is a compiled language, with implementations of it available on many platforms and provided by various organizations, including the FSF, LLVM, Microsoft and Intel. C++ is standardized by the International Organization for Standardization (ISO), with the latest (and current) standard version ratified and published by ISO in December 2014 as ISO/IEC 14882:2014 (informally known as C++14).[5] The C++ programming language was initially standardized in 1998 as ISO/IEC 14882:1998, which was then amended by the C++03, ISO/IEC 14882:2003, standard. The current C++14 standard supersedes these and C++11, with new features and an enlarged standard library. Before the initial standardization in 1998, C++ was developed by Bjarne Stroustrup at Bell Labs since 1979, as an extension of the C language as he wanted an efficient and flexible language similar to C, which also provided high-level features for program organization. Many other programming languages have been influenced by C++, including C#, Java, and newer versions of C (after 1998).    Contents  1 History 1.1 Etymology1.2 Philosophy1.3 Standardization 2 Language 2.1 Object storage 2.1.1 Static storage duration objects2.1.2 Thread storage duration objects2.1.3 Automatic storage duration objects2.1.4 Dynamic storage duration objects 2.2 Templates2.3 Objects 2.3.1 Encapsulation2.3.2 Inheritance 2.4 Operators and operator overloading2.5 Polymorphism 2.5.1 Static polymorphism2.5.2 Dynamic polymorphism 2.5.2.1 Inheritance2.5.2.2 Virtual member functions  2.6 Lambda expressions2.7 Exception handling 3 Standard library4 Compatibility 4.1 With C 5 Criticism6 See also7 References8 Further reading9 External links   History[edit]     Bjarne Stroustrup, the creator of C++   Bjarne Stroustrup, a Danish computer scientist, began his work on C++'s predecessor "C with Classes" in 1979.[6] The motivation for creating a new language originated from Stroustrup's experience in programming for his Ph.D. thesis. Stroustrup found that Simula had features that were very helpful for large software development, but the language was too slow for practical use, while BCPL was fast but too low-level to be suitable for large software development. When Stroustrup started working in AT&T Bell Labs, he had the problem of analyzing the UNIX kernel with respect to distributed computing. Remembering his Ph.D. experience, Stroustrup set out to enhance the C language with Simula-like features.[7] C was chosen because it was general-purpose, fast, portable and widely used. As well as C and Simula's influences, other languages also influenced C++, including ALGOL 68, Ada, CLU and ML. Initially, the class, derived class, strong typing, inlining and default argument features were added to C via Stroustrup's "C with Classes" to C compiler, Cpre.[8] In 1983, it was renamed from C with Classes to C++ ("++" being the increment operator in C). New features were added including virtual functions, function name and operator overloading, references, constants, type-safe free-store memory allocation (new/delete), improved type checking, and BCPL style single-line comments with two forward slashes (//), as well as the development of a proper compiler for C++, Cfront. In 1985, the first edition of The C++ Programming Language was released, which became the definitive reference for the language, as there was not yet an official standard.[9] The first commercial implementation of C++ was released in October of the same year.[6] In 1989, C++ 2.0 was released, followed by the updated second edition of The C++ Programming Language in 1991.[10] New features in 2.0 included multiple inheritance, abstract classes, static member functions, const member functions, and protected members. In 1990, The Annotated C++ Reference Manual was published. This work became the basis for the future standard. Later feature additions included templates, exceptions, namespaces, new casts, and a boolean type. After the 2.0 update, C++ evolved relatively slowly. In 2011, the C++11 standard was released, adding numerous new features, enlarging the standard library further, and providing more facilities to C++ programmers. After a minor C++14 update, released in December 2014, various new additions are planned for 2017. Etymology[edit] According to Stroustrup: "the name signifies the evolutionary nature of the changes from C".[11] This name is credited to Rick Mascitti (mid-1983)[8] and was first used in December 1983. When Mascitti was questioned informally in 1992 about the naming, he indicated that it was given in a tongue-in-cheek spirit. The name stems from C's "++" operator (which increments the value of a variable) and a common naming convention of using "+" to indicate an enhanced computer program. During C++'s development period, the language had been referred to as "new C", then "C with Classes", before acquiring its final name. Philosophy[edit] Throughout C++'s life, its development and evolution has been informally governed by a set of rules that its evolution should follow:[7] It must be driven by actual problems and its features should be useful immediately in real world programs.Every feature should be implementable (with a reasonably obvious way to do so).Programmers should be free to pick their own programming style, and that style should be fully supported by C++.Allowing a useful feature is more important than preventing every possible misuse of C++.It should provide facilities for organising programs into well-defined separate parts, and provide facilities for combining separately developed parts.No implicit violations of the type system (but allow explicit violations; that is, those explicitly requested by the programmer).User-created types need to have the same support and performance as built-in types.Unused features should not negatively impact created executables (e.g. in lower performance).There should be no language beneath C++ (except assembly language).C++ should work alongside other existing programming languages, rather than fostering its own separate and incompatible programming environment.If the programmer's intent is unknown, allow the programmer to specify it by providing manual control. Standardization[edit] YearC++ StandardInformal name1998ISO/IEC 14882:1998[12]C++982003ISO/IEC 14882:2003[13]C++032007ISO/IEC TR 19768:2007[14]C++07/TR12011ISO/IEC 14882:2011[5]C++112014ISO/IEC 14882:2014[15]C++142017to be determinedC++17 C++ is standardized by an ISO working group known as JTC1/SC22/WG21. So far, it has seen five versions of C++ released and is currently working on releasing C++17. In 1998, the ISO working group standardized C++ for the first time as ISO/IEC 14882:1998, which is informally known as C++98. In 2003, it published a new version of the C++ standard called ISO/IEC 14882:2003, which fixed problems identified in C++98. In 2005, a technical report was released, called the "Library Technical Report 1" (TR1). While not an official part of the standard, it proposed a number of extensions to the standard library. The next major revision of the standard was informally referred to as "C++0x", but it was not released until 2011.[16] C++11 (14882:2011) included most of the library enhancements of TR1, as well as many additions to the core language.[5] In 2014, C++14 (also known as C++1y) was released as a small extension to C++11, featuring mainly bug fixes and small improvements.[17] The Draft International Standard ballot procedures completed in mid-August 2014.[18] After C++14, a major revision, informally known as C++17, is planned for 2017.[17] As part of the standardization process, the ISO publishes several kinds of publications. In particular, technical reports and technical specifications are published when "there is the future but not immediate possibility of an agreement to publish an International Standard." Until 2011, three technical reports on C++ were published: TR 19768:2007 (also known as the C++ Technical Report 1) on library extensions mostly integrated into C++11, TR 29124:2010 on special mathematical functions, and TR 24733:2011 on decimal floating point arithmetic. The technical specification DTS 18822:2014 (on file system operations) was approved in early 2015, and more technical specifications are in development and pending approval.[19] Language[edit] The C++ language has two main components: a direct mapping of hardware features provided primarily by the C subset, and zero-overhead abstractions based on those mappings. Stroustrup describes C++ as "a light-weight abstraction programming language [designed] for building and using efficient and elegant abstractions";[3] and "offering both hardware access and abstraction is the basis of C++. Doing it efficiently is what distinguishes it from other languages".[20] C++ inherits most of C's syntax. The following is Bjarne Stroustrup's version of the Hello world program that uses the C++ Standard Library stream facility to write a message to standard output:[21][22]   #include <iostream>  int main() {    std::cout << "Hello, world!\n"; }  Within functions that define a non-void return type, failure to return a value before control reaches the end of the function results in undefined behaviour (compilers typically provide the means to issue a diagnostic in such a case).[23] The sole exception to this rule is the main function, which implicitly returns a value of zero.[24] Object storage[edit] As in C, C++ supports four types of memory management: static storage duration objects, thread storage duration objects, automatic storage duration objects, and dynamic storage duration objects.[25] Static storage duration objects[edit] Static storage duration objects are created before main() is entered (see exceptions below) and destroyed in reverse order of creation after main() exits. The exact order of creation is not specified by the standard (though there are some rules defined below) to allow implementations some freedom in how to organize their implementation. More formally, objects of this type have a lifespan that "shall last for the duration of the program".[26] Static storage duration objects are initialized in two phases. First, "static initialization" is performed, and only after all static initialization is performed, "dynamic initialization" is performed: Static initialization   all objects are first initialized with zeros. After that, all objects that have a constant initialization phase are initialized with the constant expression (i.e. variables initialized with a literal or constexpr). Though it is not specified in the standard, this phase can be completed at compile time and saved in the data partition of the executable.Dynamic initialization   all object initialization that is done via a constructor or function call (unless the function is marked with constexpr, in C++11). The dynamic initialization order is defined as the order of declaration within the compilation unit (i.e. the same file). No guarantees are provided about the order of initialization between compilation units. Thread storage duration objects[edit] Variables of this type are very similar to Static Storage duration objects. The main difference is the creation time is just prior to thread creation and destruction is done after the thread has been joined.[27] Automatic storage duration objects[edit] The most common variable types in C++ are local variables inside a function or block, and temporary variables.[28] The common feature about automatic variables is that they have a lifetime that is limited to the scope of the variable. They are created and potentially initialized at the point of declaration (see below for details) and destroyed in the reverse order of creation when the scope is left. Local variables are created as the point of execution passes the declaration point. If the variable has a constructor or initializer this is used to define the initial state of the object. Local variables are destroyed when the local block or function that they are declared in is closed. C++ destructors for local variables are called at the end of the object lifetime, allowing a discipline for automatic resource management termed RAII, which is widely used in C++. Member variables are created when the parent object is created. Array members are initialized from 0 to the last member of the array in order. Member variables are destroyed when the parent object is destroyed in the reverse order of creation. i.e. If the parent is an "automatic object" then it will be destroyed when it goes out of scope which triggers the destruction of all its members. Temporary variables are created as the result of expression evaluation and are destroyed when the statement containing the expression has been fully evaluated (usually at the ; at the end of a statement). Dynamic storage duration objects[edit] These objects have a dynamic lifespan and are created with new call and destroyed with an explicit call to delete.[29] Templates[edit] See also: Template metaprogramming and Generic programming C++ templates enable generic programming. C++ supports both function and class templates. Templates may be parameterized by types, compile-time constants, and other templates. Templates are implemented by instantiation at compile-time. To instantiate a template, compilers substitute specific arguments for a template's parameters to generate a concrete function or class instance. Some substitutions are not possible; these are eliminated by an overload resolution policy described by the phrase "Substitution failure is not an error" (SFINAE). Templates are a powerful tool that can be used for generic programming, template metaprogramming, and code optimization, but this power implies a cost. Template use may increase code size, because each template instantiation produces a copy of the template code: one for each set of template arguments, however, this is the same or smaller amount of code that would be generated if the code was written by hand.[30] This is in contrast to run-time generics seen in other languages (e.g., Java) where at compile-time the type is erased and a single template body is preserved. Templates are different from macros: while both of these compile-time language features enable conditional compilation, templates are not restricted to lexical substitution. Templates are aware of the semantics and type system of their companion language, as well as all compile-time type definitions, and can perform high-level operations including programmatic flow control based on evaluation of strictly type-checked parameters. Macros are capable of conditional control over compilation based on predetermined criteria, but cannot instantiate new types, recurse, or perform type evaluation and in effect are limited to pre-compilation text-substitution and text-inclusion/exclusion. In other words, macros can control compilation flow based on pre-defined symbols but cannot, unlike templates, independently instantiate new symbols. Templates are a tool for static polymorphism (see below) and generic programming. In addition, templates are a compile time mechanism in C++ that is Turing-complete, meaning that any computation expressible by a computer program can be computed, in some form, by a template metaprogram prior to runtime. In summary, a template is a compile-time parameterized function or class written without knowledge of the specific arguments used to instantiate it. After instantiation, the resulting code is equivalent to code written specifically for the passed arguments. In this manner, templates provide a way to decouple generic, broadly applicable aspects of functions and classes (encoded in templates) from specific aspects (encoded in template parameters) without sacrificing performance due to abstraction. Objects[edit] Main article: C++ classes C++ introduces object-oriented programming (OOP) features to C. It offers classes, which provide the four features commonly present in OOP (and some non-OOP) languages: abstraction, encapsulation, inheritance, and polymorphism. One distinguishing feature of C++ classes compared to classes in other programming languages is support for deterministic destructors, which in turn provide support for the Resource Acquisition is Initialization (RAII) concept. Encapsulation[edit] Encapsulation is the hiding of information to ensure that data structures and operators are used as intended and to make the usage model more obvious to the developer. C++ provides the ability to define classes and functions as its primary encapsulation mechanisms. Within a class, members can be declared as either public, protected, or private to explicitly enforce encapsulation. A public member of the class is accessible to any function. A private member is accessible only to functions that are members of that class and to functions and classes explicitly granted access permission by the class ("friends"). A protected member is accessible to members of classes that inherit from the class in addition to the class itself and any friends. The OO principle is that all of the functions (and only the functions) that access the internal representation of a type should be encapsulated within the type definition. C++ supports this (via member functions and friend functions), but does not enforce it: the programmer can declare parts or all of the representation of a type to be public, and is allowed to make public entities that are not part of the representation of the type. Therefore, C++ supports not just OO programming, but other weaker decomposition paradigms, like modular programming. It is generally considered good practice to make all data private or protected, and to make public only those functions that are part of a minimal interface for users of the class. This can hide the details of data implementation, allowing the designer to later fundamentally change the implementation without changing the interface in any way.[31][32] Inheritance[edit] Inheritance allows one data type to acquire properties of other data types. Inheritance from a base class may be declared as public, protected, or private. This access specifier determines whether unrelated and derived classes can access the inherited public and protected members of the base class. Only public inheritance corresponds to what is usually meant by "inheritance". The other two forms are much less frequently used. If the access specifier is omitted, a "class" inherits privately, while a "struct" inherits publicly. Base classes may be declared as virtual; this is called virtual inheritance. Virtual inheritance ensures that only one instance of a base class exists in the inheritance graph, avoiding some of the ambiguity problems of multiple inheritance. Multiple inheritance is a C++ feature not found in most other languages, allowing a class to be derived from more than one base class; this allows for more elaborate inheritance relationships. For example, a "Flying Cat" class can inherit from both "Cat" and "Flying Mammal". Some other languages, such as C# or Java, accomplish something similar (although more limited) by allowing inheritance of multiple interfaces while restricting the number of base classes to one (interfaces, unlike classes, provide only declarations of member functions, no implementation or member data). An interface as in C# and Java can be defined in C++ as a class containing only pure virtual functions, often known as an abstract base class or "ABC". The member functions of such an abstract base class are normally explicitly defined in the derived class, not inherited implicitly. C++ virtual inheritance exhibits an ambiguity resolution feature called dominance. Operators and operator overloading[edit] Operators that cannot be overloadedOperatorSymbolScope resolution operator::Conditional operator?:dot operator.Member selection operator.*"sizeof" operatorsizeof"typeid" operatortypeid C++ provides more than 35 operators, covering basic arithmetic, bit manipulation, indirection, comparisons, logical operations and others. Almost all operators can be overloaded for user-defined types, with a few notable exceptions such as member access (. and .*) as well as the conditional operator. The rich set of overloadable operators is central to making user-defined types in C++ seem like built-in types. Overloadable operators are also an essential part of many advanced C++ programming techniques, such as smart pointers. Overloading an operator does not change the precedence of calculations involving the operator, nor does it change the number of operands that the operator uses (any operand may however be ignored by the operator, though it will be evaluated prior to execution). Overloaded "&&" and "||" operators lose their short-circuit evaluation property. Polymorphism[edit] See also: Polymorphism in object-oriented programming Polymorphism enables one common interface for many implementations, and for objects to act differently under different circumstances. C++ supports several kinds of static (compile-time) and dynamic (run-time) polymorphisms, supported by the language features described above. Compile-time polymorphism does not allow for certain run-time decisions, while run-time polymorphism typically incurs a performance penalty. Static polymorphism[edit] See also: Parametric polymorphism and ad hoc polymorphism Function overloading allows programs to declare multiple functions having the same name but with different arguments (i.e. ad hoc polymorphism). The functions are distinguished by the number or types of their formal parameters. Thus, the same function name can refer to different functions depending on the context in which it is used. The type returned by the function is not used to distinguish overloaded functions and would result in a compile-time error message. When declaring a function, a programmer can specify for one or more parameters a default value. Doing so allows the parameters with defaults to optionally be omitted when the function is called, in which case the default arguments will be used. When a function is called with fewer arguments than there are declared parameters, explicit arguments are matched to parameters in left-to-right order, with any unmatched parameters at the end of the parameter list being assigned their default arguments. In many cases, specifying default arguments in a single function declaration is preferable to providing overloaded function definitions with different numbers of parameters. Templates in C++ provide a sophisticated mechanism for writing generic, polymorphic code (i.e. parametric polymorphism). In particular, through the Curiously Recurring Template Pattern, it's possible to implement a form of static polymorphism that closely mimics the syntax for overriding virtual functions. Because C++ templates are type-aware and Turing-complete, they can also be used to let the compiler resolve recursive conditionals and generate substantial programs through template metaprogramming. Contrary to some opinion, template code will not generate a bulk code after compilation with the proper compiler settings.[30] Dynamic polymorphism[edit] Inheritance[edit] See also: Subtyping Variable pointers (and references) to a base class type in C++ can refer to objects of any derived classes of that type in addition to objects exactly matching the variable type. This allows arrays and other kinds of containers to hold pointers to objects of differing types. Because assignment of values to variables usually occurs at run-time, this is necessarily a run-time phenomenon. C++ also provides a dynamic_cast operator, which allows the program to safely attempt conversion of an object into an object of a more specific object type (as opposed to conversion to a more general type, which is always allowed). This feature relies on run-time type information (RTTI). Objects known to be of a certain specific type can also be cast to that type with static_cast, a purely compile-time construct that has no runtime overhead and does not require RTTI. Virtual member functions[edit] Ordinarily, when a function in a derived class overrides a function in a base class, the function to call is determined by the type of the object. A given function is overridden when there exists no difference in the number or type of parameters between two or more definitions of that function. Hence, at compile time, it may not be possible to determine the type of the object and therefore the correct function to call, given only a base class pointer; the decision is therefore put off until runtime. This is called dynamic dispatch. Virtual member functions or methods[33] allow the most specific implementation of the function to be called, according to the actual run-time type of the object. In C++ implementations, this is commonly done using virtual function tables. If the object type is known, this may be bypassed by prepending a fully qualified class name before the function call, but in general calls to virtual functions are resolved at run time. In addition to standard member functions, operator overloads and destructors can be virtual. As a rule of thumb, if any function in the class is virtual, the destructor should be as well. As the type of an object at its creation is known at compile time, constructors, and by extension copy constructors, cannot be virtual. Nonetheless a situation may arise where a copy of an object needs to be created when a pointer to a derived object is passed as a pointer to a base object. In such a case, a common solution is to create a clone() (or similar) virtual function that creates and returns a copy of the derived class when called. A member function can also be made "pure virtual" by appending it with = 0 after the closing parenthesis and before the semicolon. A class containing a pure virtual function is called an abstract data type. Objects cannot be created from abstract data types; they can only be derived from. Any derived class inherits the virtual function as pure and must provide a non-pure definition of it (and all other pure virtual functions) before objects of the derived class can be created. A program that attempts to create an object of a class with a pure virtual member function or inherited pure virtual member function is ill-formed. Lambda expressions[edit] C++ provides support for anonymous functions, which are also known as lambda expressions. A lambda expression has the following form:   [capture](parameters) -> return_type { function_body }  The [capture] list supports the definition of closures. Such lambda expressions are defined in the standard as syntactic sugar for an unnamed function object. An example lambda function may be defined as follows:   [](int x, int y) -> int { return x + y; }  Exception handling[edit] Exception handling is used to communicate the existence of a runtime problem or error from where it was detected to where the issue can be handled.[34] It permits this to be done in a uniform manner and separately from the main code, while detecting all errors.[35] Should an error occur, an exception is thrown (raised), which is then caught by the nearest suitable exception handler. The exception causes the current scope to be exited, and also each outer scope (propagation) until a suitable handler is found, calling in turn the destructors of any objects in these exited scopes.[36] At the same time, an exception is presented as an object carrying the data about the detected problem.[37] The exception-causing code is placed inside a try block. The exceptions are handled in separate catch blocks (the handlers); each try block can have multiple exception handlers, as it is visible in the example below.[38]   #include <iostream> #include <vector>  int main() {     try {         std::vector<int> vec{3,4,3,1};         int i{vec.at(4)}; // Throws an exception, std::out_of_range (indexing for vec is from 0-3 not 1-4)     }      // An exception handler, catches std::out_of_range, which is thrown by vec.at(4)     catch (std::out_of_range& e) {         std::cerr << "Accessing a non-existent element: " << e.what() << '\n';     }      // To catch any other standard library exceptions (they derive from std::exception)     catch (std::exception& e) {         std::cerr << "Exception thrown: " << e.what() << '\n';     }      // Catch any unrecognised exceptions (i.e. those which don't derive from std::exception)     catch (...) {         std::cerr << "Some fatal error\n";     } }  In some cases exceptions cannot be used, for technical reasons. One such example is a critical component of an embedded system, where every operation must be guaranteed to complete within a specified amount of time. This cannot be determined with exceptions as no tools exist to determine the minimum time required for an exception to be handled.[39] Standard library[edit] The C++ standard consists of two parts: the core language and the C++ Standard Library. C++ programmers expect the latter on every major implementation of C++; it includes vectors, lists, maps, algorithms (find, for_each, binary_search, random_shuffle, etc.), sets, queues, stacks, arrays, tuples, input/output facilities (iostream, for reading from and writing to the console and files), smart pointers for automatic memory management, regular expression support, multi-threading library, atomics support (allowing a variable to be read or written to be at most one thread at a time without any external synchronisation), time utilities (measurement, getting current time, etc.), a system for converting error reporting that doesn't use C++ exceptions into C++ exceptions, a random number generator and a slightly modified version of the C standard library (to make it comply with the C++ type system). A large part of the C++ library is based on the Standard Template Library (STL). Useful tools provided by the STL include containers as the collections of objects (such as vectors and lists), iterators that provide array-like access to containers, and algorithms that perform operations such as searching and sorting. Furthermore, (multi)maps (associative arrays) and (multi)sets are provided, all of which export compatible interfaces. Therefore, using templates it is possible to write generic algorithms that work with any container or on any sequence defined by iterators. As in C, the features of the library are accessed by using the #include directive to include a standard header. C++ provides 105 standard headers, of which 27 are deprecated. The standard incorporates the STL that was originally designed by Alexander Stepanov, who experimented with generic algorithms and containers for many years. When he started with C++, he finally found a language where it was possible to create generic algorithms (e.g., STL sort) that perform even better than, for example, the C standard library qsort, thanks to C++ features like using inlining and compile-time binding instead of function pointers. The standard does not refer to it as "STL", as it is merely a part of the standard library, but the term is still widely used to distinguish it from the rest of the standard library (input/output streams, internationalization, diagnostics, the C library subset, etc.). Most C++ compilers, and all major ones, provide a standards conforming implementation of the C++ standard library. Compatibility[edit] To give compiler vendors greater freedom, the C++ standards committee decided not to dictate the implementation of name mangling, exception handling, and other implementation-specific features. The downside of this decision is that object code produced by different compilers is expected to be incompatible. There were, however, attempts to standardize compilers for particular machines or operating systems (for example C++ ABI),[40] though they seem to be largely abandoned now. With C[edit] For more details on this topic, see Compatibility of C and C++. C++ is often considered to be a superset of C, but this is not strictly true.[41] Most C code can easily be made to compile correctly in C++, but there are a few differences that cause some valid C code to be invalid or behave differently in C++. For example, C allows implicit conversion from void* to other pointer types, but C++ does not (for type safety reasons). Also, C++ defines many new keywords, such as new and class, which may be used as identifiers (for example, variable names) in a C program. Some incompatibilities have been removed by the 1999 revision of the C standard (C99), which now supports C++ features such as line comments (//), and declarations mixed with code. On the other hand, C99 introduced a number of new features that C++ did not support, were incompatible or redundant in C++, such as variable-length arrays, native complex-number types (however, the std::complex class in the C++ standard library is closely compatible), designated initializers, compound literals, and the restrict keyword.[42] Some of the C99-introduced features were included in the subsequent version of the C++ standard, C++11 (out of those which were not redundant).[43][44][45] To intermix C and C++ code, any function declaration or definition that is to be called from/used both in C and C++ must be declared with C linkage by placing it within an extern "C" {/*...*/} block. Such a function may not rely on features depending on name mangling (i.e., function overloading). Criticism[edit] Despite its widespread adoption, many programmers have criticized the C++ language, including Linus Torvalds,[46] Richard Stallman,[47] and Ken Thompson.[48] Some aspects of C++ that are often criticized are its exception handling, slow compilation times, and unnecessary complexity.[49] See also[edit]  Computer programming portal  Bjarne StroustrupC++ Standard LibraryComparison of programming languagesInternational Organization for StandardizationList of C++ compilersOutline of C++The C++ Programming Language References[edit]  ^ Stroustrup, Bjarne (1997). "1". The C++ Programming Language (Third ed.). ISBN 0-201-88954-4. OCLC 59193992. ^ Naugler, David (May 2007). "C# 2.0 for C++ and Java programmer: conference workshop". Journal of Computing Sciences in Colleges 22 (5). Although C# has been strongly influenced by Java it has also been strongly influenced by C++ and is best viewed as a descendant of both C++ and Java. ^ a b c Stroustrup, B. (May 6, 2014). "Lecture:The essence of C++. University of Edinburgh.". Retrieved June 12, 2015. ^ Stroustrup, Bjarne (17 February 2014). "C++ Applications". stroustrup.com. Retrieved 5 May 2014. ^ a b c "ISO/IEC 14882:2011". International Organization for Standardization. ^ a b Stroustrup, Bjarne (7 March 2010). "Bjarne Stroustrup's FAQ: When was C++ invented?". stroustrup.com. Retrieved 16 September 2010. ^ a b Stroustrup, Bjarne. "Evolving a language in and for the real world: C++ 1991-2006" (PDF). ^ a b Stroustrup, Bjarne. "A History of C ++ : 1979? 1991" (PDF). ^ Stroustrup, Bjarne. "The C++ Programming Language" (First ed.). Retrieved 16 September 2010. ^ Stroustrup, Bjarne. "The C++ Programming Language" (Second ed.). Retrieved 16 September 2010. ^ "Bjarne Stroustrup's FAQ  Where did the name "C++" come from?". Retrieved 16 January 2008. ^ "ISO/IEC 14882:1998". International Organization for Standardization. ^ "ISO/IEC 14882:2003". International Organization for Standardization. ^ "ISO/IEC TR 19768:2007". International Organization for Standardization. ^ "ISO/IEC 14882:2014". International Organization for Standardization. ^ "We have an international standard: C++0x is unanimously approved". Sutter's Mill. ^ a b "The Future of C++". ^ "We have C++14! : Standard C++". ^ See a list at http://en.cppreference.com/w/cpp/experimental Visited 2015-01-05.^ B. Stroustrup (interviewed by Sergio De Simone) (April 30, 2015). "Stroustrup: Thoughts on C++17 - An Interview". Retrieved July 8, 2015. ^ Stroustrup, Bjarne (2000). The C++ Programming Language (Special ed.). Addison-Wesley. p. 46. ISBN 0-201-70073-5. ^ Stroustrup, Bjarne. "Open issues for The C++ Programming Language (3rd Edition)". This code is copied directly from Bjarne Stroustrup's errata page (p. 633). He addresses the use of '\n' rather than std::endl. Also see Can I write "void main()"? for an explanation of the implicit return 0; in the main function. This implicit return is not available in other functions. ^ ISO/IEC (2003). ISO/IEC 14882:2003(E): Programming Languages  C++ §6.6.3 The return statement [stmt.return] para. 2^ ISO/IEC (2003). ISO/IEC 14882:2003(E): Programming Languages  C++ §3.6.1 Main function [basic.start.main] para. 5^ ISO/IEC. Programming Languages  C++11 Draft (n3797) §3.7 Storage duration [basic.stc]^ ISO/IEC. Programming Languages  C++11 Draft (n3797) §3.7.1 Static Storage duration [basic.stc.static]^ ISO/IEC. Programming Languages  C++11 Draft (n3797) §3.7.2 Thread Storage duration [basic.stc.thread]^ ISO/IEC. Programming Languages  C++11 Draft (n3797) §3.7.3 Automatic Storage duration [basic.stc.auto]^ ISO/IEC. Programming Languages  C++11 Draft (n3797) §3.7.4 Dynamic Storage duration basic.stc.dynamic^ a b "Nobody Understands C++: Part 5: Template Code Bloat". http://blog.emptycrate.com/: EmptyCrate Software. Travel. Stuff. 6 May 2008. Retrieved 8 March 2010. On occasion you will read or hear someone talking about C++ templates causing code bloat. I was thinking about it the other day and thought to myself, "self, if the code does exactly the same thing then the compiled code cannot really be any bigger, can it?" [...] And what about compiled code size? Each were compiled with the command g++ <filename>.cpp -O3. Non-template version: 8140 bytes, template version: 8028 bytes! ^ Sutter, Herb; Alexandrescu, Andrei (2004). C++ Coding Standards: 101 Rules, Guidelines, and Best Practices. Addison-Wesley. ^ Henricson, Mats; Nyquist, Erik (1997). Industrial Strength C++. Prentice Hall. ISBN 0-13-120965-5. ^ Stroustrup, Bjarne (2000). The C++ Programming Language (Special ed.). Addison-Wesley. p. 310. ISBN 0-201-70073-5. A virtual member function is sometimes called a method. ^ Mycroft, Alan (2013). "C and C++ Exceptions | Templates" (PDF). Cambridge Computer Laboratory - Course Materials 2013-14. Retrieved July 2014. ^ Stroustrup, Bjarne (2013). The C++ Programming Language. Addison Wesley. p. 345. ISBN 9780321563842. ^ Stroustrup, Bjarne (2013). The C++ Programming Language. Addison Wesley. pp. 363365. ISBN 9780321563842. ^ Stroustrup, Bjarne (2013). The C++ Programming Language. Addison Wesley. pp. 345, 363. ISBN 9780321563842. ^ Stroustrup, Bjarne (2013). The C++ Programming Language. Addison Wesley. pp. 344, 370. ISBN 9780321563842. ^ Stroustrup, Bjarne (2013). The C++ Programming Language. Addison Wesley. p. 349. ISBN 9780321563842. ^ "C++ ABI Summary". 20 March 2001. Retrieved 30 May 2006. ^ "Bjarne Stroustrup's FAQ  Is C a subset of C++?". Retrieved 5 May 2014. ^ "C9X  The New C Standard". Retrieved 27 December 2008. ^ "C++0x Support in GCC". Retrieved 12 October 2010. ^ "C++0x Core Language Features In VC10: The Table". Retrieved 12 October 2010. ^ "Clang - C++98, C++11, and C++14 Status". Clang.llvm.org. 2013-05-12. Retrieved 2013-06-10. ^ "Re: [RFC] Convert builin-mailinfo.c to use The Better String Library" (Mailing list). 2007-09-06. Retrieved 2015-03-31. ^ "Re: Efforts to attract more users?" (Mailing list). 2010-07-12. Retrieved 2015-03-31. ^ Andrew Binstock (18 May 2011). "Dr. Dobb's: Interview with Ken Thompson". Retrieved 7 February 2014. ^ "Why should I [sic] have written ZeroMQ in C, not C++".   Further reading[edit]  Abrahams, David; Gurtovoy, Aleksey. C++ Template Metaprogramming: Concepts, Tools, and Techniques from Boost and Beyond. Addison-Wesley. ISBN 0-321-22725-5. Alexandrescu, Andrei (2001). Modern C++ Design: Generic Programming and Design Patterns Applied. Addison-Wesley. ISBN 0-201-70431-5. Alexandrescu, Andrei; Sutter, Herb (2004). C++ Design and Coding Standards: Rules and Guidelines for Writing Programs. Addison-Wesley. ISBN 0-321-11358-6. Becker, Pete (2006). The C++ Standard Library Extensions : A Tutorial and Reference. Addison-Wesley. ISBN 0-321-41299-0. Brokken, Frank (2010). C++ Annotations. University of Groningen. ISBN 90-367-0470-7. Coplien, James O. (1994) [reprinted with corrections, original year of publication 1992]. Advanced C++: Programming Styles and Idioms. ISBN 0-201-54855-0. Dewhurst, Stephen C. (2005). C++ Common Knowledge: Essential Intermediate Programming. Addison-Wesley. ISBN 0-321-32192-8. Information Technology Industry Council (15 October 2003). Programming languages  C++ (Second ed.). Geneva: ISO/IEC. 14882:2003(E). Josuttis, Nicolai M. (2012). The C++ Standard Library, A Tutorial and Reference (Second ed.). Addison-Wesley. ISBN 0-321-62321-5. Koenig, Andrew; Moo, Barbara E. (2000). Accelerated C++  Practical Programming by Example. Addison-Wesley. ISBN 0-201-70353-X. Lippman, Stanley B.; Lajoie, Josée; Moo, Barbara E. (2011). C++ Primer (Fifth ed.). Addison-Wesley. ISBN 0-470-93244-9. Lippman, Stanley B. (1996). Inside the C++ Object Model. Addison-Wesley. ISBN 0-201-83454-5. Meyers, Scott (2005). Effective C++ (Third ed.). Addison-Wesley. ISBN 0-321-33487-6. Stroustrup, Bjarne (2000). The C++ Programming Language (Special ed.). Addison-Wesley. ISBN 0-201-70073-5. Stroustrup, Bjarne (1994). The Design and Evolution of C++. Addison-Wesley. ISBN 0-201-54330-3. Stroustrup, Bjarne (2009). Programming Principles and Practice Using C++. Addison-Wesley. ISBN 0-321-54372-6. Sutter, Herb (2001). More Exceptional C++: 40 New Engineering Puzzles, Programming Problems, and Solutions. Addison-Wesley. ISBN 0-201-70434-X. Sutter, Herb (2004). Exceptional C++ Style. Addison-Wesley. ISBN 0-201-76042-8. Vandevoorde, David; Josuttis, Nicolai M. (2003). C++ Templates: The complete Guide. Addison-Wesley. ISBN 0-201-73484-2.   External links[edit]  Find more about C++ at Wikipedia's sister projects Definitions from WiktionaryMedia from CommonsQuotations from WikiquoteTextbooks from WikibooksLearning resources from Wikiversity Wikibooks has a book on the topic of: More C++ Idioms JTC1/SC22/WG21   the ISO/IEC C++ Standard Working Group n3242.pdf   last publicly available Committee Draft of "ISO/IEC IS 14882   Programming Languages   C++" (28 February 2011)n3337.pdf   first draft after the C++11 standard, contains the C++11 standard plus minor editorial changes. Standard C++ Foundation   a non-profit organization that promotes the use and understanding of standard C++. Bjarne Stroustrup is a director of the organizationA paper by Stroustrup showing the timeline of C++ evolution (19912006)Bjarne Stroustrup's C++ Style and Technique FAQC++ FAQ Lite by Marshall ClineHamilton, Naomi (25 June 2008). "The A-Z of Programming Languages: C++". Computerworld.    an interview with Bjarne StroustrupKalev, Danny (15 August 2008). "The State of the Language: An Interview with Bjarne Stroustrup". DevX (QuinStreet Inc.). Katdare, Kaustubh (1 February 2008). "Dr. Bjarne Stroustrup  Inventor of C++". CrazyEngineers. Stroustrup, Bjarne (8 April 2015). "Computer History Museum: Oral History of Bjarne Stroustrup". Code practices for not breaking binary compatibility between releases of C++ libraries (from the KDE techbase)Optimizing software in C++   an optimization guide for Windows, Linux and Mac platforms, by Agner Fog    vte  ISO standards by standard number  List of ISO standards / ISO romanizations / IEC standards 19999  123456791631 -0-1-2-3-4-5-6-7-8-9-10-11-12-13 128216217226228233259269302306428518519639 -1-2-3-5-6 6466907327648438989651000100410071073-114131538174519892014201520222047210821452146224022812709271127882852302931033166 -1-2-3 329733073602386439013977403141574217490952185428577557765800596461666344634663856425642964386523670970017002709871857200749877367810781178127813781680008178821785718583860186328652869188078820-58859 -1-2-3-4-5-6-7-8-8-I-9-10-11-12-13-14-15-16 88799000/90019075912692939241936294079506952995649594966098979945998499859995  1000019999  100061011610118-310160101611016510179102061021810303 -11-21-22-28-238 10383104871058510589106461066410746108611095710962109671107311170111791140411544117831178411785118011189811940 (-2)1194111941 (TR)1199212006121821220712234-213211 -1-2 13216132501339913406-2134071345013485134901356713568135841361614000140311422414289143961444314496 -2-3-6-10-11-12-14-17-20 14644 -1-2-3-4-5-6-7-8-9 146491465114698 -2 147501476414882149711502215189152881529115292153981540815444 -3 15445154381550415511156861569315706 -2 157071589715919159241592615926 WIP15930160231626216612-21675016949 (TS)1702417025172031736917799180001800418014182451862918916190051901119092 (-1-2)1911419115191251913619439195001950119502195031950519506195071950819509195101960019752197571977019775-119794-519831  20000+  20000200222012121000210472150021827:20022200023270232712336024517246132461724707251782596426000263002632427000 series2700027001:200527001:2013270022700327004270052700627007277292779928000291102914829199-22950030170310003200038500405004201080000 -1-2-3-4-5-6-7-8-9-10-11-12-13-14    Categories  ISO standards ISO 639ISO 3166 ISO / IEC standardsOSI protocols   All articles with prefix "ISO"      vte  Programming languages   ComparisonTimeline    AssemblyBashBASICCC++C#COBOLFortranJavaJavaScript (JS)LispPascalPerlPHPPythonRubySmalltalkVisual Basic .NET (VB.NET)more...     Category Comparison Lists AlphabeticalCategoricalGenerationalNon-English-based        vte  C++   C++C++98C++03C++11C++14C++17  C++ features  ClassesException handlingFunction overloadingOperator overloadingOperatorsTemplates  C++ Standard Library  I/O StreamsSmart pointersSTLStrings  Compilers  Comparison of C++ compilersBorland C++Borland Turbo C++C++BuilderClangGCCIntel C++ CompilerVisual C++Watcom C/C++  IDEs  Comparison of C IDEsAnjutaCLionCode::BlocksCodeLiteEclipseGeanyMicrosoft Visual StudioNetBeans  C++ and other languages  Compatibility of C and C++Comparison of C++ and JavaComparison of C++ and ALGOL 68Comparison of programming languages     Category     Authority control  GND: 4193909-8                       Retrieved from "https://en.wikipedia.org/w/index.php?title=C%2B%2B&oldid=676626644"          Categories: C++Algol programming language familyC++ programming language familyClass-based programming languagesCross-platform softwareObject-oriented programming languagesProgramming languages created in 1983Statically typed programming languagesProgramming languages with an ISO standardHidden categories: Use dmy dates from January 2012Wikipedia articles with GND identifiers                      Navigation menu                      Personal tools       Create accountLog in                                  Namespaces       ArticleTalk                                      Variants                                                                     Views       ReadEditView history                        More                                                       Search                                                                                     Navigation               Main pageContentsFeatured contentCurrent eventsRandom articleDonate to WikipediaWikipedia store                   Interaction               HelpAbout WikipediaCommunity portalRecent changesContact page                   Tools               What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationWikidata itemCite this page                   Print/export               Create a bookDownload as PDFPrintable version                   Languages               Afrikaans???????AragonésAz?rbaycanca????????????????????????? (???????????)??????????BosanskiBrezhonegCatal????????ÈetinaDanskDeutschEesti????????Espa?olEsperantoEuskara?????FrançaisGaeilgeGalego?????????????????????????HrvatskiBahasa IndonesiaInterlinguaÍslenskaItaliano?????Basa Jawa??????????????????????LatinaLatvieuLëtzebuergeschLietuvi?Magyar?????????????????????????Bahasa Melayu????????????????Nederlands????? ???????Norsk bokm?lNorsk nynorskOccitanO?zbekcha/?????????????Pälzisch??????PolskiPortugu?sQaraqalpaqshaRomânã??????????? ????ScotsShqip?????Simple EnglishSlovenèinaSlovenèina?????? / srpskiSrpskohrvatski / ??????????????SuomiSvenska??????????????TürkçeTürkmençe?? ??????????????Ti?ng Vi?tWinaray????????Yor?bá??emait?ka??     Edit links                          This page was last modified on 18 August 2015, at 05:13.Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply.  By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.        Privacy policyAbout WikipediaDisclaimersContact WikipediaDevelopersMobile view