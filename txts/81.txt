Cross-origin resource sharing                    From Wikipedia, the free encyclopedia                            Jump to:     navigation,      search          Cross-origin resource sharing (CORS) is a mechanism that allows restricted resources (e.g. fonts, JavaScript, etc.) on a web page to be requested from another domain outside the domain from which the resource originated.[1] A web page may freely embed images, stylesheets, scripts, iframes, videos and some plugin content (such as Adobe Flash) from any other domain. However embedded web fonts and AJAX (XMLHttpRequest) requests have traditionally been limited to accessing the same domain as the parent web page (as per the same-origin security policy). "Cross-domain" AJAX requests are forbidden by default because of their ability to perform advanced requests (POST, PUT, DELETE and other types of HTTP requests, along with specifying custom HTTP headers) that introduce many cross-site scripting security issues. CORS defines a way in which a browser and server can interact to safely determine whether or not to allow the cross-origin request.[2] It allows for more freedom and functionality than purely same-origin requests, but is more secure than simply allowing all cross-origin requests. It is a recommended standard of the W3C.[3]    Contents  1 How CORS works2 Simple example3 Preflight example4 Headers 4.1 Request headers4.2 Response headers 5 Browser support6 History7 CORS vs JSONP8 See also9 References10 External links   How CORS works[edit] The CORS standard describes new HTTP headers which provide browsers and servers a way to request remote URLs only when they have permission. Although some validation and authorization can be performed by the server, it is generally the browser's responsibility to support these headers and respect the restrictions they impose. For AJAX and HTTP request methods that can modify data (usually HTTP methods other than GET, or for POST usage with certain MIME types), the specification mandates that browsers "preflight" the request, soliciting supported methods from the server with an HTTP OPTIONS request header, and then, upon "approval" from the server, sending the actual request with the actual HTTP request method. Servers can also notify clients whether "credentials" (including Cookies and HTTP Authentication data) should be sent with requests.[4]  Simple example[edit] This is generally not appropriate when using the same-origin security policy. When a CORS-compatible browser attempts to make a cross-origin request: The browser sends the request with an Origin HTTP header. The value of this header is the domain that served the parent page. When a page from http://www.foo.com attempts to access a user's data in bar.com, the following request header would be sent to bar.com:  Origin: http://www.foo.com The server may respond with: An Access-Control-Allow-Origin (ACAO) header in its response indicating which origin sites are allowed. For example:  Access-Control-Allow-Origin: http://www.foo.com An error page if the server does not allow the cross-origin requestAn Access-Control-Allow-Origin (ACAO) header with a wildcard that allows all domains:  Access-Control-Allow-Origin: *   A wildcard same-origin policy is appropriate when a page or API response is considered completely public content and it is intended to be accessible to everyone, including any code on any site. For example a freely-available web fonts on public hosting services like Google Fonts. A wildcard same-origin policy is also widely and appropriately used in the object-capability model, where pages have unguessable URLs and are meant to be accessible to anyone who knows the secret. The value of "*" is special in that it does not allow requests to supply credentials, meaning HTTP authentication, client-side SSL certificates, nor does it allow cookies to be sent.[5] Note that in the CORS architecture, the ACAO header is being set by the external web service (bar.com), not the original web application server (foo.com). CORS allows the external web service to authorise the web application to use its services and does not control external services accessed by the web application. For the latter, Content Security Policy should be used (connect-src directive). Preflight example[edit] When performing certain types of cross-domain AJAX requests, modern browsers that support CORS will insert an extra "preflight" request to determine whether they have permission to perform the action.  OPTIONS / Host: bar.com Origin: http://foo.com  If bar.com is willing to accept the action, it may respond with the following headers:  Access-Control-Allow-Origin: http://foo.com Access-Control-Allow-Methods: PUT, DELETE  Headers[edit] The HTTP headers that relate to CORS are: Request headers[edit] OriginAccess-Control-Request-MethodAccess-Control-Request-Headers Response headers[edit] Access-Control-Allow-OriginAccess-Control-Allow-CredentialsAccess-Control-Expose-HeadersAccess-Control-Max-AgeAccess-Control-Allow-MethodsAccess-Control-Allow-Headers Browser support[edit] CORS is supported by all browsers based on the following layout engines: Gecko 1.9.1 (Firefox 3.5,[6] SeaMonkey 2.0,[7] Camino 2.1[8]) and above.WebKit (Initial revision uncertain, Safari 4 and above,[1] Google Chrome 3 and above, possibly earlier)[9]MSHTML/Trident 6.0 (Internet Explorer 10) has native support.[10] MSHTML/Trident 4.0 & 5.0 (Internet Explorer 8 & 9) provide partial support via the XDomainRequest object.[1]Presto-based browsers (Opera) implement CORS as of Opera 12.00[11] and Opera Mobile 12, but not Opera Mini.[12] The following browsers are also noteworthy in their lack of CORS support: Camino does not implement CORS in the 2.0.x release series because these versions are based on Gecko 1.9.0.[13]As of version 0.10.2, Arora exposes WebKit's CORS-related APIs, but attempted cross-origin requests will fail.[14] History[edit] Cross-origin support was originally proposed by Matt Oshry, Brad Porter, and Michael Bodell of Tellme Networks in March 2004 for inclusion in VoiceXML 2.1[15] to allow safe cross-origin data requests by VoiceXML browsers. The mechanism was deemed general in nature and not specific to VoiceXML and was subsequently separated into an implementation NOTE.[16] The WebApps Working Group of the W3C with participation from the major browser vendors began to formalize the NOTE into a W3C Working Draft on track toward formal W3C Recommendation status. In May 2006 the first W3C Working Draft was submitted.[17] In March 2009 the draft was renamed to "Cross-Origin Resource Sharing" [18] and in January 2014 it was accepted as a W3C Recommendation.[19] CORS vs JSONP[edit] CORS can be used as a modern alternative to the JSONP pattern. While JSONP supports only the GET request method, CORS also supports other types of HTTP requests. Using CORS enables a web programmer to use regular XMLHttpRequest, which supports better error handling than JSONP. On the other hand, JSONP works on legacy browsers which predate CORS support. CORS is supported by most modern web browsers. Also, while JSONP can cause cross-site scripting (XSS) issues where the external site is compromised, CORS allows websites to manually parse responses to ensure security.[2][20] See also[edit] JSONPCross-document messaging References[edit]  ^ a b c on July 6, 2009 by Arun Ranganathan (2009-07-06). "cross-site xmlhttprequest with CORS ? Mozilla Hacks – the Web developer blog". Hacks.mozilla.org. Retrieved 2012-07-05. ^ a b "Cross-domain Ajax with Cross-Origin Resource Sharing". NCZOnline. Retrieved 2012-07-05. ^ http://www.w3.org/TR/cors/^ "cross-site xmlhttprequest with CORS". MOZILLA. Retrieved 2012-09-05. ^ Cross-Origin Resource Sharing. W3.org. Retrieved on 2014-04-12.^ "HTTP access control (CORS) - MDN". Developer.mozilla.org. Retrieved 2012-07-05. ^ "Gecko - MDN". Developer.mozilla.org. 2012-06-08. Retrieved 2012-07-05. ^ "What makes Camino Special". Retrieved 2013-02-20. ^ "59940: Apple Safari WebKit Cross-Origin Resource Sharing Bypass". Osvdb.org. Retrieved 2012-07-05. ^ Tony Ross, Program Manager, Internet Explorer (2012-02-09). "CORS for XHR in IE10". MSDN. Retrieved 2012-12-14. ^ David Honneffer, Documentation Specialist (2012-06-14). "12.00 for UNIX Changelog". Opera. Retrieved 2012-07-05. ^ David Honneffer, Documentation Specialist (2012-04-23). "Opera Software: Web specifications support in Opera Presto 2.10". Opera.com. Retrieved 2012-07-05. ^ "HTTP Access Control in Camino • mozillaZine Forums". Forums-test.mozillazine.org. Retrieved 2012-07-05. ^ "Issue 904 - arora - Arora providing API for CORS (Cross-Origin Resource Sharing) but fails in actual use - Cross Platform WebKit Browser - Google Project Hosting". Code.google.com. 2010-09-04. Retrieved 2012-07-05. ^ "Voice Extensible Markup Language (VoiceXML) 2.1". W3.org. 2004-03-23. Retrieved 2012-07-05. ^ "Authorizing Read Access to XML Content Using the <?access-control?> Processing Instruction 1.0". W3.org. Retrieved 2012-07-05. ^ "Authorizing Read Access to XML Content Using the <?access-control?> Processing Instruction 1.0 W3C - Working Draft 17 May 2006". W3.org. Retrieved 17 August 2015. ^ "Cross-Origin Resource Sharing - W3C Working Draft 17 March 2009". W3.org. Retrieved 17 August 2015. ^ "Cross-Origin Resource Sharing - W3C Recommendation 16 January 2014". W3.org. Retrieved 17 August 2015. ^ "When can I use... Cross Origin Resource Sharing". caniuse.com. Retrieved 2012-07-12.   External links[edit] W3C RecommendationUsage guideenable cross-origin resource sharingHTML5 Rocks explains how CORS works in detailTest CORS supportMozilla Developer Network on CORS    vte  Web interfaces Server-side   Protocols   CGISCGIFCGIAJPWSRPWebSocket   Server APIs   C NSAPIC ASAPIC ISAPICOM ASPJava servlet container Portlet container CIL System.Web.IHttpHandlerPython WSGIRuby RackJavaScript JSGIPerl PSGILua WSAPIOWIN   Apache modules   mod_jkmod_lispmod_monomod_parrotmod_perlmod_phpmod_proxymod_pythonmod_wsgimod_rubyPhusion Passenger   Topics   Web resource vs. Web serviceOpen APIWebhookApplication server comparison    Client-side   Browser APIs   C NPAPI LiveConnectXPConnect C NPRuntimeC PPAPI NaCl ActiveX   Web APIs    W3C   AudioCanvasCORSFileGeolocationIndexedDBMicrodataSSESVGVideoWebRTCWebSocketWeb messagingWeb storageWeb workerXMLHttpRequest   Khronos   WebCLWebGL   Others   GearsWeb SQL Database (formerly W3C)    Topics   MashupWeb IDL                        Retrieved from "https://en.wikipedia.org/w/index.php?title=Cross-origin_resource_sharing&oldid=677875381"          Categories: Ajax (programming)World Wide Web Consortium standards                      Navigation menu                      Personal tools       Create accountLog in                                  Namespaces       ArticleTalk                                      Variants                                                                     Views       ReadEditView history                        More                                                       Search                                                                                     Navigation               Main pageContentsFeatured contentCurrent eventsRandom articleDonate to WikipediaWikipedia store                   Interaction               HelpAbout WikipediaCommunity portalRecent changesContact page                   Tools               What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationWikidata itemCite this page                   Print/export               Create a bookDownload as PDFPrintable version                   Languages               ÈeštinaDeutschPolskiPortugu?s????????????? / srpski????????????     Edit links                          This page was last modified on 26 August 2015, at 02:15.Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply.  By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.        Privacy policyAbout WikipediaDisclaimersContact WikipediaDevelopersMobile view