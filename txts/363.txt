Tcl                    From Wikipedia, the free encyclopedia                            Jump to:     navigation,      search          For other uses, see Tcl (disambiguation).    This article has multiple issues. Please help improve it or discuss these issues on the talk page.   This article needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed. (July 2012)   This article's lead section may not adequately summarize key points of its contents. Please consider expanding the lead to provide an accessible overview of all important aspects of the article. (July 2012)   This article is missing information about Tcl procedures, procedure calls, and conditional statements. Please expand the article to include this information. Further details may exist on the talk page. (August 2013)   TclParadigmmulti-paradigm: object-oriented, functional, procedural, event-driven programming, imperativeDesigned byJohn OusterhoutDeveloperJohn Ousterhout, Tcl Core TeamFirst appeared1988; 27 years ago (1988)Stable release8.6.4[1] / March 12, 2015; 5 months ago (2015-03-12)Typing disciplinedynamic typing, everything can be treated as a stringLicenseBSD-styleFilename extensions.tclWebsitewww.tcl.tkMajor implementationsActiveTclInfluenced byAWK, LispInfluencedPowerShell,[2] Tea Tcl (originally from Tool Command Language, but conventionally spelled "Tcl" rather than "TCL"; pronounced as "tickle" or "tee-see-ell"[3]) is a scripting language created by John Ousterhout.[4] Originally "born out of frustration",[5] according to the author, with programmers devising their own languages intended to be embedded into applications, Tcl gained acceptance on its own. It is commonly used for rapid prototyping, scripted applications, GUIs and testing. Tcl is used on embedded systems platforms, both in its full form and in several other small-footprint versions. The combination of Tcl and the Tk GUI toolkit is referred to as Tcl/Tk.    Contents  1 History2 Features3 Syntax and fundamental semantics4 Interfacing with other languages 4.1 Module Files 5 Extension packages6 See also7 References8 Further reading9 External links   History[edit] The Tcl programming language was created in the spring of 1988 by John Ousterhout while working at the University of California, Berkeley.[6] DateEventJanuary 1990Tcl announced beyond Berkeley (Winter USENIX).June 1990Expect announced (Summer USENIX).January 1991First announcement of Tk (Winter USENIX).June 1993First Tcl/Tk conference (Berkeley). [table] geometry manager (forerunner of [grid]), [incr Tcl], TclDP and Groupkit, announced there.August 1997Tcl 8.0 introduced a bytecode compiler.[7]April 1999Tcl 8.1 introduces full Unicode support.[8]August 1999Tcl 8.2 introduces Tcl Extension Architecture (TEA)[9]August 2000Tcl Core Team formed, moving Tcl to a more community-oriented development model.September 2002Ninth Tcl/Tk conference (Vancouver). Announcement of starkit packaging system. Tcl 8.4.0 released.[10]December 2007Tcl 8.5 added new datatypes, a new extension repository, bignums, lambdas.[11]December 2012Tcl 8.6 added built-in dynamic object system, TclOO, and stackless evaluation.[12] Tcl conferences and workshops are held in both the United States and Europe. Features[edit] Tcl's features include All operations are commands, including language structures. They are written in prefix notation.Commands are commonly variadic.Everything can be dynamically redefined and overridden.All data types can be manipulated as strings, including source code.Fully dynamic, class-based object system, TclOO, including advanced features such as meta-classes, filters, and mixins.Event-driven interface to sockets and files. Time-based and user-defined events are also possible.Variable visibility restricted to lexical (static) scope by default, but uplevel and upvar allowing procs to interact with the enclosing functions' scopes.All commands defined by Tcl itself generate error messages on incorrect usage.Extensibility, via C, C++, Java, and Tcl.Interpreted language using bytecodeFull Unicode (3.1) support, first released 1999.Cross-platform: Windows API; Unix, Linux, Macintosh, etc.Close integration with windowing (GUI) interface Tk.Multiple distribution mechanisms exist: Full development version (e.g., ActiveState Tcl)tclkit (kind of single-file runtime, only about 1 megabyte in size)starpack (single-file executable of a script/program, derived from the tclkit technology)freewrapTCLSH turns Tcl scripts into single-file binary executable programs.BSD licenses, freely distributable source.  Tcl did not originally have object oriented (OO) syntax (8.6 provides an OO system in Tcl core), so OO functionality was provided by extension packages, such as incr Tcl and XOTcl. Even purely scripted OO packages exist, such as Snit and STOOOP (simple Tcl-only object-oriented programming). Safe-Tcl is a subset of Tcl that has restricted features. File system access is limited and arbitrary system commands are prevented from execution. It uses a dual interpreter model with the "untrusted interpreter" running code in an untrusted script. It was designed by Nathaniel Borenstein and Marshall Rose to include active messages in e-mail. Safe-Tcl can be included in e-mail when the application/safe-tcl and multipart/enabled-mail are supported. The functionality of Safe-Tcl has since been incorporated as part of the standard Tcl/Tk releases.[13][14] Syntax and fundamental semantics[edit] The syntax and semantics are covered by the twelve rules of the dodecalogue[15] (alternative wording[16]). A Tcl script consists of several command invocations. A command invocation is a list of words separated by whitespace and terminated by a newline or semicolon.  word0 word1 word2 ... wordN  The first word is the name of a command, which is not built into the language, but which is in the library. The following words are arguments. So we have:  commandName argument1 argument2 ... argumentN  An example, using the puts command to display a string on the host console, is:   puts "Hello, World!"  This sends the string "Hello, World!" to the 'stdout' device, with an appended newline character. Variables and the results of other commands can be substituted inside strings too, such as in this example where we use set and expr to store a calculation result in a variable, and puts to print the result together with some explanatory text:   # expr evaluates text string as an expression set sum [expr 1+2+3+4+5] puts "The sum of the numbers 1..5 is $sum."    # with variables, it is faster to protect this string using curly braces set x 1 set sum [expr {$x + 2 + 3 + 4 + 5}] puts "The sum of the numbers 1..5 is $sum."    # without curly braces, variables are substituted even before parsing the expression set x 2 set op * set y 3 set res [expr $x$op$y] puts "2 * 3 is $res."  There is one basic construct (the command) and a set of simple substitution rules. Formally, words are either written as-is, with double-quotes around them (allowing whitespace characters to be embedded), or with curly-brace characters around them, which suppresses all substitutions inside (except for backslash-newline elimination). In bare and double-quoted words, three types of substitution occur (once, in a single left-to-right scan through the word): Command substitution replaces the contents of balanced square brackets with the result of evaluating the script contained inside. For example, “[expr 1+2+3]” is replaced with the result of evaluating the contained expression (i.e. 6) since that's what the expr command does.Variable substitution replaces a dollar-sign followed by the name of a variable with the contents of the variable. For example, “$foo” is replaced with the contents of the variable called “foo”. The variable name may be surrounded in curly braces so as to delimit what is and isn't the variable name in otherwise ambiguous cases.Backslash substitution replaces a backslash followed by a letter with another character. For example, “\n” is replaced with a newline. From Tcl 8.5 onwards, any word may be prefixed by “{*}” to cause that word to be split apart into its constituent sub-words for the purposes of building the command invocation (similar to the “,@” sequence of Lisp's quasiquote feature). As a consequence of these rules, the result of any command may be used as an argument to any other command. Also, there is no operator or command for string concatenation, as the language concatenates directly. Note that, unlike in Unix command shells, Tcl does not reparse any string unless explicitly directed to do so, which makes interactive use more cumbersome, but scripted use more predictable (e.g. the presence of spaces in filenames does not cause difficulties). The single equality sign (=) for example is not used at all, and the double equality sign (==) is the test for equality, and even then only in expression contexts such as the expr command or the first argument to if. (Both of those commands are just part of the standard library; they have no particularly special place in the library and can be replaced, if so desired.) The majority of Tcl commands, especially in the standard library, are variadic, and the proc (the constructor for scripted command procedures) allows one to define default values for unspecified arguments and a catch-all argument to allow the code to process arbitrary numbers of arguments. Tcl is not statically typed: each variable may contain integers, floats, strings, lists, command names, dictionaries, or any other value; values are reinterpreted (subject to syntactic constraints) as other types on demand. However, values are immutable and operations that appear to change them actually just return a new value instead. Interfacing with other languages[edit] Tcl interfaces natively with the C language. This is because it was originally written to be a framework for providing a syntactic front-end to commands written in C, and all commands in the language (including things that might otherwise be keywords, such as if or while) are implemented this way. Each command implementation function is passed an array of values that describe the (already substituted) arguments to the command, and is free to interpret those values as it sees fit. Digital logic simulators often include a Tcl scripting interface for simulating Verilog, VHDL and SystemVerilog hardware languages. Tools exist (e.g. SWIG, ffidl) to automatically generate the necessary code to connect arbitrary C functions and the Tcl runtime, and Critcl does the reverse, allowing embedding of arbitrary C code inside a Tcl script and compiling it at runtime into a DLL. See also: C++/Tcl and Tcl/Java Module Files[edit] Environment Modules are written in the Tcl (Tool Command Language) and are interpreted by the modulecmd program via the module[17] user interface. Environment Modules provides a set of extensions to the "standard" Tcl package including setenv, unsetenv, append-path, prepend-path, set-alias and more as defined in the modulefiles man page[18] which, along with the built-in functionality of Tcl, provides a rich environment for handling setting defaults and initializing into an environment. Extension packages[edit] The Tcl language has always allowed for extension packages, which provide additional functionality, such as a GUI, terminal-based application automation, database access, and so on. Commonly used extensions include: TkThe most popular Tcl extension is the Tk toolkit, which provides a graphical user interface library for a variety of operating systems. Each GUI consists of one or more frames. Each frame has a layout manager.ExpectOne of the other very popular Tcl extensions is Expect extension. The early close relationship of Expect with Tcl is largely responsible for the popularity of Tcl in prolific areas of use such as in Unix testing, where Expect was (and still is today) employed very successfully to automate telnet, ssh, and serial sessions to perform many repetitive tasks (i.e., scripting of formerly interactive-only applications). Tcl was the only way to run Expect, so Tcl became very popular in these areas of industry.Tile/TtkTile/Ttk[19] is a styles and theming widget collection that can replace most of the widgets in Tk with variants that are truly platform native through calls to an operating system's API. Themes covered in this way are Windows XP, Windows Classic, Qt (that hooks into the X11 KDE environment libraries) and Aqua (Mac OS X). A theme can also be constructed without these calls using widget definitions supplemented with image pixmaps. Themes created this way include Classic Tk, Step, Alt/Revitalized, Plastik and Keramik. Under Tcl 8.4, this package is known as Tile, while in Tcl 8.5 it has been folded into the core distribution of Tk (as Ttk).TixTix, the Tk Interface eXtension, is a set of user interface components that expand the capabilities of Tcl/Tk and Python applications. It is an open source software package maintained by volunteers in the Tix Project Group and released under a BSD-style license.[20]Itcl/IncrTclItcl is an object system for Tcl, and is normally named as [incr Tcl] (that being the way to increment in Tcl, similar in fashion to the name C++).TcllibTcllib is a set of scripted packages for Tcl that can be used with no compilation steps.TklibTklib is a collection of utility modules for Tk, and a companion to Tcllib.TclUDPThe TclUDP[21] extension provides a simple library to support User Datagram Protocol (UDP) sockets in Tcl.DatabasesTcl Database Connectivity (TDBC), part of Tcl 8.6, is a common database access interface for Tcl scripts. It currently supports drivers for accessing MySQL, ODBC, PostgreSQL and SQLite databases. More are planned for the future. Access to databases is also supported through database-specific extensions, of which there are many available.[22] See also[edit]  Computer programming portal  ExpectItclItkSnitTclMonTclXTkdeskXOTclComparison of Tcl integrated development environmentsEnvironment Modules (software)#modulefiles References[edit]  ^ "Latest Release: Tcl/Tk 8.6.4 (Mar 12, 2015)". 2015-03-12. Retrieved 2015-03-12. ^ Windows PowerShell : PowerShell and WPF: WTF^ From the Tcler's Wiki Tcl vs. TCL^ John Ousterhout. "History of Tcl". Personal pages. Stanford University. Retrieved 2011-08-09. ^ From the inside flap of Tcl and the Tk Toolkit, ISBN 0-201-63337-X^ History of Tcl^ "Tcl/Tk 8.0". tcl.tk. Retrieved 2014-07-01. ^ "Tcl/Tk 8.1". tcl.tk. Retrieved 2014-07-01. ^ "Tcl/Tk 8.2 Release Announcement". tcl.tk. 1999-08-18. Retrieved 2014-07-01. ^ "Tcl/Tk 8.4". tcl.tk. 2013-06-01. Retrieved 2014-07-01. ^ "Tcl/Tk 8.5". tcl.tk. 2013-09-18. Retrieved 2014-07-01. ^ "Tcl/Tk 8.6". tcl.tk. 2013-09-20. Retrieved 2014-07-01. ^ Brown, Lawrie (September 18–20, 1996). "Mobile Code Security". In Terry Bossomaier, Lucy Chubb. Proceedings, 2nd Joint Conference, AUUG '96 and Asia-Pacific WWW '96. Melbourne, Australia. p. 50. Retrieved 2011-03-22. ^ Welch, Brent B.; Jones, Ken; Hobbs, Jeffrey (2003). Practical programming in Tcl and Tk 1 (4th ed.). Prentice Hall PTR. p. 291. ISBN 0-13-038560-3. ^ "Tcl manual page - Tcl Built-In Commands". Tcl.tk. Retrieved 2014-06-14. ^ "Dodekalogue". Wiki.tcl.tk. Retrieved 2014-06-14. ^ "module - command interface to the Modules package". man page. July 2009. Retrieved 9 February 2014. ^ "modulefile - files containing Tcl code for the Modules package". man page. July 2009. Retrieved 9 February 2014. ^ "TK Table Sourceforge Project". ActiveTcl. Retrieved August 7, 2012. ^ "Tix License". Sourceforge. Retrieved August 7, 2012. ^ "TCL UDP". Tcl'ers Wiki. Retrieved August 7, 2012. ^ "TDBC". Tcl'ers Wiki. Retrieved August 7, 2012.   Further reading[edit]  Ousterhout, John K.; Jones, Ken (2006). Tcl and the Tk Toolkit (2nd ed.). Addison Wesley. ISBN 978-0-321-33633-0. Retrieved 4 November 2012. Foster-Johnson, Eric (1997). Graphical Applications with Tcl & Tk (2nd ed.). New York, N.Y.: M&T Books. ISBN 1-55851-569-0. Retrieved 4 November 2012. Brent B. Welch, Practical Programming in Tcl and Tk, Prentice Hall, Upper Saddle River, NJ, USA, ISBN 0-13-038560-3, 2003.J Adrian Zimmer, Tcl/Tk for Programmers, IEEE Computer Society, distributed by John Wiley and Sons, ISBN 0-8186-8515-8, 1998.Mark Harrison and Michael McLennan, Effective Tcl/Tk Programming, Addison-Wesley, Reading, MA, USA, ISBN 0-201-63474-0, 1998Mark Harrison (ed), Tcl/Tk Tools, O'Reilly Media, ISBN 1-56592-218-2, 1997Bert Wheeler, Tcl/Tk 8.5 Programming Cookbook , Packt Publishing, Birmingham, England, UK, ISBN 1849512981, 2011Wojciech Kocjan, Piotr Beltowski Tcl 8.5 Network Programming, Packt Publishing, ISBN 1849510962, 2010Clif Flynt Tcl/Tk, Second Edition : A Developer’s Guide, ISBN 1558608028, 2003  External links[edit] Wikibooks has a book on the topic of: Tcl Programming Wikimedia Commons has media related to Tcl programming language family. Tcl Developer Xchange, Tcl and Tk websiteTcl Sources, main Tcl and Tk source code download websiteTcler's WikiTcl 8.5 TutorialTcl/Tk 8.6.2 DocumentationActiveTcl 8.6 DocumentationTkDocs siteThe Jim Interpreter, a small footprint Tcl implementationTcl-Tk at DMOZActiveState's ActiveTcl distributionTCL/Tk tutorials YouTube playlist in an Android application for your Eggdrop TCL ScriptsWhere Tcl and Tk Went WrongSimple TCL scriptCommunity-supported discussion forums for Tcl/TkTCL on the C2 wiki    vte  Free and open-source software General  Alternative terms for free softwareComparison of open source and closed sourceComparison of open-source software hosting facilitiesFormerly proprietary softwareFree and open-source Android applicationsFree and open-source software packagesFree softwareFree software eventsFree software movementFree software project directoriesFree software web applicationsGratis versus libreLong-term supportOpen-source softwareOutlineSPDX  Operating system families  AROSBSDContikiDarwineCosFreeDOSGNUHaikuInfernoLinuxMachMINIXOpenSolarisPlan 9ReactOS  Development  Basic For QtEclipseFree PascalFreeBASICGambasGCCJavaJuliaLLVMLuaNetBeansOpen64OpenSSHPerlPHPPythonQtROSERubySmalltalkTcl  History  BSDGNUHaikuLinuxMozilla Application SuiteFirefoxThunderbird   Organizations  Android Open Source ProjectApache Software FoundationBlender FoundationThe Document FoundationEclipse FoundationFree Software Foundation EuropeIndiaLatin America FreeBSD Foundationfreedesktop.orgFSMIGNOME FoundationGNU ProjectGoogle CodeKDE e.V.Linux FoundationMozilla FoundationOpen Knowledge FoundationOpen Source Geospatial FoundationOpen Source InitiativeOpenBSD FoundationSoftware Freedom ConservancySourceForgeSymbian FoundationUbuntu FoundationVideoLAN OrganizationWikimedia FoundationX.Org FoundationXiph.Org FoundationXMPP Standards Foundation  Licenses  ApacheAPSLArtisticBeerwareBoostBSDCC0CDDLEPLGNU GPLGNU LGPLISCMITMPLMs-PL/RLWTFPLzlib  License types and standards  Comparison of free and open-source software licensesContributor License AgreementCopyfreeCopyleftDebian Free Software GuidelinesDefinition of Free Cultural WorksFree licenseThe Free Software DefinitionThe Open Source DefinitionOpen-source licensePermissive free software licencePublic domainViral license  Challenges  Binary blobDigital rights managementFree and open-source graphics device driverLack of wireless driver supportHardware restrictionsLicense proliferationMozilla software rebrandingProprietary softwareSCO–Linux controversiesSecure bootSoftware patentsSoftware securityTrusted Computing  Related topics  The Cathedral and the BazaarForkingLinux distributionMicrosoft Open Specification PromiseRevolution OS     Book Category Commons Portal       vte  Web application frameworks ASP.NET  ASP.NET Dynamic DataASP.NET MVCASP.NET Web FormsBFCDotNetNukeMonoRailOpenRastaUmbraco  ColdFusion  CFWheelsColdBox PlatformColdSpringFuseboxMach-IIModel-Glue  Common Lisp  CL-HTTPUnCommon WebWeblocks  C++  CppCMSWt  Haskell  HappstackYesodSnap  Java  AppFuseFlexiveGrailsGWTICEfacesItsNatJavaServer FacesJHipsterJspxJuzuMakumbaOpenXavaPlayReasonable Server FacesRemote Application PlatformRIFESeamSpringStripesStrutsTapestryVaadinWebWorkWicketWaveMakerZK  JavaScript  Ample SDKAngularJSBackbone.jsChaplin.jsClosureDojo ToolkitEmber.jsExt JSjQueryMeteorMooToolsPrototypeRicoscript.aculo.usSencha TouchSproutCoreWakanda  Perl  CatalystDancerMasonMaypoleMojoliciousWebGUI  PHP  CakePHPCodeIgniterDrupaleZ PublishFat-FreeFuelPHPHordeJoomla!KohanaLaravelLithiumMidgardMODXNette FrameworkPhalconPRADOQcodoSeagullSilverStripeSymfonyTYPO3WordPressXarayaXOOPSYiiZend Framework  Python  BlueBreamCherryPyDjangoFlaskGrokNevowPyjamasPylonsPyramidQuixoteTACTICTornadoTurboGearsweb2pyWebwareZope 2  Ruby  CampingMerbPadrinoRuby on RailsSinatra  Scala  LiftPlayScalatra  Smalltalk  AIDA/WebSeaside  Other languages  Application Express (PL/SQL)Grails (Groovy)Kepler (Lua)OpenACS (Tcl)SproutCore (JavaScript/Ruby)SymbolicWeb (Clojure)Yaws (Erlang)     Authority control  GND: 4361529-6                       Retrieved from "https://en.wikipedia.org/w/index.php?title=Tcl&oldid=667888204"          Categories: American inventionsDynamically typed programming languagesProgramming languages created in 1988Scripting languagesTcl programming language familyText-oriented programming languagesHidden categories: Articles needing additional references from July 2012All articles needing additional referencesWikipedia introduction cleanup from July 2012All pages needing cleanupArticles covered by WikiProject Wikify from July 2012All articles covered by WikiProject WikifyArticles to be expanded from August 2013Commons category with local link same as on WikidataArticles with DMOZ linksWikipedia articles with GND identifiers                      Navigation menu                      Personal tools       Create accountLog in                                  Namespaces       ArticleTalk                                      Variants                                                                     Views       ReadEditView history                        More                                                       Search                                                                                     Navigation               Main pageContentsFeatured contentCurrent eventsRandom articleDonate to WikipediaWikipedia store                   Interaction               HelpAbout WikipediaCommunity portalRecent changesContact page                   Tools               What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationWikidata itemCite this page                   Print/export               Create a bookDownload as PDFPrintable version                   Languages               ???????Az?rbaycanca?????????Catal?ÈeštinaDeutschEesti????????Espa?olEsperanto?????FrançaisGalego??????????ÍslenskaItaliano?????Krey?l ayisyenLatinaBahasa MelayuNederlands???Norsk bokm?lOccitanPolskiPortugu?sRomânã????????????? / srpskiSuomiSvenska??????Türkçe?? ??????????????Ti?ng Vi?t??     Edit links                          This page was last modified on 21 June 2015, at 07:20.Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply.  By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.        Privacy policyAbout WikipediaDisclaimersContact WikipediaDevelopersMobile view