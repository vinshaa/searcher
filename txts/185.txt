FastCGI                    From Wikipedia, the free encyclopedia         This is the current revision of this page, as edited by FrescoBot (talk | contribs) at 09:42, 3 July 2015 (Bot: link syntax and minor changes). The present address (URL) is a permanent link to this version.Revision as of 09:42, 3 July 2015 by FrescoBot (talk | contribs) (Bot: link syntax and minor changes)      (diff) ? Previous revision | Latest revision (diff) | Newer revision ? (diff)                   Jump to:     navigation,      search          "FCGI" redirects here. FCGI may also refer to a fellow of the City and Guilds of London Institute.   This article includes a list of references, but its sources remain unclear because it has insufficient inline citations. Please help to improve this article by introducing more precise citations. (June 2010) FastCGI is a binary protocol for interfacing interactive programs with a web server. FastCGI is a variation on the earlier Common Gateway Interface (CGI); FastCGI's main aim is to reduce the overhead associated with interfacing the web server and CGI programs, allowing a server to handle more web page requests at once.    Contents  1 History2 Implementation details3 Web Servers that implement FastCGI4 Language bindings for the FastCGI API5 References6 External links   History[edit] CGI is a protocol for interfacing external applications to web servers. CGI applications run in separate processes, which are created at the start of each request and torn down at the end. This "one new process per request" model makes CGI programs very simple to implement, but limits efficiency and scalability. At high loads, the operating system process creation and destruction overhead becomes significant. In addition, the CGI process model limits resource reuse techniques (such as reusing database connections, in-memory caching, etc.). To address the scalability shortcomings of CGI, Open Market developed FastCGI and first introduced it in their webserver product in the mid-1990s. Open Market originally developed FastCGI in part as a competitive response to Netscape's proprietary, in-process API (NSAPI) for developing Web applications. Although initially developed by Open Market, FastCGI was implemented by a number of other webserver makers. The FastCGI approach, however, competed against other techniques which also aimed to speed and simplify server-subprogram communications. Apache modules such as mod_perl and mod_php appeared around the same time, and they also quickly gained popularity. Today, all of these various approaches (including CGI) remain in common use. Implementation details[edit] Instead of creating a new process for each request, FastCGI uses persistent processes to handle a series of requests. These processes are owned by the FastCGI server, not the web server.[1] To service an incoming request, the web server sends environment information and the page request itself to a FastCGI process over a socket (in the case of local FastCGI processes on the web server) or TCP connection (for remote FastCGI processes in a server farm). Responses are returned from the process to the web server over the same connection, and the web server subsequently delivers that response to the end-user. The connection may be closed at the end of a response, but both the web server and the FastCGI service processes persist.[2] Each individual FastCGI process can handle many requests over its lifetime, thereby avoiding the overhead of per-request process creation and termination. Processing of multiple requests simultaneously can be achieved in several ways: by using a single connection with internal multiplexing (i.e. multiple requests over a single connection); by using multiple connections; or by a combination of these techniques. Multiple FastCGI servers can be configured, increasing stability and scalability. Web site administrators and programmers can find that the separation of web applications from the web server in FastCGI has many advantages over embedded interpreters (mod_perl, mod_php, etc.). This separation allows server and application processes to be restarted independently – an important consideration for busy web sites. It also enables the implementation of per-application / hosting service security policies, which is an important requirement for ISPs and web hosting companies.[3] Different types of incoming requests can be distributed to specific FastCGI servers which have been equipped to handle those particular types of requests efficiently. Web Servers that implement FastCGI[edit] Note: unless stated, completeness of FastCGI implementation is unknown Apache HTTP Server (partial) Implemented by mod_fcgid. This module used to be third-party, but was granted to the ASF as an Apache HTTP Server subproject in 2009, shepherded by Chris Darroch.[4] It only supports UNIX sockets, no TCP sockets.[5]A third-party module mod_fastcgi is also being used. For a while, this module no longer compiled properly under Apache 2.4.x,[6] although that problem has been solved with a fork of the original project.[7]Multiplexing of requests through a single connection is prohibited by Apache 1.x design,[8] so this isn't supportedIn Apache 2.4, mod_proxy_fcgi was added, supporting TCP FastCGI servers. Cherokee[9]Hiawatha[10] Loadbalancing FastCGI supportSupports chrooted FastCGI servers Lighttpd[11]LiteSpeed Web ServerMicrosoft IIS[12]Kerio WebSTARNginxOpenBSD's httpd(8)[13]Open Market Web ServerResin Application ServerRoxen Web ServerSun Java System Web ServerZeus Web Server Language bindings for the FastCGI API[edit] FastCGI can be implemented in any language that supports network sockets. (Since "FastCGI is a protocol, not an implementation," it is not tightly bound to any language at all.) APIs exist[14] for: Ada[15]Borland Delphi/Lazarus FreePascal[16]C / C++Chicken SchemeCommon Lisp[17]D programming languageEiffel[18]Erlang (programming language)GoGuile SchemeHaskellHP BASIC for OpenVMSJava[19]Luanode.js[20]OCamlPerl[21]PHP (via php-fpm, or HipHop for PHP[22])PythonREALbasic (REAL Studio)[23]RubyRust[24]SmallEiffelSmalltalk: FasTalk and Dolphin SmalltalkTclWebDNAVala (via C bindings) Recent frameworks such as Ruby on Rails, Catalyst, Django, Kepler and Plack allow use with either the embedded interpreters (mod_ruby, mod_perl, mod_python or mod_lua, for example), or FastCGI. References[edit] ^ "FastCGI Specification". Open Market, Inc. 1996. ^ "FastCGI:A High-Performance Web Server Interface". Open Market, Inc. 1996. Retrieved 4 October 2010. ^ Paul Heinlein (1 November 1998). "FastCGI: Persistent Applications for Your Web Server". Linux Journal. Retrieved 4 October 2010. ^ FastCGI apache module mod_fcgid^ Debian bug #450748: Please add support for TCP/IP FastCGI servers^ Issues with Apache 2.4 and PHP-FPM^ libapache-mod-fastcgi on Github^ FastCGI – The Forgotten Treasure/ Section 2.3.^ FastCGI for Cherokee^ FastCGI HOWTO for Hiawatha^ FastCGI for Lighttpd^ "FastCGI Extension for IIS6.0 - RTM". FastCGI for IIS. Microsoft. 2008-02-28. Retrieved 2008-02-29. ^ OpenBSD's httpd(8) initial commit^ Application Libraries / Development Kits^ Matreshka^ ExtPascal^ How to use FastCGI from Common Lisp^ Goanna Eiffel[dead link]^ jFastCGI, a Java Servlet implementing FastCGI protocol^ node-fastcgi npm package^ There are a number of FastCGI modules for Perl: FCGI (a compiled module written in C), FCGI::Async (for asynchronous FastCGI applications), AnyEvent::FCGI (for AnyEvent-based applications), FCGI::EV (for EV-based applications), CGI::Fast (Perl CGI-like interface for FastCGI), FCGI::Client (a FastCGI client library), and Net::FastCGI (constants and functions to build and parse FastCGI messages).^ FasterCGI with HHVM^ REAL Studio Web Edition, builds web apps called via FastCGI^ [1] External links[edit] FastCGI specificationFastCGI Web Sitemod_fastcgi – FastCGI module for Apache 1.x and 2.x supporting external applicationsmod_fcgid - a FastCGI module for Apache 2.xMicrosoft FastCGIApache v2.x mod_proxy FastCGI Module    vte  Web interfaces Server-side   Protocols   CGISCGIFCGIAJPWSRPWebSocket   Server APIs   C NSAPIC ASAPIC ISAPICOM ASPJava servlet container Portlet container CIL System.Web.IHttpHandlerPython WSGIRuby RackJavaScript JSGIPerl PSGILua WSAPIOWIN   Apache modules   mod_jkmod_lispmod_monomod_parrotmod_perlmod_phpmod_proxymod_pythonmod_wsgimod_rubyPhusion Passenger   Topics   Web resource vs. Web serviceOpen APIWebhookApplication server comparison    Client-side   Browser APIs   C NPAPI LiveConnectXPConnect C NPRuntimeC PPAPI NaCl ActiveX   Web APIs    W3C   AudioCanvasCORSFileGeolocationIndexedDBMicrodataSSESVGVideoWebRTCWebSocketWeb messagingWeb storageWeb workerXMLHttpRequest   Khronos   WebCLWebGL   Others   GearsWeb SQL Database (formerly W3C)    Topics   MashupWeb IDL                        Retrieved from "https://en.wikipedia.org/w/index.php?title=FastCGI&oldid=669759623"          Categories: Web technologyWorld Wide WebHidden categories: All articles with dead external linksArticles with dead external links from October 2014Articles lacking in-text citations from June 2010All articles lacking in-text citations                      Navigation menu                      Personal tools       Create accountLog in                                  Namespaces       ArticleTalk                                      Variants                                                                     Views       ReadEditView history                        More                                                       Search                                                                                     Navigation               Main pageContentsFeatured contentCurrent eventsRandom articleDonate to WikipediaWikipedia store                   Interaction               HelpAbout WikipediaCommunity portalRecent changesContact page                   Tools               What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationWikidata itemCite this page                   Print/export               Create a bookDownload as PDFPrintable version                   Languages               ÈeštinaDeutschEspa?ol?????FrançaisItalianoNederlands???Polski???????????????????     Edit links                          This page was last modified on 3 July 2015, at 09:42.Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply.  By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.        Privacy policyAbout WikipediaDisclaimersContact WikipediaDevelopersMobile view